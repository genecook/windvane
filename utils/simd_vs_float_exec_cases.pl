#!/usr/bin/perl -w

my @float_mnemonics = qw(
  FABS_FROM_DP
  FABS_SINGLE_FROM_SP
  FADD_FROM_DP
  FADD_SINGLE_FROM_SP
  FCCMPE_FROM_DP
  FCCMPE_SINGLE_FROM_SP
  FCCMP_FROM_DP
  FCCMP_SINGLE_FROM_SP
  FCMPE_FROM_DP
  FCMPE_FROM_DP_ZERO
  FCMPE_SINGLE_FROM_SP
  FCMPE_SINGLE_FROM_SP_ZERO
  FCMP_FROM_DP
  FCMP_FROM_DP_ZERO
  FCMP_SINGLE_FROM_SP
  FCMP_SINGLE_FROM_SP_ZERO
  FCSEL_FROM_DP
  FCSEL_SINGLE_FROM_SP
  FCVTAS_FROM_DP_FP_32
  FCVTAS_FROM_DP_FP_64
  FCVTAS_SINGLE_FROM_SP_FP_32
  FCVTAS_SINGLE_FROM_SP_FP_64
  FCVTAU_FROM_DP_FP_32
  FCVTAU_FROM_DP_FP_64
  FCVTAU_SINGLE_FROM_SP_FP_32
  FCVTAU_SINGLE_FROM_SP_FP_64
  FCVT_FROM_DP_TO_HP
  FCVT_FROM_HP_TO_DP
  FCVTMS_FROM_DP_FP_32
  FCVTMS_FROM_DP_FP_64
  FCVTMS_SINGLE_FROM_SP_FP_32
  FCVTMS_SINGLE_FROM_SP_FP_64
  FCVTMU_FROM_DP_FP_32
  FCVTMU_FROM_DP_FP_64
  FCVTMU_SINGLE_FROM_SP_FP_32
  FCVTMU_SINGLE_FROM_SP_FP_64
  FCVTNS_FROM_DP_FP_32
  FCVTNS_FROM_DP_FP_64
  FCVTNS_SINGLE_FROM_SP_FP_32
  FCVTNS_SINGLE_FROM_SP_FP_64
  FCVTNU_FROM_DP_FP_32
  FCVTNU_FROM_DP_FP_64
  FCVTNU_SINGLE_FROM_SP_FP_32
  FCVTNU_SINGLE_FROM_SP_FP_64
  FCVTPS_FROM_DP_FP_32
  FCVTPS_FROM_DP_FP_64
  FCVTPS_SINGLE_FROM_SP_FP_32
  FCVTPS_SINGLE_FROM_SP_FP_64
  FCVTPU_FROM_DP_FP_32
  FCVTPU_FROM_DP_FP_64
  FCVTPU_SINGLE_FROM_SP_FP_32
  FCVTPU_SINGLE_FROM_SP_FP_64
  FCVT_SINGLE_FROM_DP_TO_SP
  FCVT_SINGLE_FROM_HP_TO_SP
  FCVT_SINGLE_FROM_SP_TO_DP
  FCVT_SINGLE_FROM_SP_TO_HP
  FCVTZS_FROM_DP_FP_32
  FCVTZS_FROM_DP_FP_64
  FCVTZS_FROM_DP_FP_FIXED_32
  FCVTZS_FROM_DP_FP_FIXED_64
  FCVTZS_SINGLE_FROM_SP_FP_32
  FCVTZS_SINGLE_FROM_SP_FP_64
  FCVTZS_SINGLE_FROM_SP_FP_FIXED_32
  FCVTZS_SINGLE_FROM_SP_FP_FIXED_64
  FCVTZU_FROM_DP_FP_32
  FCVTZU_FROM_DP_FP_64
  FCVTZU_FROM_DP_FP_FIXED_32
  FCVTZU_FROM_DP_FP_FIXED_64
  FCVTZU_SINGLE_FROM_SP_FP_32
  FCVTZU_SINGLE_FROM_SP_FP_64
  FCVTZU_SINGLE_FROM_SP_FP_FIXED_32
  FCVTZU_SINGLE_FROM_SP_FP_FIXED_64
  FDIV_FROM_DP
  FDIV_SINGLE_FROM_SP
  FMADD_FROM_DP
  FMADD_SINGLE_FROM_SP
  FMAX_FROM_DP
  FMAXNM_FROM_DP
  FMAXNM_SINGLE_FROM_SP
  FMAX_SINGLE_FROM_SP
  FMIN_FROM_DP
  FMINNM_FROM_DP
  FMINNM_SINGLE_FROM_SP
  FMIN_SINGLE_FROM_SP
  FMOV_FP_8_64_128
  FMOV_FP_8_64_128_TO_TOP
  FMOV_FROM_DP_FP_64
  FMOV_IMM_FROM_DP
  FMOV_IMM_SINGLE_FROM_SP
  FMOV_REG_FROM_DP
  FMOV_SINGLE_FROM_SP_FP_32
  FMOV_SINGLE_REG_FROM_SP
  FMOV_SINGLE_TO_SP_FP_32
  FMOV_TO_DP_FP_64
  FMSUB_FROM_DP
  FMSUB_SINGLE_FROM_SP
  FMUL_FROM_DP
  FMUL_SINGLE_FROM_SP
  FNEG_FROM_DP
  FNEG_SINGLE_FROM_SP
  FNMADD_FROM_DP
  FNMADD_SINGLE_FROM_SP
  FNMSUB_FROM_DP
  FNMSUB_SINGLE_FROM_SP
  FNMUL_FROM_DP
  FNMUL_SINGLE_FROM_SP
  FRINTA_FROM_DP
  FRINTA_SINGLE_FROM_SP
  FRINTI_FROM_DP
  FRINTI_SINGLE_FROM_SP
  FRINTM_FROM_DP
  FRINTM_SINGLE_FROM_SP
  FRINTN_FROM_DP
  FRINTN_SINGLE_FROM_SP
  FRINTP_FROM_DP
  FRINTP_SINGLE_FROM_SP
  FRINTX_FROM_DP
  FRINTX_SINGLE_FROM_SP
  FRINTZ_FROM_DP
  FRINTZ_SINGLE_FROM_SP
  FSQRT_FROM_DP
  FSQRT_SINGLE_FROM_SP
  FSUB_FROM_DP
  FSUB_SINGLE_FROM_SP
  SCVTF_SINGLE_TO_SP_FP_32
  SCVTF_SINGLE_TO_SP_FP_64
  SCVTF_SINGLE_TO_SP_FP_FIXED_32
  SCVTF_SINGLE_TO_SP_FP_FIXED_64
  SCVTF_TO_DP_FP_32
  SCVTF_TO_DP_FP_64
  SCVTF_TO_DP_FP_FIXED_32
  SCVTF_TO_DP_FP_FIXED_64
  UCVTF_SINGLE_TO_SP_FP_32
  UCVTF_SINGLE_TO_SP_FP_64
  UCVTF_SINGLE_TO_SP_FP_FIXED_32
  UCVTF_SINGLE_TO_SP_FP_FIXED_64
  UCVTF_TO_DP_FP_32
  UCVTF_TO_DP_FP_64
  UCVTF_TO_DP_FP_FIXED_32
  UCVTF_TO_DP_FP_FIXED_64
  SIMD_LDR_IMM_REG_POST_8_128
  SIMD_LDR_IMM_REG_POST_16
  SIMD_LDR_IMM_REG_POST_32
  SIMD_LDR_IMM_REG_POST_64
  SIMD_LDR_IMM_REG_POST_8
  SIMD_LDR_IMM_REG_PRE_8_128
  SIMD_LDR_IMM_REG_PRE_16
  SIMD_LDR_IMM_REG_PRE_32
  SIMD_LDR_IMM_REG_PRE_64
  SIMD_LDR_IMM_REG_PRE_8
  SIMD_LDR_REG_OFF_8_128
  SIMD_LDR_REG_OFF_16
  SIMD_LDR_REG_OFF_32
  SIMD_LDR_REG_OFF_64
  SIMD_LDR_REG_OFF_8
  SIMD_LDR_IMM_REG_8_128
  SIMD_LDR_IMM_REG_16
  SIMD_LDR_IMM_REG_32
  SIMD_LDR_IMM_REG_64
  SIMD_LDR_IMM_REG_8
  SIMD_LDR_REG_8_128
  SIMD_LDR_REG_32
  SIMD_LDR_REG_64
  SIMD_STR_IMM_REG_POST_8_128
  SIMD_STR_IMM_REG_POST_16
  SIMD_STR_IMM_REG_POST_32
  SIMD_STR_IMM_REG_POST_64
  SIMD_STR_IMM_REG_POST_8
  SIMD_STR_IMM_REG_PRE_8_128
  SIMD_STR_IMM_REG_PRE_16
  SIMD_STR_IMM_REG_PRE_32
  SIMD_STR_IMM_REG_PRE_64
  SIMD_STR_IMM_REG_PRE_8
  SIMD_STR_REG_OFF_8_128
  SIMD_STR_REG_OFF_16
  SIMD_STR_REG_OFF_32
  SIMD_STR_REG_OFF_64
  SIMD_STR_REG_OFF_8
  SIMD_STR_IMM_REG_8_128
  SIMD_STR_IMM_REG_16
  SIMD_STR_IMM_REG_32
  SIMD_STR_IMM_REG_64
  SIMD_STR_IMM_REG_8
);

my %vfp_mnemonics = ();

foreach my $mnemonic (@float_mnemonics) {
    $vfp_mnemonics{$mnemonic} = 1;
}

my @simd_mnemonics = ();

while(<>) {
    next if not /SIMD/;
    if (/(SIMD_\w+)\=\d+\,/) {
	$mnemonic = $1;
        if (defined($vfp_mnemonics{$mnemonic})) {
           # skip it. already covered in vfp instructions list...
        } else {
	    push(@simd_mnemonics,$mnemonic);
        }
        next;
    }
}


open(VFP_CASES,">VFP_CASES.C") or die;

foreach my $case (@float_mnemonics) {
  printf(VFP_CASES "  case %s:\n",$case); 
}
 
close VFP_CASES;

print "VFP instruction cases file: VFP_CASES.C\n";


open(SIMD_CASES,">SIMD_CASES.C") or die;

foreach my $case (@simd_mnemonics) {
  printf(SIMD_CASES "  case %s:\n",$case); 
}
 
close SIMD_CASES;

print "SIMD instruction cases file: SIMD_CASES.C\n";

 

