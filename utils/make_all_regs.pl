#!/usr/bin/perl -w

#****************************************************************************************
# make_all_regs.pl
#****************************************************************************************

my @regs = split(/\n/,`cat ./utils/allregs.txt`);


my $enums_out = './derived/A64SIMREG_ENUMS.h';

my $inits_out = './derived/A64SIMREG_INITS.C';

my $cases_out = './derived/A64SIMREG_CASES.C';

my $accesses_out = './derived/A64SIMREG_ACCESS_CASES.C';

my $reserves_out = './derived/A64SIMREG_RESERVE_CASES.C';


#---------------------------------------------------------------------------------------
# enums...
#---------------------------------------------------------------------------------------

open(ENUMS,">$enums_out") or die;

print ENUMS "// AUTOGENERATED VIA utils/make_all_regs.pl\n";
print ENUMS "// USED ONLY FOR REGISTER NAME TRANSLATION\n\n";

print ENUMS "enum {\n";

foreach my $reg (@regs) {
    print ENUMS "\t${reg}_index\,\n";
}

print ENUMS "};\n";

close ENUMS;

print "ENUMS FILE: $enums_out\n";


#---------------------------------------------------------------------------------------
# register name to index...
#---------------------------------------------------------------------------------------

open(INITS,">$inits_out") or die;

print INITS "// AUTOGENERATED VIA utils/make_all_regs.pl\n";
print INITS "// USED ONLY FOR REGISTER NAME TRANSLATION\n\n";

foreach my $reg (@regs) {
    print INITS "  all_supported_registers[\"${reg}\"] \= ${reg}_index\;\n";
}

close INITS;

print "INITS FILE: $inits_out\n";


#---------------------------------------------------------------------------------------
# register inits/accesses...
#---------------------------------------------------------------------------------------

open(CASES,">$cases_out") or die;
open(ACCESS_CASES,">$accesses_out") or die;
open(RESERVE_CASES,">$reserves_out") or die;

print CASES "// AUTOGENERATED VIA utils/make_all_regs.pl\n";
print CASES "// USED ONLY FOR REGISTER NAME TRANSLATION\n\n";

print ACCESS_CASES "// AUTOGENERATED VIA utils/make_all_regs.pl\n";
print ACCESS_CASES "// USED ONLY FOR REGISTER NAME TRANSLATION\n\n";

print RESERVE_CASES "// AUTOGENERATED VIA utils/make_all_regs.pl\n";
print RESERVE_CASES "// USED ONLY FOR REGISTER RESERVATION\n\n";

foreach my $reg (@regs) {
    if ( $reg eq 'CURRENTEL') {
       print CASES "    case ${reg}_index\: Pstate.EL(rval>>2);";
       print CASES " break;\n";

       print ACCESS_CASES "    case ${reg}_index\: rval = Pstate.EL()<<2;";
       print ACCESS_CASES " break;\n";
       next;
    }
    if ( $reg eq 'NZCV') {
       print CASES "    case ${reg}_index\: Pstate.NZCV(rval>>28);";
       print CASES " break;\n";

       print ACCESS_CASES "    case ${reg}_index\: rval = Pstate.NZCV();";
       print ACCESS_CASES " break;\n";
       next;
    }
    if ( $reg eq 'DAIF') {
       print CASES "    case ${reg}_index\: Pstate.DAIF(rval);";
       print CASES " break;\n";
       
       print ACCESS_CASES "    case ${reg}_index\: rval = Pstate.DAIF();";
       print ACCESS_CASES " break;\n";
       next;
    }
    if ( $reg eq 'SP') {
       print CASES "    case ${reg}_index\: Pstate.SP(rval);";
       print CASES " break;\n";
       
       print ACCESS_CASES "    case ${reg}_index\: rval = Pstate.SP();";
       print ACCESS_CASES " break;\n";
       next;
    }
    
    my $statereg = $reg;
    my $is_vreg = 0;

    if ( $reg =~ /^[QV](\d+)$/ ) {
	# 128 bit vector register update
	$rid = $1;
	$statereg = "V[$rid]";
	$is_vreg = 1;
    }
    if ( $reg =~ /^S(\d+)$/ ) {
	# single precision register update
	$rid = $1;
	$statereg = "V[$rid]";
	$is_vreg = 1;
    }
    if ( $reg =~ /^D(\d+)$/ ) {
	# double precision register update
	$rid = $1;
	$statereg = "V[$rid]";
	$is_vreg = 1;
    }
    if ( $reg =~ /^[RX](\d+)$/ ) {
	$rid = $1;
	$statereg = "GP[$rid]";
    }
    if ( $reg =~ /^GP(\d+)$/ ) {
	$rid = $1;
	$statereg = "GP[$rid]";
    }
    
    print CASES "    case ${reg}_index\: ${statereg}.Value(rval);";
    print CASES " ${statereg}.ValueHi(rval_hi);" if $is_vreg;
    print CASES " break;\n";
    
    print ACCESS_CASES "    case ${reg}_index\: rval = ${statereg}.Value();";
    print ACCESS_CASES " rval_hi = ${statereg}.ValueHi();" if $is_vreg;
    print ACCESS_CASES " break;\n";
    
    print RESERVE_CASES "    case ${reg}_index\: ${statereg}.SetReserved();";
    print RESERVE_CASES " break;\n";
}

close CASES;
close ACCESS_CASES;

print "CASES FILE: $cases_out\n";
print "ACCESS CASES FILE: $accesses_out\n";



