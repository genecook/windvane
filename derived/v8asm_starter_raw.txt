instance-name: ADC_32
instruction: ADC
section: C6.6.1
page: C6-387
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: ADC <Wd>, <Wn>, <Wm>
printf:   printf("ADC %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str());

instance-name: ADC_64
instruction: ADC
section: C6.6.1
page: C6-387
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: ADC <Xd>, <Xn>, <Xm>
printf:   printf("ADC %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ADCS_32
instruction: ADCS
section: C6.6.2
page: C6-388
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: ADCS <Wd>, <Wn>, <Wm>
printf:   printf("ADCS %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str());

instance-name: ADCS_64
instruction: ADCS
section: C6.6.2
page: C6-388
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: ADCS <Xd>, <Xn>, <Xm>
printf:   printf("ADCS %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ADD_REG_32
instruction: ADD (extended register)
section: C6.6.3
page: C6-389
destination operands: <Wd|WSP>,<Xd|SP>
source operands: <R>,<Wm>,<Wn|WSP>,<Xn|SP>,<m>
assembly: ADD <Wd|WSP>, <Wn|WSP>, <Wm>{, <extend> {#<amount>}}
printf:   printf("ADD %s, %s, %s, %s #%u\n",XnSP(packet->Rd.Value(),true).c_str(),XnSP(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: ADD_REG_64
instruction: ADD (extended register)
section: C6.6.3
page: C6-389
destination operands: <Wd|WSP>,<Xd|SP>
source operands: <R>,<Wm>,<Wn|WSP>,<Xn|SP>,<m>
assembly: ADD <Xd|SP>, <Xn|SP>, <R><m>{, <extend> {#<amount>}}
printf:   printf("ADD %s, %s, %c%s, %s #%u\n",XnSP(packet->Rd.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: ADD_IMM_32
instruction: ADD (immediate)
section: C6.6.4
page: C6-391
destination operands: <Wd|WSP>,<Xd|SP>
source operands: <Wn|WSP>,<Xn|SP>,<imm>
assembly: ADD <Wd|WSP>, <Wn|WSP>, #<imm>{, <shift>}
printf:   printf("ADD %s, %s, #%s, %s\n",XnSP(packet->Rd.Value(),true).c_str(),XnSP(packet->Rn.Value(),true).c_str(),ZeroExtend(packet->imm12.Value(),12,0).c_str(),as_imm_shift(packet->shift.Value()).c_str());

instance-name: ADD_IMM_64
instruction: ADD (immediate)
section: C6.6.4
page: C6-391
destination operands: <Wd|WSP>,<Xd|SP>
source operands: <Wn|WSP>,<Xn|SP>,<imm>
assembly: ADD <Xd|SP>, <Xn|SP>, #<imm>{, <shift>}
printf:   printf("ADD %s, %s, #%s, %s\n",XnSP(packet->Rd.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),ZeroExtend(packet->imm12.Value(),12,0).c_str(),as_imm_shift(packet->shift.Value()).c_str());

instance-name: ADD_SHIFT_REG_32
instruction: ADD (shifted register)
section: C6.6.5
page: C6-393
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: ADD <Wd>, <Wn>, <Wm>{, <shift> #<amount>}
printf:   printf("ADD %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),as_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: ADD_SHIFT_REG_64
instruction: ADD (shifted register)
section: C6.6.5
page: C6-393
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: ADD <Xd>, <Xn>, <Xm>{, <shift> #<amount>}
printf:   printf("ADD %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),as_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: ADDS_REG_32
instruction: ADDS (extended register)
section: C6.6.6
page: C6-395
destination operands: <Wd>,<Xd>
source operands: <R>,<Wm>,<Wn|WSP>,<Xn|SP>,<m>
assembly: ADDS <Wd>, <Wn|WSP>, <Wm>{, <extend> {#<amount>}}
printf:   printf("ADDS %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnSP(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: ADDS_REG_64
instruction: ADDS (extended register)
section: C6.6.6
page: C6-395
destination operands: <Wd>,<Xd>
source operands: <R>,<Wm>,<Wn|WSP>,<Xn|SP>,<m>
assembly: ADDS <Xd>, <Xn|SP>, <R><m>{, <extend> {#<amount>}}
printf:   printf("ADDS %s, %s, %c%s, %s #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: ADDS_IMM_32
instruction: ADDS (immediate)
section: C6.6.7
page: C6-397
destination operands: <Wd>,<Xd>
source operands: <Wn|WSP>,<Xn|SP>,<imm>
assembly: ADDS <Wd>, <Wn|WSP>, #<imm>{, <shift>}
printf:   printf("ADDS %s, %s, #%s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnSP(packet->Rn.Value(),true).c_str(),ZeroExtend(packet->imm12.Value(),12,0).c_str(),as_imm_shift(packet->shift.Value()).c_str());

instance-name: ADDS_IMM_64
instruction: ADDS (immediate)
section: C6.6.7
page: C6-397
destination operands: <Wd>,<Xd>
source operands: <Wn|WSP>,<Xn|SP>,<imm>
assembly: ADDS <Xd>, <Xn|SP>, #<imm>{, <shift>}
printf:   printf("ADDS %s, %s, #%s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),ZeroExtend(packet->imm12.Value(),12,0).c_str(),as_imm_shift(packet->shift.Value()).c_str());

instance-name: ADDS_SHIFT_REG_32
instruction: ADDS (shifted register)
section: C6.6.8
page: C6-399
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: ADDS <Wd>, <Wn>, <Wm>{, <shift> #<amount>}
printf:   printf("ADDS %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),as_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: ADDS_SHIFT_REG_64
instruction: ADDS (shifted register)
section: C6.6.8
page: C6-399
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: ADDS <Xd>, <Xn>, <Xm>{, <shift> #<amount>}
printf:   printf("ADDS %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),as_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: ADR
instruction: ADR
section: C6.6.9
page: C6-401
destination operands: <Xd>
source operands: <label>
assembly: ADR <Xd>, <label>
printf:   printf("ADR %s, %lld\n",XnXZR(packet->Rd.Value(),false).c_str(),(packet->op.Value() == 1) ? SignExtend((packet->immhi.Value()<<2 | packet->immlo.Value())<<12,32) : SignExtend(packet->immhi.Value()<<2 | packet->immlo.Value(),21));

instance-name: ADRP
instruction: ADRP
section: C6.6.10
page: C6-402
destination operands: <Xd>
source operands: <label>
assembly: ADRP <Xd>, <label>
printf:   printf("ADRP %s, %lld\n",XnXZR(packet->Rd.Value(),false).c_str(),(packet->op.Value() == 1) ? SignExtend((packet->immhi.Value()<<2 | packet->immlo.Value())<<12,32) : SignExtend(packet->immhi.Value()<<2 | packet->immlo.Value(),21));

instance-name: AND_IMM_32
instruction: AND (immediate)
section: C6.6.11
page: C6-403
destination operands: <Wd|WSP>,<Xd|SP>
source operands: <Wn>,<Xn>,<imm>
assembly: AND <Wd|WSP>, <Wn>, #<imm>
printf:   printf("AND %s, %s, #%llu\n",XnSP(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),DecodeBitMasks(tmask,packet->N.Value(),packet->imms.Value(),packet->immr.Value(),true));

instance-name: AND_IMM_64
instruction: AND (immediate)
section: C6.6.11
page: C6-403
destination operands: <Wd|WSP>,<Xd|SP>
source operands: <Wn>,<Xn>,<imm>
assembly: AND <Xd|SP>, <Xn>, #<imm>
printf:   printf("AND %s, %s, #%llu\n",XnSP(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),DecodeBitMasks(tmask,packet->N.Value(),packet->imms.Value(),packet->immr.Value(),true));

instance-name: AND_SHIFT_REG_32
instruction: AND (shifted register)
section: C6.6.12
page: C6-404
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: AND <Wd>, <Wn>, <Wm>{, <shift> #<amount>}
printf:   printf("AND %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),as_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: AND_SHIFT_REG_64
instruction: AND (shifted register)
section: C6.6.12
page: C6-404
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: AND <Xd>, <Xn>, <Xm>{, <shift> #<amount>}
printf:   printf("AND %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),as_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: ANDS_IMM_32
instruction: ANDS (immediate)
section: C6.6.13
page: C6-406
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>,<imm>
assembly: ANDS <Wd>, <Wn>, #<imm>
printf:   printf("ANDS %s, %s, #%llu\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),DecodeBitMasks(tmask,packet->N.Value(),packet->imms.Value(),packet->immr.Value(),true));

instance-name: ANDS_IMM_64
instruction: ANDS (immediate)
section: C6.6.13
page: C6-406
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>,<imm>
assembly: ANDS <Xd>, <Xn>, #<imm>
printf:   printf("ANDS %s, %s, #%llu\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),DecodeBitMasks(tmask,packet->N.Value(),packet->imms.Value(),packet->immr.Value(),true));

instance-name: ANDS_SHIFT_REG_32
instruction: ANDS (shifted register)
section: C6.6.14
page: C6-408
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: ANDS <Wd>, <Wn>, <Wm>{, <shift> #<amount>}
printf:   printf("ANDS %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),as_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: ANDS_SHIFT_REG_64
instruction: ANDS (shifted register)
section: C6.6.14
page: C6-408
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: ANDS <Xd>, <Xn>, <Xm>{, <shift> #<amount>}
printf:   printf("ANDS %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),as_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());


'ASR (register)' (ALIAS IGNORED)


'ASR (immediate)' (ALIAS IGNORED)

instance-name: ASRV_32
instruction: ASRV
section: C6.6.17
page: C6-412
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: ASRV <Wd>, <Wn>, <Wm>
printf:   printf("ASRV %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str());

instance-name: ASRV_64
instruction: ASRV
section: C6.6.17
page: C6-412
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: ASRV <Xd>, <Xn>, <Xm>
printf:   printf("ASRV %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());


'AT' (ALIAS IGNORED)

instance-name: B_COND
instruction: B.cond
section: C6.6.19
page: C6-414
destination operands: 
source operands: <cond>,<label>
assembly: B.<cond> <label>
printf:   printf("B.%s %lld\n",Bcond(packet->cond.Value()).c_str(),SignExtend(packet->imm19.Value()<<2,21));

instance-name: B
instruction: B
section: C6.6.20
page: C6-415
destination operands: 
source operands: <label>
assembly: B <label>
printf:   printf("B %lld\n",SignExtend(packet->imm26.Value()<<2,28));


'BFI' (ALIAS IGNORED)

instance-name: BFM_32
instruction: BFM
section: C6.6.22
page: C6-417
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>
assembly: BFM <Wd>, <Wn>, #<immr>, #<imms>
printf:   printf("BFM %s, %s, #%u, #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),packet->immr.Value(),packet->imms.Value());

instance-name: BFM_64
instruction: BFM
section: C6.6.22
page: C6-417
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>
assembly: BFM <Xd>, <Xn>, #<immr>, #<imms>
printf:   printf("BFM %s, %s, #%u, #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),packet->immr.Value(),packet->imms.Value());


'BFXIL' (ALIAS IGNORED)

instance-name: BIC_SHIFT_REG_32
instruction: BIC (shifted register)
section: C6.6.24
page: C6-420
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: BIC <Wd>, <Wn>, <Wm>{, <shift> #<amount>}
printf:   printf("BIC %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),as_reg_shift(packet->shift.Value()).c_str(),packet->imm3.Value());

instance-name: BIC_SHIFT_REG_64
instruction: BIC (shifted register)
section: C6.6.24
page: C6-420
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: BIC <Xd>, <Xn>, <Xm>{, <shift> #<amount>}
printf:   printf("BIC %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),as_reg_shift(packet->shift.Value()).c_str(),packet->imm3.Value());

instance-name: BICS_SHIFT_REG_32
instruction: BICS (shifted register)
section: C6.6.25
page: C6-422
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: BICS <Wd>, <Wn>, <Wm>{, <shift> #<amount>}
printf:   printf("BICS %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),as_reg_shift(packet->shift.Value()).c_str(),packet->imm3.Value());

instance-name: BICS_SHIFT_REG_64
instruction: BICS (shifted register)
section: C6.6.25
page: C6-422
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: BICS <Xd>, <Xn>, <Xm>{, <shift> #<amount>}
printf:   printf("BICS %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),as_reg_shift(packet->shift.Value()).c_str(),packet->imm3.Value());

instance-name: BL
instruction: BL
section: C6.6.26
page: C6-424
destination operands: 
source operands: <label>
assembly: BL <label>
printf:   printf("BL %lld\n",SignExtend(packet->imm26.Value()<<2,28));

instance-name: BLR
instruction: BLR
section: C6.6.27
page: C6-425
destination operands: 
source operands: <Xn>
assembly: BLR <Xn>
printf:   printf("BLR %s\n",XnXZR(packet->Rn.Value(),false).c_str());

instance-name: BR
instruction: BR
section: C6.6.28
page: C6-426
destination operands: 
source operands: <Xn>
assembly: BR <Xn>
printf:   printf("BR %s\n",XnXZR(packet->Rn.Value(),false).c_str());

instance-name: BRK
instruction: BRK
section: C6.6.29
page: C6-427
destination operands: 
source operands: <imm>
assembly: BRK #<imm>
printf:   printf("BRK #%d\n",packet->imm16.Value());

instance-name: CBNZ_32
instruction: CBNZ
section: C6.6.30
page: C6-428
destination operands: 
source operands: <Wt>,<Xt>,<label>
assembly: CBNZ <Wt>, <label>
printf:   printf("CBNZ %s, %lld\n",XnXZR(packet->Rt.Value(),true).c_str(),SignExtend(packet->imm19.Value()<<2,21));

instance-name: CBNZ_64
instruction: CBNZ
section: C6.6.30
page: C6-428
destination operands: 
source operands: <Wt>,<Xt>,<label>
assembly: CBNZ <Xt>, <label>
printf:   printf("CBNZ %s, %lld\n",XnXZR(packet->Rt.Value(),false).c_str(),SignExtend(packet->imm19.Value()<<2,21));

instance-name: CBZ_32
instruction: CBZ
section: C6.6.31
page: C6-429
destination operands: 
source operands: <Wt>,<Xt>,<label>
assembly: CBZ <Wt>, <label>
printf:   printf("CBZ %s, %lld\n",XnXZR(packet->Rt.Value(),true).c_str(),SignExtend(packet->imm19.Value()<<2,21));

instance-name: CBZ_64
instruction: CBZ
section: C6.6.31
page: C6-429
destination operands: 
source operands: <Wt>,<Xt>,<label>
assembly: CBZ <Xt>, <label>
printf:   printf("CBZ %s, %lld\n",XnXZR(packet->Rt.Value(),false).c_str(),SignExtend(packet->imm19.Value()<<2,21));

instance-name: CCMN_IMM_32
instruction: CCMN (immediate)
section: C6.6.32
page: C6-430
destination operands: 
source operands: <Wn>,<Xn>,<cond>,<imm>
assembly: CCMN <Wn>, #<imm>, #<nzcv>, <cond>
printf:   printf("CCMN %s, #%d, #%u, %s\n",XnXZR(packet->Rn.Value(),true).c_str(),packet->imm5.Value(),packet->nzcv.Value(),Bcond(packet->cond.Value()).c_str());

instance-name: CCMN_IMM_64
instruction: CCMN (immediate)
section: C6.6.32
page: C6-430
destination operands: 
source operands: <Wn>,<Xn>,<cond>,<imm>
assembly: CCMN <Xn>, #<imm>, #<nzcv>, <cond>
printf:   printf("CCMN %s, #%d, #%u, %s\n",XnXZR(packet->Rn.Value(),false).c_str(),packet->imm5.Value(),packet->nzcv.Value(),Bcond(packet->cond.Value()).c_str());

instance-name: CCMN_REG_32
instruction: CCMN (register)
section: C6.6.33
page: C6-431
destination operands: 
source operands: <Wm>,<Wn>,<Xm>,<Xn>,<cond>
assembly: CCMN <Wn>, <Wm>, #<nzcv>, <cond>
printf:   printf("CCMN %s, %s, #%u, %s\n",XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),packet->nzcv.Value(),Bcond(packet->cond.Value()).c_str());

instance-name: CCMN_REG_64
instruction: CCMN (register)
section: C6.6.33
page: C6-431
destination operands: 
source operands: <Wm>,<Wn>,<Xm>,<Xn>,<cond>
assembly: CCMN <Xn>, <Xm>, #<nzcv>, <cond>
printf:   printf("CCMN %s, %s, #%u, %s\n",XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),packet->nzcv.Value(),Bcond(packet->cond.Value()).c_str());

instance-name: CCMP_IMM_32
instruction: CCMP (immediate)
section: C6.6.34
page: C6-432
destination operands: 
source operands: <Wn>,<Xn>,<cond>,<imm>
assembly: CCMP <Wn>, #<imm>, #<nzcv>, <cond>
printf:   printf("CCMP %s, #%d, #%u, %s\n",XnXZR(packet->Rn.Value(),true).c_str(),packet->imm5.Value(),packet->nzcv.Value(),Bcond(packet->cond.Value()).c_str());

instance-name: CCMP_IMM_64
instruction: CCMP (immediate)
section: C6.6.34
page: C6-432
destination operands: 
source operands: <Wn>,<Xn>,<cond>,<imm>
assembly: CCMP <Xn>, #<imm>, #<nzcv>, <cond>
printf:   printf("CCMP %s, #%d, #%u, %s\n",XnXZR(packet->Rn.Value(),false).c_str(),packet->imm5.Value(),packet->nzcv.Value(),Bcond(packet->cond.Value()).c_str());

instance-name: CCMP_REG_32
instruction: CCMP (register)
section: C6.6.35
page: C6-433
destination operands: 
source operands: <Wm>,<Wn>,<Xm>,<Xn>,<cond>
assembly: CCMP <Wn>, <Wm>, #<nzcv>, <cond>
printf:   printf("CCMP %s, %s, #%u, %s\n",XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),packet->nzcv.Value(),Bcond(packet->cond.Value()).c_str());

instance-name: CCMP_REG_64
instruction: CCMP (register)
section: C6.6.35
page: C6-433
destination operands: 
source operands: <Wm>,<Wn>,<Xm>,<Xn>,<cond>
assembly: CCMP <Xn>, <Xm>, #<nzcv>, <cond>
printf:   printf("CCMP %s, %s, #%u, %s\n",XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),packet->nzcv.Value(),Bcond(packet->cond.Value()).c_str());


'CINC' (ALIAS IGNORED)


'CINV' (ALIAS IGNORED)

instance-name: CLREX
instruction: CLREX
section: C6.6.38
page: C6-436
destination operands: 
source operands: <imm>
assembly: CLREX {#<imm>}
printf:   printf("CLREX #%u\n",packet->CRm.Value());

instance-name: CLS_32
instruction: CLS
section: C6.6.39
page: C6-437
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>
assembly: CLS <Wd>, <Wn>
printf:   printf("CLS %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str());

instance-name: CLS_64
instruction: CLS
section: C6.6.39
page: C6-437
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>
assembly: CLS <Xd>, <Xn>
printf:   printf("CLS %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str());

instance-name: CLZ_32
instruction: CLZ
section: C6.6.40
page: C6-438
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>
assembly: CLZ <Wd>, <Wn>
printf:   printf("CLZ %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str());

instance-name: CLZ_64
instruction: CLZ
section: C6.6.40
page: C6-438
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>
assembly: CLZ <Xd>, <Xn>
printf:   printf("CLZ %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str());


'CMN (extended register)' (ALIAS IGNORED)


'CMN (immediate)' (ALIAS IGNORED)


'CMN (shifted register)' (ALIAS IGNORED)


'CMP (extended register)' (ALIAS IGNORED)


'CMP (immediate)' (ALIAS IGNORED)


'CMP (shifted register)' (ALIAS IGNORED)


'CNEG' (ALIAS IGNORED)

instance-name: CRC32B
instance-num: 1
instruction: CRC32B
section: C6.6.48
page: C6-448
destination operands: 
source operands: <Wd>,<Wm>,<Wn>,<Xm>
assembly: CRC32B <Wd>, <Wn>, <Wm>
printf:   printf("CRC32B %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str());

instance-name: CRC32H
instance-num: 2
instruction: CRC32H
section: C6.6.48
page: C6-448
destination operands: 
source operands: <Wd>,<Wm>,<Wn>,<Xm>
assembly: CRC32H <Wd>, <Wn>, <Wm>
printf:   printf("CRC32H %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str());

instance-name: CRC32W
instance-num: 3
instruction: CRC32W
section: C6.6.48
page: C6-448
destination operands: 
source operands: <Wd>,<Wm>,<Wn>,<Xm>
assembly: CRC32W <Wd>, <Wn>, <Wm>
printf:   printf("CRC32W %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str());

instance-name: CRC32X
instance-num: 4
instruction: CRC32X
section: C6.6.48
page: C6-448
destination operands: 
source operands: <Wd>,<Wm>,<Wn>,<Xm>
assembly: CRC32X <Wd>, <Wn>, <Xm>
printf:   printf("CRC32X %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: CRC32CB
instance-num: 1
instruction: CRC32CB
section: C6.6.49
page: C6-449
destination operands: 
source operands: <Wd>,<Wm>,<Wn>,<Xm>
assembly: CRC32CB <Wd>, <Wn>, <Wm>
printf:   printf("CRC32CB %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str());

instance-name: CRC32CH
instance-num: 2
instruction: CRC32CH
section: C6.6.49
page: C6-449
destination operands: 
source operands: <Wd>,<Wm>,<Wn>,<Xm>
assembly: CRC32CH <Wd>, <Wn>, <Wm>
printf:   printf("CRC32CH %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str());

instance-name: CRC32CW
instance-num: 3
instruction: CRC32CW
section: C6.6.49
page: C6-449
destination operands: 
source operands: <Wd>,<Wm>,<Wn>,<Xm>
assembly: CRC32CW <Wd>, <Wn>, <Wm>
printf:   printf("CRC32CW %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str());

instance-name: CRC32CX
instance-num: 4
instruction: CRC32CX
section: C6.6.49
page: C6-449
destination operands: 
source operands: <Wd>,<Wm>,<Wn>,<Xm>
assembly: CRC32CX <Wd>, <Wn>, <Xm>
printf:   printf("CRC32CX %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: CSEL_32
instruction: CSEL
section: C6.6.50
page: C6-450
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>,<cond>
assembly: CSEL <Wd>, <Wn>, <Wm>, <cond>
printf:   printf("CSEL %s, %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),Bcond(packet->cond.Value()).c_str());

instance-name: CSEL_64
instruction: CSEL
section: C6.6.50
page: C6-450
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>,<cond>
assembly: CSEL <Xd>, <Xn>, <Xm>, <cond>
printf:   printf("CSEL %s, %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),Bcond(packet->cond.Value()).c_str());


'CSET' (ALIAS IGNORED)


'CSETM' (ALIAS IGNORED)

instance-name: CSINC_32
instruction: CSINC
section: C6.6.53
page: C6-453
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>,<cond>
assembly: CSINC <Wd>, <Wn>, <Wm>, <cond>
printf:   printf("CSINC %s, %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),Bcond(packet->cond.Value()).c_str());

instance-name: CSINC_64
instruction: CSINC
section: C6.6.53
page: C6-453
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>,<cond>
assembly: CSINC <Xd>, <Xn>, <Xm>, <cond>
printf:   printf("CSINC %s, %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),Bcond(packet->cond.Value()).c_str());

instance-name: CSINV_32
instruction: CSINV
section: C6.6.54
page: C6-455
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>,<cond>
assembly: CSINV <Wd>, <Wn>, <Wm>, <cond>
printf:   printf("CSINV %s, %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),Bcond(packet->cond.Value()).c_str());

instance-name: CSINV_64
instruction: CSINV
section: C6.6.54
page: C6-455
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>,<cond>
assembly: CSINV <Xd>, <Xn>, <Xm>, <cond>
printf:   printf("CSINV %s, %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),Bcond(packet->cond.Value()).c_str());

instance-name: CSNEG_32
instruction: CSNEG
section: C6.6.55
page: C6-457
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>,<cond>
assembly: CSNEG <Wd>, <Wn>, <Wm>, <cond>
printf:   printf("CSNEG %s, %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),Bcond(packet->cond.Value()).c_str());

instance-name: CSNEG_64
instruction: CSNEG
section: C6.6.55
page: C6-457
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>,<cond>
assembly: CSNEG <Xd>, <Xn>, <Xm>, <cond>
printf:   printf("CSNEG %s, %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),Bcond(packet->cond.Value()).c_str());


'DC' (ALIAS IGNORED)

instance-name: DCPS1
instruction: DCPS1
section: C6.6.57
page: C6-460
destination operands: 
source operands: <imm>
assembly: DCPS1 {#<imm>}
printf:   printf("DCPS1 #%d\n",packet->imm16.Value());

instance-name: DCPS2
instruction: DCPS2
section: C6.6.58
page: C6-461
destination operands: 
source operands: <imm>
assembly: DCPS2 {#<imm>}
printf:   printf("DCPS2 #%d\n",packet->imm16.Value());

instance-name: DCPS3
instruction: DCPS3
section: C6.6.59
page: C6-462
destination operands: 
source operands: <imm>
assembly: DCPS3 {#<imm>}
printf:   printf("DCPS3 #%d\n",packet->imm16.Value());

instance-name: DMB
instruction: DMB
section: C6.6.60
page: C6-463
destination operands: 
source operands: <imm>,<option>
assembly: DMB <option>|#<imm>
printf:   printf("DMB %s\n",barrier_option(packet->CRm.Value(), packet->op2.Value()==6).c_str());

instance-name: DRPS
instruction: DRPS
section: C6.6.61
page: C6-465
destination operands: 
source operands: 
assembly: DRPS
printf:   printf("DRPS\n");

instance-name: DSB
instruction: DSB
section: C6.6.62
page: C6-466
destination operands: 
source operands: <imm>,<option>
assembly: DSB <option>|#<imm>
printf:   printf("DSB %s\n",barrier_option(packet->CRm.Value(), packet->op2.Value()==6).c_str());

instance-name: EON_SHIFT_REG_32
instruction: EON (shifted register)
section: C6.6.63
page: C6-468
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: EON <Wd>, <Wn>, <Wm>{, <shift> #<amount>}
printf:   printf("EON %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),eon_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: EON_SHIFT_REG_64
instruction: EON (shifted register)
section: C6.6.63
page: C6-468
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: EON <Xd>, <Xn>, <Xm>{, <shift> #<amount>}
printf:   printf("EON %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),eon_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: EOR_IMM_32
instruction: EOR (immediate)
section: C6.6.64
page: C6-470
destination operands: <Wd|WSP>,<Xd|SP>
source operands: <Wn>,<Xn>,<imm>
assembly: EOR <Wd|WSP>, <Wn>, #<imm>
printf:   printf("EOR %s, %s, #%llu\n",XnSP(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),DecodeBitMasks(tmask,packet->N.Value(),packet->imms.Value(),packet->immr.Value(),true));

instance-name: EOR_IMM_64
instruction: EOR (immediate)
section: C6.6.64
page: C6-470
destination operands: <Wd|WSP>,<Xd|SP>
source operands: <Wn>,<Xn>,<imm>
assembly: EOR <Xd|SP>, <Xn>, #<imm>
printf:   printf("EOR %s, %s, #%llu\n",XnSP(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),DecodeBitMasks(tmask,packet->N.Value(),packet->imms.Value(),packet->immr.Value(),true));

instance-name: EOR_SHIFT_REG_32
instruction: EOR (shifted register)
section: C6.6.65
page: C6-471
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: EOR <Wd>, <Wn>, <Wm>{, <shift> #<amount>}
printf:   printf("EOR %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),eon_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: EOR_SHIFT_REG_64
instruction: EOR (shifted register)
section: C6.6.65
page: C6-471
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: EOR <Xd>, <Xn>, <Xm>{, <shift> #<amount>}
printf:   printf("EOR %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),eon_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: ERET
instruction: ERET
section: C6.6.66
page: C6-473
destination operands: 
source operands: 
assembly: ERET
printf:   printf("ERET\n");

instance-name: EXTR_32
instruction: EXTR
section: C6.6.67
page: C6-474
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: EXTR <Wd>, <Wn>, <Wm>, #<lsb>
printf:   printf("EXTR %s, %s, %s, #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),packet->imms.Value());

instance-name: EXTR_64
instruction: EXTR
section: C6.6.67
page: C6-474
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: EXTR <Xd>, <Xn>, <Xm>, #<lsb>
printf:   printf("EXTR %s, %s, %s, #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),packet->imms.Value());

instance-name: HINT
instruction: HINT
section: C6.6.68
page: C6-476
destination operands: 
source operands: <imm>
assembly: HINT #<imm>
printf:   printf("HINT #%u\n",packet->CRm.Value()<<3 | packet->op2.Value());

instance-name: HLT
instruction: HLT
section: C6.6.69
page: C6-478
destination operands: 
source operands: <imm>
assembly: HLT #<imm>
printf:   printf("HLT #%u\n",packet->imm16.Value());

instance-name: HVC
instruction: HVC
section: C6.6.70
page: C6-479
destination operands: 
source operands: <imm>
assembly: HVC #<imm>
printf:   printf("HVC #%d\n",packet->imm16.Value());


'IC' (ALIAS IGNORED)

instance-name: ISB
instruction: ISB
section: C6.6.72
page: C6-481
destination operands: 
source operands: <imm>,<option>
assembly: ISB {<option>|#<imm>}
printf:   printf("ISB %s\n",barrier_option(packet->CRm.Value(), packet->op2.Value()==6).c_str());

instance-name: LDAR_32
instruction: LDAR
section: C6.6.73
page: C6-482
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>
assembly: LDAR <Wt>, [<Xn|SP>{,#0}]
printf:   printf("LDAR %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LDAR_64
instruction: LDAR
section: C6.6.73
page: C6-482
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>
assembly: LDAR <Xt>, [<Xn|SP>{,#0}]
printf:   printf("LDAR %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LDARB
instruction: LDARB
section: C6.6.74
page: C6-485
destination operands: 
source operands: <Wt>,<Xn|SP>
assembly: LDARB <Wt>, [<Xn|SP>{,#0}]
printf:   printf("LDARB %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LDARH
instruction: LDARH
section: C6.6.75
page: C6-488
destination operands: 
source operands: <Wt>,<Xn|SP>
assembly: LDARH <Wt>, [<Xn|SP>{,#0}]
printf:   printf("LDARH %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LDAXP_32
instruction: LDAXP
section: C6.6.76
page: C6-491
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>
assembly: LDAXP <Wt1>, <Wt2>, [<Xn|SP>{,#0}]
printf:   printf("LDAXP %s, %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnXZR(packet->Rt2.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LDAXP_64
instruction: LDAXP
section: C6.6.76
page: C6-491
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>
assembly: LDAXP <Xt1>, <Xt2>, [<Xn|SP>{,#0}]
printf:   printf("LDAXP %s, %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnXZR(packet->Rt2.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LDAXR_32
instruction: LDAXR
section: C6.6.77
page: C6-494
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>
assembly: LDAXR <Wt>, [<Xn|SP>{,#0}]
printf:   printf("LDAXR %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LDAXR_64
instruction: LDAXR
section: C6.6.77
page: C6-494
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>
assembly: LDAXR <Xt>, [<Xn|SP>{,#0}]
printf:   printf("LDAXR %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LDAXRB
instruction: LDAXRB
section: C6.6.78
page: C6-497
destination operands: 
source operands: <Wt>,<Xn|SP>
assembly: LDAXRB <Wt>, [<Xn|SP>{,#0}]
printf:   printf("LDAXRB %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LDAXRH
instruction: LDAXRH
section: C6.6.79
page: C6-500
destination operands: 
source operands: <Wt>,<Xn|SP>
assembly: LDAXRH <Wt>, [<Xn|SP>{,#0}]
printf:   printf("LDAXRH %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LDNP_32
qualifier: opc = 00
notes: 32-bit variant 
instruction: LDNP
section: C6.6.80
page: C6-503
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: LDNP <Wt1>, <Wt2>, [<Xn|SP>{, #<imm>}]
printf:   printf("LDNP %s, %s, [%s, #%lld]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnXZR(packet->Rt2.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: LDNP_64
qualifier: opc = 10
notes: 64-bit variant 
instruction: LDNP
section: C6.6.80
page: C6-503
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: LDNP <Xt1>, <Xt2>, [<Xn|SP>{, #<imm>}]
printf:   printf("LDNP %s, %s, [%s, #%lld]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnXZR(packet->Rt2.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 8);

instance-name: LDP_REG_POST_32
instance-num: 1
qualifier: opc = 00
notes: 32-bit variant 
instruction: LDP (Post-index)
section: C6.6.81
page: C6-505
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: LDP <Wt1>, <Wt2>, [<Xn|SP>], #<imm>
printf:   printf("LDP %s, %s, [%s], #%lld\n",XnXZR(packet->Rt.Value(),true).c_str(),XnXZR(packet->Rt2.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: LDP_REG_POST_64
instance-num: 1
qualifier: opc = 10
notes: 64-bit variant 
instruction: LDP (Post-index)
section: C6.6.81
page: C6-505
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: LDP <Xt1>, <Xt2>, [<Xn|SP>], #<imm>
printf:   printf("LDP %s, %s, [%s], #%lld\n",XnXZR(packet->Rt.Value(),false).c_str(),XnXZR(packet->Rt2.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 8);

instance-name: LDP_REG_PRE_32
instance-num: 2
qualifier: opc = 00
notes: 32-bit variant 
instruction: LDP (Pre-index)
section: C6.6.81
page: C6-505
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: LDP <Wt1>, <Wt2>, [<Xn|SP>, #<imm>]!
printf:   printf("LDP %s, %s, [%s, #%lld]!\n",XnXZR(packet->Rt.Value(),true).c_str(),XnXZR(packet->Rt2.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: LDP_REG_PRE_64
instance-num: 2
qualifier: opc = 10
notes: 64-bit variant 
instruction: LDP (Pre-index)
section: C6.6.81
page: C6-505
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: LDP <Xt1>, <Xt2>, [<Xn|SP>, #<imm>]!
printf:   printf("LDP %s, %s, [%s, #%lld]!\n",XnXZR(packet->Rt.Value(),false).c_str(),XnXZR(packet->Rt2.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 8);

instance-name: LDP_REG_OFF_32
instance-num: 3
qualifier: opc = 00
notes: 32-bit variant 
instruction: LDP (Signed offset)
section: C6.6.81
page: C6-505
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: LDP <Wt1>, <Wt2>, [<Xn|SP>{, #<imm>}]
printf:   printf("LDP %s, %s, [%s, #%lld]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnXZR(packet->Rt2.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: LDP_REG_OFF_64
instance-num: 3
qualifier: opc = 10
notes: 64-bit variant 
instruction: LDP (Signed offset)
section: C6.6.81
page: C6-505
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: LDP <Xt1>, <Xt2>, [<Xn|SP>{, #<imm>}]
printf:   printf("LDP %s, %s, [%s, #%lld]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnXZR(packet->Rt2.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 8);

instance-name: LDPSW_REG_POST
instance-num: 1
instruction: LDPSW (Post-index)
section: C6.6.82
page: C6-508
destination operands: 
source operands: <Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: LDPSW <Xt1>, <Xt2>, [<Xn|SP>], #<imm>
printf:   printf("LDPSW %s, %s, [%s], #%lld\n",XnXZR(packet->Rt.Value(),false).c_str(),XnXZR(packet->Rt2.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: LDPSW_REG_PRE
instance-num: 2
instruction: LDPSW (Pre-index)
section: C6.6.82
page: C6-508
destination operands: 
source operands: <Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: LDPSW <Xt1>, <Xt2>, [<Xn|SP>], #<imm>
printf:   printf("LDPSW %s, %s, [%s], #%lld\n",XnXZR(packet->Rt.Value(),false).c_str(),XnXZR(packet->Rt2.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: LDPSW_REG_OFF
instance-num: 3
instruction: LDPSW (Signed offset)
section: C6.6.82
page: C6-508
destination operands: 
source operands: <Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: LDPSW <Xt1>, <Xt2>, [<Xn|SP>], #<imm>
printf:   printf("LDPSW %s, %s, [%s], #%lld\n",XnXZR(packet->Rt.Value(),false).c_str(),XnXZR(packet->Rt2.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: LDR_IMM_REG_POST_32
instance-num: 1
instruction: LDR (immediate) (Post-index)
section: C6.6.83
page: C6-511
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDR <Wt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDR %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: LDR_IMM_REG_POST_64
instance-num: 1
instruction: LDR (immediate) (Post-index)
section: C6.6.83
page: C6-511
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDR <Xt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDR %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: LDR_IMM_REG_PRE_32
instance-num: 2
instruction: LDR (immediate) (Pre-index)
section: C6.6.83
page: C6-511
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDR <Wt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDR %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: LDR_IMM_REG_PRE_64
instance-num: 2
instruction: LDR (immediate) (Pre-index)
section: C6.6.83
page: C6-511
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDR <Xt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDR %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: LDR_IMM_OFF_32
instance-num: 3
instruction: LDR (immediate) (Unsigned offset)
section: C6.6.83
page: C6-511
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDR <Wt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDR %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: LDR_IMM_OFF_64
instance-num: 3
instruction: LDR (immediate) (Unsigned offset)
section: C6.6.83
page: C6-511
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDR <Xt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDR %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: LDR_32
qualifier: opc = 00
notes: 32-bit variant 
instruction: LDR (literal)
section: C6.6.84
page: C6-514
destination operands: 
source operands: <Wt>,<Xt>,<label>
assembly: LDR <Wt>, <label>
printf:   printf("LDR %s, %lld\n",XnXZR(packet->Rt.Value(),true).c_str(),SignExtend(packet->imm19.Value()<<2,21));

instance-name: LDR_64
qualifier: opc = 01
notes: 64-bit variant 
instruction: LDR (literal)
section: C6.6.84
page: C6-514
destination operands: 
source operands: <Wt>,<Xt>,<label>
assembly: LDR <Xt>, <label>
printf:   printf("LDR %s, %lld\n",XnXZR(packet->Rt.Value(),false).c_str(),SignExtend(packet->imm19.Value()<<2,21));

instance-name: LDR_REG_32
instruction: LDR (register)
section: C6.6.85
page: C6-515
destination operands: 
source operands: <R>,<Wt>,<Xn|SP>,<Xt>,<m>
assembly: LDR <Wt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("LDR %s, [%s, %c%s, %s %u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: LDR_REG_64
instruction: LDR (register)
section: C6.6.85
page: C6-515
destination operands: 
source operands: <R>,<Wt>,<Xn|SP>,<Xt>,<m>
assembly: LDR <Xt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("LDR %s, [%s, %c%s, %s %u]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: LDRB_IMM_REG_POST
instance-num: 1
instruction: LDRB (immediate) (Post-index)
section: C6.6.86
page: C6-518
destination operands: 
source operands: <Wt>,<Xn|SP>,<pimm>,<simm>
assembly: LDRB <Wt>, [<Xn|SP>], #<simm>
printf:   printf("LDRB %s, [%s], #%d\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDRB_IMM_REG_PRE
instance-num: 2
instruction: LDRB (immediate) (Pre-index)
section: C6.6.86
page: C6-518
destination operands: 
source operands: <Wt>,<Xn|SP>,<pimm>,<simm>
assembly: LDRB <Wt>, [<Xn|SP>, #<simm>]!
printf:   printf("LDRB %s, [%s, #%d]!\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDRB_IMM_OFF
instance-num: 3
instruction: LDRB (immediate) (Unsigned offset)
section: C6.6.86
page: C6-518
destination operands: 
source operands: <Wt>,<Xn|SP>,<pimm>,<simm>
assembly: LDRB <Wt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDRB %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: LDRB_REG_32
instruction: LDRB (register)
section: C6.6.87
page: C6-521
destination operands: 
source operands: <R>,<Wt>,<Xn|SP>,<m>
assembly: LDRB <Wt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("LDRB %s, [%s, %c%s, %s %u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: LDRH_IMM_REG_POST
instance-num: 1
instruction: LDRH (immediate) (Post-index)
section: C6.6.88
page: C6-524
destination operands: 
source operands: <Wt>,<Xn|SP>,<pimm>,<simm>
assembly: LDRH <Wt>, [<Xn|SP>], #<simm>
printf:   printf("LDRH %s, [%s], #%d\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDRH_IMM_REG_PRE
instance-num: 2
instruction: LDRH (immediate) (Pre-index)
section: C6.6.88
page: C6-524
destination operands: 
source operands: <Wt>,<Xn|SP>,<pimm>,<simm>
assembly: LDRH <Wt>, [<Xn|SP>, #<simm>]!
printf:   printf("LDRH %s, [%s, #%d]!\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDRH_IMM_OFF
instance-num: 3
instruction: LDRH (immediate) (Unsigned offset)
section: C6.6.88
page: C6-524
destination operands: 
source operands: <Wt>,<Xn|SP>,<pimm>,<simm>
assembly: LDRH <Wt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDRH %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: LDRH_REG_32
instruction: LDRH (register)
section: C6.6.89
page: C6-527
destination operands: 
source operands: <R>,<Wt>,<Xn|SP>,<m>
assembly: LDRH <Wt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("LDRH %s, [%s, %c%s, %s %u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: LDRSB_IMM_REG_POST_32
instance-num: 1
qualifier: opc = 11
notes: 32-bit variant 
instruction: LDRSB (immediate) (Post-index)
section: C6.6.90
page: C6-530
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDRSB <Wt>, [<Xn|SP>], #<simm>
printf:   printf("LDRSB %s, [%s], #%d\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDRSB_IMM_REG_POST_64
instance-num: 1
qualifier: opc = 10
notes: 64-bit variant 
instruction: LDRSB (immediate) (Post-index)
section: C6.6.90
page: C6-530
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDRSB <Xt>, [<Xn|SP>], #<simm>
printf:   printf("LDRSB %s, [%s], #%d\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDRSB_IMM_REG_PRE_32
instance-num: 2
qualifier: opc = 11
notes: 32-bit variant 
instruction: LDRSB (immediate) (Pre-index)
section: C6.6.90
page: C6-530
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDRSB <Wt>, [<Xn|SP>, #<simm>]!
printf:   printf("LDRSB %s, [%s, #%d]!\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDRSB_IMM_REG_PRE_64
instance-num: 2
qualifier: opc = 10
notes: 64-bit variant 
instruction: LDRSB (immediate) (Pre-index)
section: C6.6.90
page: C6-530
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDRSB <Xt>, [<Xn|SP>, #<simm>]!
printf:   printf("LDRSB %s, [%s, #%d]!\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDRSB_IMM_OFF_32
instance-num: 3
qualifier: opc = 11
notes: 32-bit variant 
instruction: LDRSB (immediate) (Unsigned offset)
section: C6.6.90
page: C6-530
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDRSB <Wt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDRSB %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: LDRSB_IMM_OFF_64
instance-num: 3
qualifier: opc = 10
notes: 64-bit variant 
instruction: LDRSB (immediate) (Unsigned offset)
section: C6.6.90
page: C6-530
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDRSB <Xt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDRSB %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: LDRSB_REG_32
qualifier: opc = 11
notes: 32-bit variant 
instruction: LDRSB (register)
section: C6.6.91
page: C6-533
destination operands: 
source operands: <R>,<Wt>,<Xn|SP>,<Xt>,<m>
assembly: LDRSB <Wt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("LDRSB %s, [%s, %c%s, %s %u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: LDRSB_REG_64
qualifier: opc = 10
notes: 64-bit variant 
instruction: LDRSB (register)
section: C6.6.91
page: C6-533
destination operands: 
source operands: <R>,<Wt>,<Xn|SP>,<Xt>,<m>
assembly: LDRSB <Xt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("LDRSB %s, [%s, %c%s, %s %u]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: LDRSH_IMM_REG_POST_32
instance-num: 1
qualifier: opc = 11
notes: 32-bit variant 
instruction: LDRSH (immediate) (Post-index)
section: C6.6.92
page: C6-536
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDRSH <Wt>, [<Xn|SP>], #<simm>
printf:   printf("LDRSH %s, [%s], #%d\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDRSH_IMM_REG_POST_64
instance-num: 1
qualifier: opc = 10
notes: 64-bit variant 
instruction: LDRSH (immediate) (Post-index)
section: C6.6.92
page: C6-536
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDRSH <Xt>, [<Xn|SP>], #<simm>
printf:   printf("LDRSH %s, [%s], #%d\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDRSH_IMM_REG_PRE_32
instance-num: 2
qualifier: opc = 11
notes: 32-bit variant 
instruction: LDRSH (immediate) (Pre-index)
section: C6.6.92
page: C6-536
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDRSH <Wt>, [<Xn|SP>, #<simm>]!
printf:   printf("LDRSH %s, [%s, #%d]!\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDRSH_IMM_REG_PRE_64
instance-num: 2
qualifier: opc = 10
notes: 64-bit variant 
instruction: LDRSH (immediate) (Pre-index)
section: C6.6.92
page: C6-536
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDRSH <Xt>, [<Xn|SP>, #<simm>]!
printf:   printf("LDRSH %s, [%s, #%d]!\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDRSH_IMM_OFF_32
instance-num: 3
qualifier: opc = 11
notes: 32-bit variant 
instruction: LDRSH (immediate) (Unsigned offset)
section: C6.6.92
page: C6-536
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDRSH <Wt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDRSH %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: LDRSH_IMM_OFF_64
instance-num: 3
qualifier: opc = 10
notes: 64-bit variant 
instruction: LDRSH (immediate) (Unsigned offset)
section: C6.6.92
page: C6-536
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDRSH <Xt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDRSH %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: LDRSH_REG_32
qualifier: opc = 11
notes: 32-bit variant 
instruction: LDRSH (register)
section: C6.6.93
page: C6-539
destination operands: 
source operands: <R>,<Wt>,<Xn|SP>,<Xt>,<m>
assembly: LDRSH <Wt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("LDRSH %s, [%s, %c%s, %s %u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: LDRSH_REG_64
qualifier: opc = 10
notes: 64-bit variant 
instruction: LDRSH (register)
section: C6.6.93
page: C6-539
destination operands: 
source operands: <R>,<Wt>,<Xn|SP>,<Xt>,<m>
assembly: LDRSH <Xt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("LDRSH %s, [%s, %c%s, %s %u]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: LDRSW_IMM_REG_POST
instance-num: 1
instruction: LDRSW (immediate) (Post-index)
section: C6.6.94
page: C6-542
destination operands: 
source operands: <Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDRSW <Xt>, [<Xn|SP>], #<simm>
printf:   printf("LDRSW %s, [%s], #%d\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDRSW_IMM_REG_PRE
instance-num: 2
instruction: LDRSW (immediate) (Pre-index)
section: C6.6.94
page: C6-542
destination operands: 
source operands: <Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDRSW <Xt>, [<Xn|SP>, #<simm>]!
printf:   printf("LDRSW %s, [%s, #%d]!\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDRSW_IMM_OFF
instance-num: 3
instruction: LDRSW (immediate) (Unsigned offset)
section: C6.6.94
page: C6-542
destination operands: 
source operands: <Xn|SP>,<Xt>,<pimm>,<simm>
assembly: LDRSW <Xt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDRSW %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: LDRSW
instruction: LDRSW (literal)
section: C6.6.95
page: C6-545
destination operands: 
source operands: <Xt>,<label>
assembly: LDRSW <Xt>, <label>
printf:   printf("LDRSW %s, %lld\n",XnXZR(packet->Rt.Value(),false).c_str(),SignExtend(packet->imm19.Value()<<2,21));

instance-name: LDRSW_REG_64
instruction: LDRSW (register)
section: C6.6.96
page: C6-546
destination operands: 
source operands: <R>,<Xn|SP>,<Xt>,<m>
assembly: LDRSW <Xt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("LDRSW %s, [%s, %c%s, %s %u]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: LDTR_32
instruction: LDTR
section: C6.6.97
page: C6-549
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<simm>
assembly: LDTR <Wt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDTR %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDTR_64
instruction: LDTR
section: C6.6.97
page: C6-549
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<simm>
assembly: LDTR <Xt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDTR %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDTRB
instruction: LDTRB
section: C6.6.98
page: C6-551
destination operands: 
source operands: <Wt>,<Xn|SP>,<simm>
assembly: LDTRB <Wt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDTRB %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDTRH
instruction: LDTRH
section: C6.6.99
page: C6-553
destination operands: 
source operands: <Wt>,<Xn|SP>,<simm>
assembly: LDTRH <Wt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDTRH %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDTRSB_32
qualifier: opc = 11
notes: 32-bit variant 
instruction: LDTRSB
section: C6.6.100
page: C6-555
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<simm>
assembly: LDTRSB <Wt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDTRSB %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDTRSB_64
qualifier: opc = 10
notes: 64-bit variant 
instruction: LDTRSB
section: C6.6.100
page: C6-555
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<simm>
assembly: LDTRSB <Xt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDTRSB %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDTRSH_32
qualifier: opc = 11
notes: 32-bit variant 
instruction: LDTRSH
section: C6.6.101
page: C6-557
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<simm>
assembly: LDTRSH <Wt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDTRSH %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDTRSH_64
qualifier: opc = 10
notes: 64-bit variant 
instruction: LDTRSH
section: C6.6.101
page: C6-557
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<simm>
assembly: LDTRSH <Xt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDTRSH %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDTRSW
instruction: LDTRSW
section: C6.6.102
page: C6-559
destination operands: 
source operands: <Xn|SP>,<Xt>,<simm>
assembly: LDTRSW <Xt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDTRSW %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDUR_32
instruction: LDUR
section: C6.6.103
page: C6-561
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<simm>
assembly: LDUR <Wt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDUR %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDUR_64
instruction: LDUR
section: C6.6.103
page: C6-561
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<simm>
assembly: LDUR <Xt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDUR %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDURB
instruction: LDURB
section: C6.6.104
page: C6-563
destination operands: 
source operands: <Wt>,<Xn|SP>,<simm>
assembly: LDURB <Wt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDURB %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDURH
instruction: LDURH
section: C6.6.105
page: C6-565
destination operands: 
source operands: <Wt>,<Xn|SP>,<simm>
assembly: LDURH <Wt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDURH %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDURSB_32
qualifier: opc = 11
notes: 32-bit variant 
instruction: LDURSB
section: C6.6.106
page: C6-567
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<simm>
assembly: LDURSB <Wt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDURSB %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDURSB_64
qualifier: opc = 10
notes: 64-bit variant 
instruction: LDURSB
section: C6.6.106
page: C6-567
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<simm>
assembly: LDURSB <Xt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDURSB %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDURSH_32
qualifier: opc = 11
notes: 32-bit variant 
instruction: LDURSH
section: C6.6.107
page: C6-569
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<simm>
assembly: LDURSH <Wt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDURSH %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDURSH_64
qualifier: opc = 10
notes: 64-bit variant 
instruction: LDURSH
section: C6.6.107
page: C6-569
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<simm>
assembly: LDURSH <Xt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDURSH %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDURSW
instruction: LDURSW
section: C6.6.108
page: C6-571
destination operands: 
source operands: <Xn|SP>,<Xt>,<simm>
assembly: LDURSW <Xt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDURSW %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: LDXP_32
instruction: LDXP
section: C6.6.109
page: C6-573
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>
assembly: LDXP <Wt1>, <Wt2>, [<Xn|SP>{,#0}]
printf:   printf("LDXP %s, %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnXZR(packet->Rt2.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LDXP_64
instruction: LDXP
section: C6.6.109
page: C6-573
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>
assembly: LDXP <Xt1>, <Xt2>, [<Xn|SP>{,#0}]
printf:   printf("LDXP %s, %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnXZR(packet->Rt2.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LDXR_32
instruction: LDXR
section: C6.6.110
page: C6-576
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>
assembly: LDXR <Wt>, [<Xn|SP>{,#0}]
printf:   printf("LDXR %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LDXR_64
instruction: LDXR
section: C6.6.110
page: C6-576
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>
assembly: LDXR <Xt>, [<Xn|SP>{,#0}]
printf:   printf("LDXR %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LDXRB
instruction: LDXRB
section: C6.6.111
page: C6-579
destination operands: 
source operands: <Wt>,<Xn|SP>
assembly: LDXRB <Wt>, [<Xn|SP>{,#0}]
printf:   printf("LDXRB %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LDXRH
instruction: LDXRH
section: C6.6.112
page: C6-582
destination operands: 
source operands: <Wt>,<Xn|SP>
assembly: LDXRH <Wt>, [<Xn|SP>{,#0}]
printf:   printf("LDXRH %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());


'LSL (register)' (ALIAS IGNORED)


'LSL (immediate)' (ALIAS IGNORED)

instance-name: LSLV_32
instruction: LSLV
section: C6.6.115
page: C6-587
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: LSLV <Wd>, <Wn>, <Wm>
printf:   printf("LSLV %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str());

instance-name: LSLV_64
instruction: LSLV
section: C6.6.115
page: C6-587
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: LSLV <Xd>, <Xn>, <Xm>
printf:   printf("LSLV %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());


'LSR (register)' (ALIAS IGNORED)


'LSR (immediate)' (ALIAS IGNORED)

instance-name: LSRV_32
instruction: LSRV
section: C6.6.118
page: C6-590
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: LSRV <Wd>, <Wn>, <Wm>
printf:   printf("LSRV %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str());

instance-name: LSRV_64
instruction: LSRV
section: C6.6.118
page: C6-590
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: LSRV <Xd>, <Xn>, <Xm>
printf:   printf("LSRV %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: MADD_32
instruction: MADD
section: C6.6.119
page: C6-591
destination operands: <Wd>,<Xd>
source operands: <Wa>,<Wm>,<Wn>,<Xa>,<Xm>,<Xn>
assembly: MADD <Wd>, <Wn>, <Wm>, <Wa>
printf:   printf("MADD %s, %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),XnXZR(packet->Ra.Value(),true).c_str());

instance-name: MADD_64
instruction: MADD
section: C6.6.119
page: C6-591
destination operands: <Wd>,<Xd>
source operands: <Wa>,<Wm>,<Wn>,<Xa>,<Xm>,<Xn>
assembly: MADD <Xd>, <Xn>, <Xm>, <Xa>
printf:   printf("MADD %s, %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),XnXZR(packet->Ra.Value(),false).c_str());


'MNEG' (ALIAS IGNORED)


'MOV (to' (ALIAS IGNORED)


'MOV (inverted wide immediate)' (ALIAS IGNORED)


'MOV (wide immediate)' (ALIAS IGNORED)


'MOV (bitmask immediate)' (ALIAS IGNORED)


'MOV (register)' (ALIAS IGNORED)

instance-name: MOVK_32
instruction: MOVK
section: C6.6.126
page: C6-599
destination operands: <Wd>,<Xd>
source operands: <imm>
assembly: MOVK <Wd>, #<imm>{, LSL #<shift>}
printf:   printf("MOVK %s, #%d, LSL #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->imm16.Value(),packet->hw.Value()<<4);

instance-name: MOVK_64
instruction: MOVK
section: C6.6.126
page: C6-599
destination operands: <Wd>,<Xd>
source operands: <imm>
assembly: MOVK <Xd>, #<imm>{, LSL #<shift>}
printf:   printf("MOVK %s, #%d, LSL #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->imm16.Value(),packet->hw.Value()<<4);

instance-name: MOVN_32
instruction: MOVN
section: C6.6.127
page: C6-600
destination operands: <Wd>,<Xd>
source operands: <imm>
assembly: MOVN <Wd>, #<imm>{, LSL #<shift>}
printf:   printf("MOVN %s, #%d, LSL #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->imm16.Value(),packet->hw.Value()<<4);

instance-name: MOVN_64
instruction: MOVN
section: C6.6.127
page: C6-600
destination operands: <Wd>,<Xd>
source operands: <imm>
assembly: MOVN <Xd>, #<imm>{, LSL #<shift>}
printf:   printf("MOVN %s, #%d, LSL #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->imm16.Value(),packet->hw.Value()<<4);

instance-name: MOVZ_32
instruction: MOVZ
section: C6.6.128
page: C6-602
destination operands: <Wd>,<Xd>
source operands: <imm>
assembly: MOVZ <Wd>, #<imm>{, LSL #<shift>}
printf:   printf("MOVZ %s, #%d, LSL #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->imm16.Value(),packet->hw.Value()<<4);

instance-name: MOVZ_64
instruction: MOVZ
section: C6.6.128
page: C6-602
destination operands: <Wd>,<Xd>
source operands: <imm>
assembly: MOVZ <Xd>, #<imm>{, LSL #<shift>}
printf:   printf("MOVZ %s, #%d, LSL #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->imm16.Value(),packet->hw.Value()<<4);

instance-name: MRS
instruction: MRS
section: C6.6.129
page: C6-604
destination operands: <Xt>
source operands: 
assembly: MRS <Xt>, <systemreg>
printf:   printf("MRS %s, %s\n",XnXZR(packet->Rt.Value(),false).c_str(),systemRegisterName(packet->op0.Value(),packet->op1.Value(),packet->CRn.Value(),packet->CRm.Value(),packet->op2.Value(),true).c_str());

instance-name: MSR_IMM
instruction: MSR (immediate)
section: C6.6.130
page: C6-605
destination operands: 
source operands: <imm>
assembly: MSR <pstatefield>, #<imm>
printf:   printf("MSR %s, #%u\n",pstateFieldName(packet->op1.Value(),packet->op2.Value()).c_str(),packet->CRm.Value());

instance-name: MSR_REG
instruction: MSR (register)
section: C6.6.131
page: C6-607
destination operands: 
source operands: <Xt>
assembly: MSR <systemreg>, <Xt>
printf:   printf("MSR %s, %s\n",systemRegisterName(packet->op0.Value(),packet->op1.Value(),packet->CRn.Value(),packet->CRm.Value(),packet->op2.Value(),false).c_str(),XnXZR(packet->Rt.Value(),false).c_str());

instance-name: MSUB_32
instruction: MSUB
section: C6.6.132
page: C6-608
destination operands: <Wd>,<Xd>
source operands: <Wa>,<Wm>,<Wn>,<Xa>,<Xm>,<Xn>
assembly: MSUB <Wd>, <Wn>, <Wm>, <Wa>
printf:   printf("MSUB %s, %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),XnXZR(packet->Ra.Value(),true).c_str());

instance-name: MSUB_64
instruction: MSUB
section: C6.6.132
page: C6-608
destination operands: <Wd>,<Xd>
source operands: <Wa>,<Wm>,<Wn>,<Xa>,<Xm>,<Xn>
assembly: MSUB <Xd>, <Xn>, <Xm>, <Xa>
printf:   printf("MSUB %s, %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),XnXZR(packet->Ra.Value(),false).c_str());


'MUL' (ALIAS IGNORED)


'MVN' (ALIAS IGNORED)


'NEG' (ALIAS IGNORED)


'NEGS' (ALIAS IGNORED)


'NGC' (ALIAS IGNORED)


'NGCS' (ALIAS IGNORED)

instance-name: NOP
instruction: NOP (ALIAS)
alias of: HINT
section: C6.6.139
page: C6-616
destination operands: 
source operands: 
assembly: NOP
printf:   printf("NOP\n");

instance-name: ORN_SHIFT_REG_32
instruction: ORN (shifted register)
section: C6.6.140
page: C6-617
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: ORN <Wd>, <Wn>, <Wm>{, <shift> #<amount>}
printf:   printf("ORN %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),eon_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: ORN_SHIFT_REG_64
instruction: ORN (shifted register)
section: C6.6.140
page: C6-617
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: ORN <Xd>, <Xn>, <Xm>{, <shift> #<amount>}
printf:   printf("ORN %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),eon_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: ORR_IMM_32
instruction: ORR (immediate)
section: C6.6.141
page: C6-619
destination operands: <Wd|WSP>,<Xd|SP>
source operands: <Wn>,<Xn>,<imm>
assembly: ORR <Wd|WSP>, <Wn>, #<imm>
printf:   printf("ORR %s, %s, #%llu\n",XnSP(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),DecodeBitMasks(tmask,packet->N.Value(),packet->imms.Value(),packet->immr.Value(),true));

instance-name: ORR_IMM_64
instruction: ORR (immediate)
section: C6.6.141
page: C6-619
destination operands: <Wd|WSP>,<Xd|SP>
source operands: <Wn>,<Xn>,<imm>
assembly: ORR <Xd|SP>, <Xn>, #<imm>
printf:   printf("ORR %s, %s, #%llu\n",XnSP(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),DecodeBitMasks(tmask,packet->N.Value(),packet->imms.Value(),packet->immr.Value(),true));

instance-name: ORR_SHIFT_REG_32
instruction: ORR (shifted register)
section: C6.6.142
page: C6-621
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: ORR <Wd>, <Wn>, <Wm>{, <shift> #<amount>}
printf:   printf("ORR %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),eon_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: ORR_SHIFT_REG_64
instruction: ORR (shifted register)
section: C6.6.142
page: C6-621
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: ORR <Xd>, <Xn>, <Xm>{, <shift> #<amount>}
printf:   printf("ORR %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),eon_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: PRFM_IMM
instruction: PRFM (immediate)
section: C6.6.143
page: C6-623
destination operands: 
source operands: <Xn|SP>,<pimm>
assembly: PRFM <prfop>, [<Xn|SP>{, #<pimm>}]
printf:   printf("PRFM %s, [%s, #%u]\n",prfop_name(packet->Rt.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: PRFM
instruction: PRFM (literal)
section: C6.6.144
page: C6-626
destination operands: 
source operands: 
assembly: PRFM <prfop>, <label>
printf:   printf("PRFM %s, %lld\n",prfop_name(packet->Rt.Value()).c_str(),SignExtend(packet->imm19.Value()<<2,21));

instance-name: PRFM_REG
instruction: PRFM (register)
section: C6.6.145
page: C6-628
destination operands: 
source operands: <R>,<Xn|SP>
assembly: PRFM <prfop>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("PRFM %s, [%s, %c%s, %s %u]\n",prfop_name(packet->Rt.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: PRFUM
instruction: PRFUM
section: C6.6.146
page: C6-631
destination operands: 
source operands: <Xn|SP>,<simm>
assembly: PRFUM <prfop>, [<Xn|SP>{, #<simm>}]
printf:   printf("PRFUM %s, [%s, #%d]\n",prfop_name(packet->Rt.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: RBIT_32
instruction: RBIT
section: C6.6.147
page: C6-634
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>
assembly: RBIT <Wd>, <Wn>
printf:   printf("RBIT %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str());

instance-name: RBIT_64
instruction: RBIT
section: C6.6.147
page: C6-634
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>
assembly: RBIT <Xd>, <Xn>
printf:   printf("RBIT %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str());

instance-name: RET
instruction: RET
section: C6.6.148
page: C6-636
destination operands: 
source operands: <Xn>
assembly: RET {<Xn>}
printf:   printf("RET %s\n",XnXZR(packet->Rn.Value(),false).c_str());

instance-name: REV_32
instruction: REV
section: C6.6.149
page: C6-637
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>
assembly: REV <Wd>, <Wn>
printf:   printf("REV %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str());

instance-name: REV_64
instruction: REV
section: C6.6.149
page: C6-637
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>
assembly: REV <Xd>, <Xn>
printf:   printf("REV %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str());

instance-name: REV16_32
instruction: REV16
section: C6.6.150
page: C6-639
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>
assembly: REV16 <Wd>, <Wn>
printf:   printf("REV16 %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str());

instance-name: REV16_64
instruction: REV16
section: C6.6.150
page: C6-639
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>
assembly: REV16 <Xd>, <Xn>
printf:   printf("REV16 %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str());

instance-name: REV32_64
instruction: REV32
section: C6.6.151
page: C6-641
destination operands: <Xd>
source operands: <Xn>
assembly: REV32 <Xd>, <Xn>
printf:   printf("REV32 %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str());


'ROR (immediate)' (ALIAS IGNORED)


'ROR (register)' (ALIAS IGNORED)

instance-name: RORV_32
instruction: RORV
section: C6.6.154
page: C6-644
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: RORV <Wd>, <Wn>, <Wm>
printf:   printf("RORV %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str());

instance-name: RORV_64
instruction: RORV
section: C6.6.154
page: C6-644
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: RORV <Xd>, <Xn>, <Xm>
printf:   printf("RORV %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: SBC_32
instruction: SBC
section: C6.6.155
page: C6-645
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: SBC <Wd>, <Wn>, <Wm>
printf:   printf("SBC %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str());

instance-name: SBC_64
instruction: SBC
section: C6.6.155
page: C6-645
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: SBC <Xd>, <Xn>, <Xm>
printf:   printf("SBC %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: SBCS_32
instruction: SBCS
section: C6.6.156
page: C6-647
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: SBCS <Wd>, <Wn>, <Wm>
printf:   printf("SBCS %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str());

instance-name: SBCS_64
instruction: SBCS
section: C6.6.156
page: C6-647
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: SBCS <Xd>, <Xn>, <Xm>
printf:   printf("SBCS %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());


'SBFIZ' (ALIAS IGNORED)

instance-name: SBFM_32
instruction: SBFM
section: C6.6.158
page: C6-650
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>
assembly: SBFM <Wd>, <Wn>, #<immr>, #<imms>
printf:   printf("SBFM %s, %s, #%u, #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),packet->immr.Value(),packet->imms.Value());

instance-name: SBFM_64
instruction: SBFM
section: C6.6.158
page: C6-650
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>
assembly: SBFM <Xd>, <Xn>, #<immr>, #<imms>
printf:   printf("SBFM %s, %s, #%u, #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),packet->immr.Value(),packet->imms.Value());


'SBFX' (ALIAS IGNORED)

instance-name: SDIV_32
instruction: SDIV
section: C6.6.160
page: C6-653
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: SDIV <Wd>, <Wn>, <Wm>
printf:   printf("SDIV %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str());

instance-name: SDIV_64
instruction: SDIV
section: C6.6.160
page: C6-653
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: SDIV <Xd>, <Xn>, <Xm>
printf:   printf("SDIV %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: SEV
instruction: SEV (ALIAS)
alias of: HINT
section: C6.6.161
page: C6-654
destination operands: 
source operands: 
assembly: SEV
printf:   printf("SEV\n");

instance-name: SEVL
instruction: SEVL (ALIAS)
alias of: HINT
section: C6.6.162
page: C6-655
destination operands: 
source operands: 
assembly: SEVL
printf:   printf("SEVL\n");

instance-name: SMADDL_64
instruction: SMADDL
section: C6.6.163
page: C6-656
destination operands: <Xd>
source operands: <Wm>,<Wn>,<Xa>
assembly: SMADDL <Xd>, <Wn>, <Wm>, <Xa>
printf:   printf("SMADDL %s, %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),XnXZR(packet->Ra.Value(),false).c_str());

instance-name: SMC
instruction: SMC
section: C6.6.164
page: C6-657
destination operands: 
source operands: <imm>
assembly: SMC #<imm>
printf:   printf("SMC #%d\n",packet->imm16.Value());


'SMNEGL' (ALIAS IGNORED)

instance-name: SMSUBL_64
instruction: SMSUBL
section: C6.6.166
page: C6-659
destination operands: <Xd>
source operands: <Wm>,<Wn>,<Xa>
assembly: SMSUBL <Xd>, <Wn>, <Wm>, <Xa>
printf:   printf("SMSUBL %s, %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),XnXZR(packet->Ra.Value(),false).c_str());

instance-name: SMULH_64
instruction: SMULH
section: C6.6.167
page: C6-660
destination operands: <Xd>
source operands: <Xm>,<Xn>
assembly: SMULH <Xd>, <Xn>, <Xm>
printf:   printf("SMULH %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());


'SMULL' (ALIAS IGNORED)

instance-name: STLR_32
instruction: STLR
section: C6.6.169
page: C6-662
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>
assembly: STLR <Wt>, [<Xn|SP>{,#0}]
printf:   printf("STLR %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: STLR_64
instruction: STLR
section: C6.6.169
page: C6-662
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>
assembly: STLR <Xt>, [<Xn|SP>{,#0}]
printf:   printf("STLR %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: STLRB
instruction: STLRB
section: C6.6.170
page: C6-665
destination operands: 
source operands: <Wt>,<Xn|SP>
assembly: STLRB <Wt>, [<Xn|SP>{,#0}]
printf:   printf("STLRB %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: STLRH
instruction: STLRH
section: C6.6.171
page: C6-668
destination operands: 
source operands: <Wt>,<Xn|SP>
assembly: STLRH <Wt>, [<Xn|SP>{,#0}]
printf:   printf("STLRH %s, [%s,#0]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: STLXP_32
instruction: STLXP
section: C6.6.172
page: C6-671
destination operands: 
source operands: <Ws>,<Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>
assembly: STLXP <Ws>, <Wt1>, <Wt2>, [<Xn|SP>{,#0}]
printf:   printf("STLXP %s, %s, %s, [%s,#0]\n",XnXZR(packet->Rs.Value(),true).c_str(),XnXZR(packet->Rt.Value(),true).c_str(),XnXZR(packet->Rt2.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: STLXP_64
instruction: STLXP
section: C6.6.172
page: C6-671
destination operands: 
source operands: <Ws>,<Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>
assembly: STLXP <Ws>, <Xt1>, <Xt2>, [<Xn|SP>{,#0}]
printf:   printf("STLXP %s, %s, %s, [%s,#0]\n",XnXZR(packet->Rs.Value(),true).c_str(),XnXZR(packet->Rt.Value(),false).c_str(),XnXZR(packet->Rt2.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: STLXR_32
instruction: STLXR
section: C6.6.173
page: C6-674
destination operands: 
source operands: <Ws>,<Wt>,<Xn|SP>,<Xt>
assembly: STLXR <Ws>, <Wt>, [<Xn|SP>{,#0}]
printf:   printf("STLXR %s, %s, [%s,#0]\n",XnXZR(packet->Rs.Value(),true).c_str(),XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: STLXR_64
instruction: STLXR
section: C6.6.173
page: C6-674
destination operands: 
source operands: <Ws>,<Wt>,<Xn|SP>,<Xt>
assembly: STLXR <Ws>, <Xt>, [<Xn|SP>{,#0}]
printf:   printf("STLXR %s, %s, [%s,#0]\n",XnXZR(packet->Rs.Value(),true).c_str(),XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: STLXRB
instruction: STLXRB
section: C6.6.174
page: C6-677
destination operands: 
source operands: <Ws>,<Wt>,<Xn|SP>
assembly: STLXRB <Ws>, <Wt>, [<Xn|SP>{,#0}]
printf:   printf("STLXRB %s, %s, [%s,#0]\n",XnXZR(packet->Rs.Value(),true).c_str(),XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: STLXRH
instruction: STLXRH
section: C6.6.175
page: C6-680
destination operands: 
source operands: <Ws>,<Wt>,<Xn|SP>
assembly: STLXRH <Ws>, <Wt>, [<Xn|SP>{,#0}]
printf:   printf("STLXRH %s, %s, [%s,#0]\n",XnXZR(packet->Rs.Value(),true).c_str(),XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: STNP_32
qualifier: opc = 00
notes: 32-bit variant 
instruction: STNP
section: C6.6.176
page: C6-683
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: STNP <Wt1>, <Wt2>, [<Xn|SP>{, #<imm>}]
printf:   printf("STNP %s, %s, [%s, #%lld]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnXZR(packet->Rt2.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: STNP_64
qualifier: opc = 10
notes: 64-bit variant 
instruction: STNP
section: C6.6.176
page: C6-683
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: STNP <Xt1>, <Xt2>, [<Xn|SP>{, #<imm>}]
printf:   printf("STNP %s, %s, [%s, #%lld]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnXZR(packet->Rt2.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 8);

instance-name: STP_REG_POST_32
instance-num: 1
qualifier: opc = 00
notes: 32-bit variant 
instruction: STP (Post-index)
section: C6.6.177
page: C6-685
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: STP <Wt1>, <Wt2>, [<Xn|SP>], #<imm>
printf:   printf("STP %s, %s, [%s], #%lld\n",XnXZR(packet->Rt.Value(),true).c_str(),XnXZR(packet->Rt2.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: STP_REG_POST_64
instance-num: 1
qualifier: opc = 10
notes: 64-bit variant 
instruction: STP (Post-index)
section: C6.6.177
page: C6-685
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: STP <Xt1>, <Xt2>, [<Xn|SP>], #<imm>
printf:   printf("STP %s, %s, [%s], #%lld\n",XnXZR(packet->Rt.Value(),false).c_str(),XnXZR(packet->Rt2.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 8);

instance-name: STP_REG_PRE_32
instance-num: 2
qualifier: opc = 00
notes: 32-bit variant 
instruction: STP (Pre-index)
section: C6.6.177
page: C6-685
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: STP <Wt1>, <Wt2>, [<Xn|SP>, #<imm>]!
printf:   printf("STP %s, %s, [%s, #%lld]!\n",XnXZR(packet->Rt.Value(),true).c_str(),XnXZR(packet->Rt2.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: STP_REG_PRE_64
instance-num: 2
qualifier: opc = 10
notes: 64-bit variant 
instruction: STP (Pre-index)
section: C6.6.177
page: C6-685
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: STP <Xt1>, <Xt2>, [<Xn|SP>, #<imm>]!
printf:   printf("STP %s, %s, [%s, #%lld]!\n",XnXZR(packet->Rt.Value(),false).c_str(),XnXZR(packet->Rt2.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 8);

instance-name: STP_REG_OFF_32
instance-num: 3
qualifier: opc = 00
notes: 32-bit variant 
instruction: STP (Signed offset)
section: C6.6.177
page: C6-685
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: STP <Wt1>, <Wt2>, [<Xn|SP>{, #<imm>}]
printf:   printf("STP %s, %s, [%s, #%lld]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnXZR(packet->Rt2.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: STP_REG_OFF_64
instance-num: 3
qualifier: opc = 10
notes: 64-bit variant 
instruction: STP (Signed offset)
section: C6.6.177
page: C6-685
destination operands: 
source operands: <Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>,<imm>
assembly: STP <Xt1>, <Xt2>, [<Xn|SP>{, #<imm>}]
printf:   printf("STP %s, %s, [%s, #%lld]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnXZR(packet->Rt2.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 8);

instance-name: STR_IMM_REG_POST_32
instance-num: 1
instruction: STR (immediate) (Post-index)
section: C6.6.178
page: C6-688
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: STR <Wt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("STR %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: STR_IMM_REG_POST_64
instance-num: 1
instruction: STR (immediate) (Post-index)
section: C6.6.178
page: C6-688
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: STR <Xt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("STR %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: STR_IMM_REG_PRE_32
instance-num: 2
instruction: STR (immediate) (Pre-index)
section: C6.6.178
page: C6-688
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: STR <Wt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("STR %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: STR_IMM_REG_PRE_64
instance-num: 2
instruction: STR (immediate) (Pre-index)
section: C6.6.178
page: C6-688
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: STR <Xt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("STR %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: STR_IMM_OFF_32
instance-num: 3
instruction: STR (immediate) (Unsigned offset)
section: C6.6.178
page: C6-688
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: STR <Wt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("STR %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: STR_IMM_OFF_64
instance-num: 3
instruction: STR (immediate) (Unsigned offset)
section: C6.6.178
page: C6-688
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<pimm>,<simm>
assembly: STR <Xt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("STR %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: STR_REG_32
instruction: STR (register)
section: C6.6.179
page: C6-691
destination operands: 
source operands: <R>,<Wt>,<Xn|SP>,<Xt>,<m>
assembly: STR <Wt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("STR %s, [%s, %c%s, %s %u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: STR_REG_64
instruction: STR (register)
section: C6.6.179
page: C6-691
destination operands: 
source operands: <R>,<Wt>,<Xn|SP>,<Xt>,<m>
assembly: STR <Xt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("STR %s, [%s, %c%s, %s %u]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: STRB_IMM_REG_POST
instance-num: 1
instruction: STRB (immediate) (Post-index)
section: C6.6.180
page: C6-694
destination operands: 
source operands: <Wt>,<Xn|SP>,<pimm>,<simm>
assembly: STRB <Wt>, [<Xn|SP>], #<simm>
printf:   printf("STRB %s, [%s], #%d\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: STRB_IMM_REG_PRE
instance-num: 2
instruction: STRB (immediate) (Pre-index)
section: C6.6.180
page: C6-694
destination operands: 
source operands: <Wt>,<Xn|SP>,<pimm>,<simm>
assembly: STRB <Wt>, [<Xn|SP>, #<simm>]!
printf:   printf("STRB %s, [%s, #%d]!\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: STRB_IMM_OFF
instance-num: 3
instruction: STRB (immediate) (Unsigned offset)
section: C6.6.180
page: C6-694
destination operands: 
source operands: <Wt>,<Xn|SP>,<pimm>,<simm>
assembly: STRB <Wt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("STRB %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: STRB_REG_32
instruction: STRB (register)
section: C6.6.181
page: C6-697
destination operands: 
source operands: <R>,<Wt>,<Xn|SP>,<m>
assembly: STRB <Wt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("STRB %s, [%s, %c%s, %s %u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: STRH_IMM_REG_POST
instance-num: 1
instruction: STRH (immediate) (Post-index)
section: C6.6.182
page: C6-700
destination operands: 
source operands: <Wt>,<Xn|SP>,<pimm>,<simm>
assembly: STRH <Wt>, [<Xn|SP>], #<simm>
printf:   printf("STRH %s, [%s], #%d\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: STRH_IMM_REG_PRE
instance-num: 2
instruction: STRH (immediate) (Pre-index)
section: C6.6.182
page: C6-700
destination operands: 
source operands: <Wt>,<Xn|SP>,<pimm>,<simm>
assembly: STRH <Wt>, [<Xn|SP>, #<simm>]!
printf:   printf("STRH %s, [%s, #%d]!\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: STRH_IMM_OFF
instance-num: 3
instruction: STRH (immediate) (Unsigned offset)
section: C6.6.182
page: C6-700
destination operands: 
source operands: <Wt>,<Xn|SP>,<pimm>,<simm>
assembly: STRH <Wt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("STRH %s, [%s, #%u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: STRH_REG_32
instruction: STRH (register)
section: C6.6.183
page: C6-703
destination operands: 
source operands: <R>,<Wt>,<Xn|SP>,<m>
assembly: STRH <Wt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("STRH %s, [%s, %c%s, %s %u]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: STTR_32
instruction: STTR
section: C6.6.184
page: C6-706
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<simm>
assembly: STTR <Wt>, [<Xn|SP>{, #<simm>}]
printf:   printf("STTR %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: STTR_64
instruction: STTR
section: C6.6.184
page: C6-706
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<simm>
assembly: STTR <Xt>, [<Xn|SP>{, #<simm>}]
printf:   printf("STTR %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: STTRB
instruction: STTRB
section: C6.6.185
page: C6-708
destination operands: 
source operands: <Wt>,<Xn|SP>,<simm>
assembly: STTRB <Wt>, [<Xn|SP>{, #<simm>}]
printf:   printf("STTRB %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: STTRH
instruction: STTRH
section: C6.6.186
page: C6-710
destination operands: 
source operands: <Wt>,<Xn|SP>,<simm>
assembly: STTRH <Wt>, [<Xn|SP>{, #<simm>}]
printf:   printf("STTRH %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: STUR_32
instruction: STUR
section: C6.6.187
page: C6-712
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<simm>
assembly: STUR <Wt>, [<Xn|SP>{, #<simm>}]
printf:   printf("STUR %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: STUR_64
instruction: STUR
section: C6.6.187
page: C6-712
destination operands: 
source operands: <Wt>,<Xn|SP>,<Xt>,<simm>
assembly: STUR <Xt>, [<Xn|SP>{, #<simm>}]
printf:   printf("STUR %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: STURB
instruction: STURB
section: C6.6.188
page: C6-714
destination operands: 
source operands: <Wt>,<Xn|SP>,<simm>
assembly: STURB <Wt>, [<Xn|SP>{, #<simm>}]
printf:   printf("STURB %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: STURH
instruction: STURH
section: C6.6.189
page: C6-716
destination operands: 
source operands: <Wt>,<Xn|SP>,<simm>
assembly: STURH <Wt>, [<Xn|SP>{, #<simm>}]
printf:   printf("STURH %s, [%s, #%d]\n",XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: STXP_32
instruction: STXP
section: C6.6.190
page: C6-718
destination operands: 
source operands: <Ws>,<Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>
assembly: STXP <Ws>, <Wt1>, <Wt2>, [<Xn|SP>{,#0}]
printf:   printf("STXP %s, %s, %s, [%s,#0]\n",XnXZR(packet->Rs.Value(),true).c_str(),XnXZR(packet->Rt.Value(),true).c_str(),XnXZR(packet->Rt2.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: STXP_64
instruction: STXP
section: C6.6.190
page: C6-718
destination operands: 
source operands: <Ws>,<Wt1>,<Wt2>,<Xn|SP>,<Xt1>,<Xt2>
assembly: STXP <Ws>, <Xt1>, <Xt2>, [<Xn|SP>{,#0}]
printf:   printf("STXP %s, %s, %s, [%s,#0]\n",XnXZR(packet->Rs.Value(),true).c_str(),XnXZR(packet->Rt.Value(),false).c_str(),XnXZR(packet->Rt2.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: STXR_32
instruction: STXR
section: C6.6.191
page: C6-721
destination operands: 
source operands: <Ws>,<Wt>,<Xn|SP>,<Xt>
assembly: STXR <Ws>, <Wt>, [<Xn|SP>{,#0}]
printf:   printf("STXR %s, %s, [%s,#0]\n",XnXZR(packet->Rs.Value(),true).c_str(),XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: STXR_64
instruction: STXR
section: C6.6.191
page: C6-721
destination operands: 
source operands: <Ws>,<Wt>,<Xn|SP>,<Xt>
assembly: STXR <Ws>, <Xt>, [<Xn|SP>{,#0}]
printf:   printf("STXR %s, %s, [%s,#0]\n",XnXZR(packet->Rs.Value(),true).c_str(),XnXZR(packet->Rt.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: STXRB
instruction: STXRB
section: C6.6.192
page: C6-724
destination operands: 
source operands: <Ws>,<Wt>,<Xn|SP>
assembly: STXRB <Ws>, <Wt>, [<Xn|SP>{,#0}]
printf:   printf("STXRB %s, %s, [%s,#0]\n",XnXZR(packet->Rs.Value(),true).c_str(),XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: STXRH
instruction: STXRH
section: C6.6.193
page: C6-727
destination operands: 
source operands: <Ws>,<Wt>,<Xn|SP>
assembly: STXRH <Ws>, <Wt>, [<Xn|SP>{,#0}]
printf:   printf("STXRH %s, %s, [%s,#0]\n",XnXZR(packet->Rs.Value(),true).c_str(),XnXZR(packet->Rt.Value(),true).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: SUB_REG_32
instruction: SUB (extended register)
section: C6.6.194
page: C6-730
destination operands: <Wd|WSP>,<Xd|SP>
source operands: <R>,<Wm>,<Wn|WSP>,<Xn|SP>,<m>
assembly: SUB <Wd|WSP>, <Wn|WSP>, <Wm>{, <extend> {#<amount>}}
printf:   printf("SUB %s, %s, %s, %s #%u\n",XnSP(packet->Rd.Value(),true).c_str(),XnSP(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: SUB_REG_64
instruction: SUB (extended register)
section: C6.6.194
page: C6-730
destination operands: <Wd|WSP>,<Xd|SP>
source operands: <R>,<Wm>,<Wn|WSP>,<Xn|SP>,<m>
assembly: SUB <Xd|SP>, <Xn|SP>, <R><m>{, <extend> {#<amount>}}
printf:   printf("SUB %s, %s, %c%s, %s #%u\n",XnSP(packet->Rd.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: SUB_IMM_32
instruction: SUB (immediate)
section: C6.6.195
page: C6-732
destination operands: <Wd|WSP>,<Xd|SP>
source operands: <Wn|WSP>,<Xn|SP>,<imm>
assembly: SUB <Wd|WSP>, <Wn|WSP>, #<imm>{, <shift>}
printf:   printf("SUB %s, %s, #%u, %s\n",XnSP(packet->Rd.Value(),true).c_str(),XnSP(packet->Rn.Value(),true).c_str(),packet->imm12.Value(),as_imm_shift(packet->shift.Value()).c_str());

instance-name: SUB_IMM_64
instruction: SUB (immediate)
section: C6.6.195
page: C6-732
destination operands: <Wd|WSP>,<Xd|SP>
source operands: <Wn|WSP>,<Xn|SP>,<imm>
assembly: SUB <Xd|SP>, <Xn|SP>, #<imm>{, <shift>}
printf:   printf("SUB %s, %s, #%u, %s\n",XnSP(packet->Rd.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),packet->imm12.Value(),as_imm_shift(packet->shift.Value()).c_str());

instance-name: SUB_SHIFT_REG_32
instruction: SUB (shifted register)
section: C6.6.196
page: C6-734
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: SUB <Wd>, <Wn>, <Wm>{, <shift> #<amount>}
printf:   printf("SUB %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),as_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: SUB_SHIFT_REG_64
instruction: SUB (shifted register)
section: C6.6.196
page: C6-734
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: SUB <Xd>, <Xn>, <Xm>{, <shift> #<amount>}
printf:   printf("SUB %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),as_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: SUBS_REG_32
instruction: SUBS (extended register)
section: C6.6.197
page: C6-736
destination operands: <Wd>,<Xd>
source operands: <R>,<Wm>,<Wn|WSP>,<Xn|SP>,<m>
assembly: SUBS <Wd>, <Wn|WSP>, <Wm>{, <extend> {#<amount>}}
printf:   printf("SUBS %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnSP(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: SUBS_REG_64
instruction: SUBS (extended register)
section: C6.6.197
page: C6-736
destination operands: <Wd>,<Xd>
source operands: <R>,<Wm>,<Wn|WSP>,<Xn|SP>,<m>
assembly: SUBS <Xd>, <Xn|SP>, <R><m>{, <extend> {#<amount>}}
printf:   printf("SUBS %s, %s, %c%s, %s #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: SUBS_IMM_32
instruction: SUBS (immediate)
section: C6.6.198
page: C6-738
destination operands: <Wd>,<Xd>
source operands: <Wn|WSP>,<Xn|SP>,<imm>
assembly: SUBS <Wd>, <Wn|WSP>, #<imm>{, <shift>}
printf:   printf("SUBS %s, %s, #%u, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnSP(packet->Rn.Value(),true).c_str(),packet->imm12.Value(),as_imm_shift(packet->shift.Value()).c_str());

instance-name: SUBS_IMM_64
instruction: SUBS (immediate)
section: C6.6.198
page: C6-738
destination operands: <Wd>,<Xd>
source operands: <Wn|WSP>,<Xn|SP>,<imm>
assembly: SUBS <Xd>, <Xn|SP>, #<imm>{, <shift>}
printf:   printf("SUBS %s, %s, #%u, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnSP(packet->Rn.Value(),false).c_str(),packet->imm12.Value(),as_imm_shift(packet->shift.Value()).c_str());

instance-name: SUBS_SHIFT_REG_32
instruction: SUBS (shifted register)
section: C6.6.199
page: C6-740
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: SUBS <Wd>, <Wn>, <Wm>{, <shift> #<amount>}
printf:   printf("SUBS %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),as_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: SUBS_SHIFT_REG_64
instruction: SUBS (shifted register)
section: C6.6.199
page: C6-740
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: SUBS <Xd>, <Xn>, <Xm>{, <shift> #<amount>}
printf:   printf("SUBS %s, %s, %s, %s #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str(),as_reg_shift(packet->shift.Value()).c_str(),packet->imm6.Value());

instance-name: SVC
instruction: SVC
section: C6.6.200
page: C6-742
destination operands: 
source operands: <imm>
assembly: SVC #<imm>
printf:   printf("SVC #%d\n",packet->imm16.Value());


'SXTB' (ALIAS IGNORED)


'SXTH' (ALIAS IGNORED)


'SXTW' (ALIAS IGNORED)

instance-name: SYS
instruction: SYS
section: C6.6.204
page: C6-746
destination operands: 
source operands: <Cm>,<Cn>,<Xt>,<op1>,<op2>
assembly: SYS #<op1>, <Cn>, <Cm>, #<op2>{, <Xt>}
printf:   printf("SYS #%d, C%u, C%u, #%d, %s\n",packet->op1.Value(),packet->CRm.Value(),packet->CRm.Value(),packet->op2.Value(),XnXZR(packet->Rt.Value(),false).c_str());

instance-name: SYSL
instruction: SYSL
section: C6.6.205
page: C6-747
destination operands: <Xt>
source operands: <Cm>,<Cn>,<op1>,<op2>
assembly: SYSL <Xt>, #<op1>, <Cn>, <Cm>, #<op2>
printf:   printf("SYSL %s, #%d, C%u, C%u, #%d\n",XnXZR(packet->Rt.Value(),false).c_str(),packet->op1.Value(),packet->CRm.Value(),packet->CRm.Value(),packet->op2.Value());

instance-name: TBNZ
instruction: TBNZ
section: C6.6.206
page: C6-748
destination operands: 
source operands: <R>,<imm>,<label>
assembly: TBNZ <R><t>, #<imm>, <label>
printf:   printf("TBNZ %c%s, #%u, %lld\n",((packet->option.Value() & 3)==3) ? 'X' : 'W',t_or_sp(packet->Rt.Value()).c_str(),packet->b5.Value()<<4 | packet->b40.Value(),SignExtend(packet->imm14.Value()<<2,16));

instance-name: TBZ
instruction: TBZ
section: C6.6.207
page: C6-749
destination operands: 
source operands: <R>,<imm>,<label>
assembly: TBZ <R><t>, #<imm>, <label>
printf:   printf("TBZ %c%s, #%u, %lld\n",((packet->option.Value() & 3)==3) ? 'X' : 'W',t_or_sp(packet->Rt.Value()).c_str(),packet->b5.Value()<<4 | packet->b40.Value(),SignExtend(packet->imm14.Value()<<2,16));


'TLBI' (ALIAS IGNORED)


'TST (immediate)' (ALIAS IGNORED)


'TST (shifted register)' (ALIAS IGNORED)


'UBFIZ' (ALIAS IGNORED)

instance-name: UBFM_32
instruction: UBFM
section: C6.6.212
page: C6-754
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>
assembly: UBFM <Wd>, <Wn>, #<immr>, #<imms>
printf:   printf("UBFM %s, %s, #%u, #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),packet->immr.Value(),packet->imms.Value());

instance-name: UBFM_64
instruction: UBFM
section: C6.6.212
page: C6-754
destination operands: <Wd>,<Xd>
source operands: <Wn>,<Xn>
assembly: UBFM <Xd>, <Xn>, #<immr>, #<imms>
printf:   printf("UBFM %s, %s, #%u, #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),packet->immr.Value(),packet->imms.Value());


'UBFX' (ALIAS IGNORED)

instance-name: UDIV_32
instruction: UDIV
section: C6.6.214
page: C6-757
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: UDIV <Wd>, <Wn>, <Wm>
printf:   printf("UDIV %s, %s, %s\n",XnXZR(packet->Rd.Value(),true).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str());

instance-name: UDIV_64
instruction: UDIV
section: C6.6.214
page: C6-757
destination operands: <Wd>,<Xd>
source operands: <Wm>,<Wn>,<Xm>,<Xn>
assembly: UDIV <Xd>, <Xn>, <Xm>
printf:   printf("UDIV %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: UMADDL_64
instruction: UMADDL
section: C6.6.215
page: C6-758
destination operands: <Xd>
source operands: <Wm>,<Wn>,<Xa>
assembly: UMADDL <Xd>, <Wn>, <Wm>, <Xa>
printf:   printf("UMADDL %s, %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),XnXZR(packet->Ra.Value(),false).c_str());


'UMNEGL' (ALIAS IGNORED)

instance-name: UMSUBL_64
instruction: UMSUBL
section: C6.6.217
page: C6-760
destination operands: <Xd>
source operands: <Wm>,<Wn>,<Xa>
assembly: UMSUBL <Xd>, <Wn>, <Wm>, <Xa>
printf:   printf("UMSUBL %s, %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),true).c_str(),XnXZR(packet->Rm.Value(),true).c_str(),XnXZR(packet->Ra.Value(),false).c_str());

instance-name: UMULH_64
instruction: UMULH
section: C6.6.218
page: C6-761
destination operands: <Xd>
source operands: <Xm>,<Xn>
assembly: UMULH <Xd>, <Xn>, <Xm>
printf:   printf("UMULH %s, %s, %s\n",XnXZR(packet->Rd.Value(),false).c_str(),XnXZR(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());


'UMULL' (ALIAS IGNORED)


'UXTB' (ALIAS IGNORED)


'UXTH' (ALIAS IGNORED)

instance-name: WFE
instruction: WFE (ALIAS)
alias of: HINT
section: C6.6.222
page: C6-765
destination operands: 
source operands: 
assembly: WFE
printf:   printf("WFE\n");

instance-name: WFI
instruction: WFI (ALIAS)
alias of: HINT
section: C6.6.223
page: C6-766
destination operands: 
source operands: 
assembly: WFI
printf:   printf("WFI\n");

instance-name: YIELD
instruction: YIELD (ALIAS)
alias of: HINT
section: C6.6.224
page: C6-767
destination operands: 
source operands: 
assembly: YIELD
printf:   printf("YIELD\n");

instance-name: SIMD_ABS_SCALAR
instruction: ABS
section: C7.3.1
page: C7-772
destination operands: 
source operands: <V>
assembly: ABS <V><d>, <V><n>
printf:   printf("ABS %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: SIMD_ABS_SCALAR_VEC
instruction: ABS
section: C7.3.1
page: C7-772
destination operands: 
source operands: <V>
assembly: ABS <Vd>.<T>, <Vn>.<T>
printf:   printf("ABS V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_ADD_SCALAR_VEC
instruction: ADD (vector)
section: C7.3.2
page: C7-774
destination operands: <Vd>
source operands: <T>,<V>,<m>
assembly: ADD <V><d>, <V><n>, <V><m>
printf:   printf("ADD %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_ADD_SCALAR_VEC
instruction: ADD (vector)
section: C7.3.2
page: C7-774
destination operands: <Vd>
source operands: <T>,<V>,<m>
assembly: ADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("ADD V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_ADDHN_VEC
instance-num: 1
instruction: ADDHN
section: C7.3.3
page: C7-776
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: ADDHN <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta> (Q==0)
printf:   printf("ADDHN V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rm.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_ADDHN_VEC
instance-num: 2
instruction: ADDHN2
section: C7.3.3
page: C7-776
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: ADDHN2 <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta> (Q==1)
printf:   printf("ADDHN2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rm.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_ADDP_SCALAR
instruction: ADDP (scalar)
section: C7.3.4
page: C7-778
destination operands: <V>
source operands: <T>,<Vn>
assembly: ADDP <V><d>, <Vn>.<T>
printf:   printf("ADDP %s%u, V%d.%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_ADDP_VEC
instruction: ADDP (vector)
section: C7.3.5
page: C7-779
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: ADDP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("ADDP V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_ADDV_SCALAR
instruction: ADDV
section: C7.3.6
page: C7-780
destination operands: <V>
source operands: <T>,<Vn>
assembly: ADDV <V><d>, <Vn>.<T>
printf:   printf("ADDV %s%u, V%d.%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_AESD_SCALAR
instruction: AESD
section: C7.3.7
page: C7-781
destination operands: <Vd>
source operands: <Vn>
assembly: AESD <Vd>.16B, <Vn>.16B
printf:   printf("AESD V%d.16B, V%d.16B\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: SIMD_AESE_SCALAR
instruction: AESE
section: C7.3.8
page: C7-782
destination operands: <Vd>
source operands: <Vn>
assembly: AESE <Vd>.16B, <Vn>.16B
printf:   printf("AESE V%d.16B, V%d.16B\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: SIMD_AESIMC_SCALAR
instruction: AESIMC
section: C7.3.9
page: C7-783
destination operands: <Vd>
source operands: <Vn>
assembly: AESIMC <Vd>.16B, <Vn>.16B
printf:   printf("AESIMC V%d.16B, V%d.16B\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: SIMD_AESMC_SCALAR
instruction: AESMC
section: C7.3.10
page: C7-784
destination operands: <Vd>
source operands: <Vn>
assembly: AESMC <Vd>.16B, <Vn>.16B
printf:   printf("AESMC V%d.16B, V%d.16B\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: SIMD_AND_VEC
instruction: AND (vector)
section: C7.3.11
page: C7-785
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: AND <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("AND V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: BIC_IMM_VEC_32
qualifier: cmode = 0xx1
instruction: BIC (vector, immediate)
section: C7.3.12
page: C7-786
destination operands: 
source operands: <T>,<Vd>,<imm8>
assembly: BIC <Vd>.<T>, #<imm8>{, LSL #<amount>}
printf:   printf("BIC V%d.%s, #%d, LSL #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->imm8.Value(),packet->imm3.Value());

instance-name: BIC_IMM_VEC_16
qualifier: cmode = 10x1
instruction: BIC (vector, immediate)
section: C7.3.12
page: C7-786
destination operands: 
source operands: <T>,<Vd>,<imm8>
assembly: BIC <Vd>.<T>, #<imm8>{, LSL #<amount>}   
printf:   printf("BIC V%d.%s, #%d, LSL #%u   \n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->imm8.Value(),packet->imm3.Value());

instance-name: SIMD_BIC_REG_VEC
instruction: BIC (vector, register)
section: C7.3.13
page: C7-788
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: BIC <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("BIC V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_BIF_VEC
instruction: BIF
section: C7.3.14
page: C7-789
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: BIF <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("BIF V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_BIT_VEC
instruction: BIT
section: C7.3.15
page: C7-791
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: BIT <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("BIT V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_BSL_VEC
instruction: BSL
section: C7.3.16
page: C7-793
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: BSL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("BSL V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_CLS_VEC
instruction: CLS (vector)
section: C7.3.17
page: C7-795
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: CLS <Vd>.<T>, <Vn>.<T>
printf:   printf("CLS V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_CLZ_VEC
instruction: CLZ (vector)
section: C7.3.18
page: C7-796
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: CLZ <Vd>.<T>, <Vn>.<T>
printf:   printf("CLZ V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_CMEQ_REG_SCALAR
instruction: CMEQ (register)
section: C7.3.19
page: C7-797
destination operands: <Vd>
source operands: <T>,<V>,<m>
assembly: CMEQ <V><d>, <V><n>, <V><m>
printf:   printf("CMEQ %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_CMEQ_REG_SCALAR_VEC
instruction: CMEQ (register)
section: C7.3.19
page: C7-797
destination operands: <Vd>
source operands: <T>,<V>,<m>
assembly: CMEQ <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("CMEQ V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_CMEQ_SCALAR_ZERO
instruction: CMEQ (zero)
section: C7.3.20
page: C7-799
destination operands: 
source operands: <V>
assembly: CMEQ <V><d>, <V><n>, #0
printf:   printf("CMEQ %s%u, %s%u, #0\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: SIMD_CMEQ_SCALAR_VEC_ZERO
instruction: CMEQ (zero)
section: C7.3.20
page: C7-799
destination operands: 
source operands: <V>
assembly: CMEQ <Vd>.<T>, <Vn>.<T>, #0
printf:   printf("CMEQ V%d.%s, V%d.%s, #0\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_CMGE_REG_SCALAR
instruction: CMGE (register)
section: C7.3.21
page: C7-801
destination operands: <Vd>
source operands: <V>,<m>
assembly: CMGE <V><d>, <V><n>, <V><m>
printf:   printf("CMGE %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_CMGE_REG_SCALAR_VEC
instruction: CMGE (register)
section: C7.3.21
page: C7-801
destination operands: <Vd>
source operands: <V>,<m>
assembly: CMGE <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("CMGE V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_CMGE_SCALAR_ZERO
instruction: CMGE (zero)
section: C7.3.22
page: C7-803
destination operands: 
source operands: <V>
assembly: CMGE <V><d>, <V><n>, #0
printf:   printf("CMGE %s%u, %s%u, #0\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: SIMD_CMGE_SCALAR_VEC_ZERO
instruction: CMGE (zero)
section: C7.3.22
page: C7-803
destination operands: 
source operands: <V>
assembly: CMGE <Vd>.<T>, <Vn>.<T>, #0
printf:   printf("CMGE V%d.%s, V%d.%s, #0\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_CMGT_REG_SCALAR
instruction: CMGT (register)
section: C7.3.23
page: C7-805
destination operands: <Vd>
source operands: <V>,<m>
assembly: CMGT <V><d>, <V><n>, <V><m>
printf:   printf("CMGT %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_CMGT_REG_SCALAR_VEC
instruction: CMGT (register)
section: C7.3.23
page: C7-805
destination operands: <Vd>
source operands: <V>,<m>
assembly: CMGT <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("CMGT V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_CMGT_SCALAR_ZERO
instruction: CMGT (zero)
section: C7.3.24
page: C7-807
destination operands: 
source operands: <V>
assembly: CMGT <V><d>, <V><n>, #0
printf:   printf("CMGT %s%u, %s%u, #0\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: SIMD_CMGT_SCALAR_VEC_ZERO
instruction: CMGT (zero)
section: C7.3.24
page: C7-807
destination operands: 
source operands: <V>
assembly: CMGT <Vd>.<T>, <Vn>.<T>, #0
printf:   printf("CMGT V%d.%s, V%d.%s, #0\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_CMHI_REG_SCALAR
instruction: CMHI (register)
section: C7.3.25
page: C7-809
destination operands: <Vd>
source operands: <V>,<m>
assembly: CMHI <V><d>, <V><n>, <V><m>
printf:   printf("CMHI %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_CMHI_REG_SCALAR_VEC
instruction: CMHI (register)
section: C7.3.25
page: C7-809
destination operands: <Vd>
source operands: <V>,<m>
assembly: CMHI <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("CMHI V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_CMHS_REG_SCALAR
instruction: CMHS (register)
section: C7.3.26
page: C7-811
destination operands: <Vd>
source operands: <V>,<m>
assembly: CMHS <V><d>, <V><n>, <V><m>
printf:   printf("CMHS %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_CMHS_REG_SCALAR_VEC
instruction: CMHS (register)
section: C7.3.26
page: C7-811
destination operands: <Vd>
source operands: <V>,<m>
assembly: CMHS <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("CMHS V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_CMLE_SCALAR_ZERO
instruction: CMLE (zero)
section: C7.3.27
page: C7-813
destination operands: 
source operands: <V>
assembly: CMLE <V><d>, <V><n>, #0
printf:   printf("CMLE %s%u, %s%u, #0\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: SIMD_CMLE_SCALAR_VEC_ZERO
instruction: CMLE (zero)
section: C7.3.27
page: C7-813
destination operands: 
source operands: <V>
assembly: CMLE <Vd>.<T>, <Vn>.<T>, #0
printf:   printf("CMLE V%d.%s, V%d.%s, #0\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_CMLT_SCALAR_ZERO
instruction: CMLT (zero)
section: C7.3.28
page: C7-815
destination operands: <Vd>
source operands: <T>,<V>
assembly: CMLT <V><d>, <V><n>, #0
printf:   printf("CMLT %s%u, %s%u, #0\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: SIMD_CMLT_SCALAR_VEC_ZERO
instruction: CMLT (zero)
section: C7.3.28
page: C7-815
destination operands: <Vd>
source operands: <T>,<V>
assembly: CMLT <Vd>.<T>, <Vn>.<T>, #0
printf:   printf("CMLT V%d.%s, V%d.%s, #0\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_CMTST_SCALAR
instruction: CMTST
section: C7.3.29
page: C7-817
destination operands: <Vd>
source operands: <V>,<m>
assembly: CMTST <V><d>, <V><n>, <V><m>
printf:   printf("CMTST %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_CMTST_SCALAR_VEC
instruction: CMTST
section: C7.3.29
page: C7-817
destination operands: <Vd>
source operands: <V>,<m>
assembly: CMTST <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("CMTST V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_CNT_VEC
instruction: CNT
section: C7.3.30
page: C7-819
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: CNT <Vd>.<T>, <Vn>.<T>
printf:   printf("CNT V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_DUP_SCALAR_ELEM
instruction: DUP (element)
section: C7.3.31
page: C7-820
destination operands: 
source operands: <T>
assembly: DUP <V><d>, <Vn>.<T>[<index>]
printf:   printf("DUP %s%u, V%d.%s[%s]\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex(packet->imm5.Value()).c_str());

instance-name: SIMD_DUP_SCALAR_VEC_ELEM
instruction: DUP (element)
section: C7.3.31
page: C7-820
destination operands: 
source operands: <T>
assembly: DUP <Vd>.<T>, <Vn>.<Ts>[<index>]
printf:   printf("DUP V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),Tvect(packet->imm5.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex(packet->imm5.Value()).c_str());

instance-name: SIMD_DUP_SCALAR
instruction: DUP (general)
section: C7.3.32
page: C7-822
destination operands: <Vd>
source operands: <R>,<T>
assembly: DUP <Vd>.<T>, <R><n>
printf:   printf("DUP V%d.%s, %c%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',packet->Rn.Value());

instance-name: SIMD_EOR_VEC
instruction: EOR (vector)
section: C7.3.33
page: C7-824
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: EOR <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("EOR V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_EXT_SCALAR
instruction: EXT
section: C7.3.34
page: C7-826
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: EXT <Vd>.<T>, <Vn>.<T>, <Vm>.<T>, #<index>
printf:   printf("EXT V%d.%s, V%d.%s, V%d.%s, #%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),simdLowByteNum(packet->Q.Value(),packet->imm4.Value()).c_str());

instance-name: FABD_SCALAR
instruction: FABD
section: C7.3.35
page: C7-827
destination operands: <Vd>
source operands: <T>,<V>,<m>
assembly: FABD <V><d>, <V><n>, <V><m>
printf:   printf("FABD %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: FABD_SCALAR_VEC
instruction: FABD
section: C7.3.35
page: C7-827
destination operands: <Vd>
source operands: <T>,<V>,<m>
assembly: FABD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FABD V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FABS_VEC
instruction: FABS (vector)
section: C7.3.36
page: C7-829
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: FABS <Vd>.<T>, <Vn>.<T>
printf:   printf("FABS V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FABS_SINGLE_FROM_SP
instruction: FABS (scalar)
section: C7.3.37
page: C7-830
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FABS <Sd>, <Sn>
printf:   printf("FABS S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FABS_FROM_DP
instruction: FABS (scalar)
section: C7.3.37
page: C7-830
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FABS <Dd>, <Dn>
printf:   printf("FABS D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FACGE_SCALAR
instruction: FACGE
section: C7.3.38
page: C7-831
destination operands: <Vd>
source operands: <T>,<V>,<Vm>,<Vn>,<m>
assembly: FACGE <V><d>, <V><n>, <V><m>
printf:   printf("FACGE %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: FACGE_SCALAR_VEC
instruction: FACGE
section: C7.3.38
page: C7-831
destination operands: <Vd>
source operands: <T>,<V>,<Vm>,<Vn>,<m>
assembly: FACGE <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FACGE V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FACGT_SCALAR
instruction: FACGT
section: C7.3.39
page: C7-833
destination operands: <Vd>
source operands: <T>,<V>,<Vm>,<Vn>,<m>
assembly: FACGT <V><d>, <V><n>, <V><m>
printf:   printf("FACGT %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: FACGT_SCALAR_VEC
instruction: FACGT
section: C7.3.39
page: C7-833
destination operands: <Vd>
source operands: <T>,<V>,<Vm>,<Vn>,<m>
assembly: FACGT <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FACGT V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FADD_VEC
instruction: FADD (vector)
section: C7.3.40
page: C7-835
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: FADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FADD V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FADD_SINGLE_FROM_SP
instruction: FADD (scalar)
section: C7.3.41
page: C7-836
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FADD <Sd>, <Sn>, <Sm>
printf:   printf("FADD S%d, S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: FADD_FROM_DP
instruction: FADD (scalar)
section: C7.3.41
page: C7-836
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FADD <Dd>, <Dn>, <Dm>
printf:   printf("FADD D%d, D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: FADDP_SCALAR
instruction: FADDP (scalar)
section: C7.3.42
page: C7-837
destination operands: <V>
source operands: <T>,<Vn>
assembly: FADDP <V><d>, <Vn>.<T>
printf:   printf("FADDP %s%u, V%d.%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FADDP_VEC
instruction: FADDP (vector)
section: C7.3.43
page: C7-838
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: FADDP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FADDP V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCCMP_SINGLE_FROM_SP
instruction: FCCMP
section: C7.3.44
page: C7-839
destination operands: 
source operands: <Dm>,<Dn>,<Sm>,<Sn>,<cond>
assembly: FCCMP <Sn>, <Sm>, #<nzcv>, <cond>
printf:   printf("FCCMP S%d, S%d, #%u, %s\n",packet->Rn.Value(),packet->Rm.Value(),packet->nzcv.Value(),Bcond(packet->cond.Value()).c_str());

instance-name: FCCMP_FROM_DP
instruction: FCCMP
section: C7.3.44
page: C7-839
destination operands: 
source operands: <Dm>,<Dn>,<Sm>,<Sn>,<cond>
assembly: FCCMP <Dn>, <Dm>, #<nzcv>, <cond>
printf:   printf("FCCMP D%d, D%d, #%u, %s\n",packet->Rn.Value(),packet->Rm.Value(),packet->nzcv.Value(),Bcond(packet->cond.Value()).c_str());

instance-name: FCCMPE_SINGLE_FROM_SP
instruction: FCCMPE
section: C7.3.45
page: C7-840
destination operands: 
source operands: <Dm>,<Dn>,<Sm>,<Sn>,<cond>
assembly: FCCMPE <Sn>, <Sm>, #<nzcv>, <cond>
printf:   printf("FCCMPE S%d, S%d, #%u, %s\n",packet->Rn.Value(),packet->Rm.Value(),packet->nzcv.Value(),Bcond(packet->cond.Value()).c_str());

instance-name: FCCMPE_FROM_DP
instruction: FCCMPE
section: C7.3.45
page: C7-840
destination operands: 
source operands: <Dm>,<Dn>,<Sm>,<Sn>,<cond>
assembly: FCCMPE <Dn>, <Dm>, #<nzcv>, <cond>
printf:   printf("FCCMPE D%d, D%d, #%u, %s\n",packet->Rn.Value(),packet->Rm.Value(),packet->nzcv.Value(),Bcond(packet->cond.Value()).c_str());

instance-name: FCMEQ_REG_SCALAR
instruction: FCMEQ (register)
section: C7.3.46
page: C7-841
destination operands: <Vd>
source operands: <T>,<V>,<Vm>,<Vn>,<m>
assembly: FCMEQ <V><d>, <V><n>, <V><m>
printf:   printf("FCMEQ %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: FCMEQ_REG_SCALAR_VEC
instruction: FCMEQ (register)
section: C7.3.46
page: C7-841
destination operands: <Vd>
source operands: <T>,<V>,<Vm>,<Vn>,<m>
assembly: FCMEQ <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FCMEQ V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCMEQ_SCALAR_ZERO
instruction: FCMEQ (zero)
section: C7.3.47
page: C7-843
destination operands: 
source operands: <V>
assembly: FCMEQ <V><d>, <V><n>, #0.0
printf:   printf("FCMEQ %s%u, %s%u, #0.0\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FCMEQ_SCALAR_VEC_ZERO
instruction: FCMEQ (zero)
section: C7.3.47
page: C7-843
destination operands: 
source operands: <V>
assembly: FCMEQ <Vd>.<T>, <Vn>.<T>, #0.0
printf:   printf("FCMEQ V%d.%s, V%d.%s, #0.0\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCMGE_REG_SCALAR
instruction: FCMGE (register)
section: C7.3.48
page: C7-845
destination operands: <Vd>
source operands: <T>,<V>,<Vm>,<Vn>,<m>
assembly: FCMGE <V><d>, <V><n>, <V><m>
printf:   printf("FCMGE %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: FCMGE_REG_SCALAR_VEC
instruction: FCMGE (register)
section: C7.3.48
page: C7-845
destination operands: <Vd>
source operands: <T>,<V>,<Vm>,<Vn>,<m>
assembly: FCMGE <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FCMGE V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCMGE_SCALAR_ZERO
instruction: FCMGE (zero)
section: C7.3.49
page: C7-847
destination operands: 
source operands: <V>
assembly: FCMGE <V><d>, <V><n>, #0.0
printf:   printf("FCMGE %s%u, %s%u, #0.0\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FCMGE_SCALAR_VEC_ZERO
instruction: FCMGE (zero)
section: C7.3.49
page: C7-847
destination operands: 
source operands: <V>
assembly: FCMGE <Vd>.<T>, <Vn>.<T>, #0.0
printf:   printf("FCMGE V%d.%s, V%d.%s, #0.0\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCMGT_REG_SCALAR
instruction: FCMGT (register)
section: C7.3.50
page: C7-849
destination operands: <Vd>
source operands: <T>,<V>,<Vm>,<Vn>,<m>
assembly: FCMGT <V><d>, <V><n>, <V><m>
printf:   printf("FCMGT %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: FCMGT_REG_SCALAR_VEC
instruction: FCMGT (register)
section: C7.3.50
page: C7-849
destination operands: <Vd>
source operands: <T>,<V>,<Vm>,<Vn>,<m>
assembly: FCMGT <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FCMGT V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCMGT_SCALAR_ZERO
instruction: FCMGT (zero)
section: C7.3.51
page: C7-851
destination operands: 
source operands: <V>
assembly: FCMGT <V><d>, <V><n>, #0.0
printf:   printf("FCMGT %s%u, %s%u, #0.0\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FCMGT_SCALAR_VEC_ZERO
instruction: FCMGT (zero)
section: C7.3.51
page: C7-851
destination operands: 
source operands: <V>
assembly: FCMGT <Vd>.<T>, <Vn>.<T>, #0.0
printf:   printf("FCMGT V%d.%s, V%d.%s, #0.0\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCMLE_SCALAR_ZERO
instruction: FCMLE (zero)
section: C7.3.52
page: C7-853
destination operands: 
source operands: <V>
assembly: FCMLE <V><d>, <V><n>, #0.0
printf:   printf("FCMLE %s%u, %s%u, #0.0\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FCMLE_SCALAR_VEC_ZERO
instruction: FCMLE (zero)
section: C7.3.52
page: C7-853
destination operands: 
source operands: <V>
assembly: FCMLE <Vd>.<T>, <Vn>.<T>, #0.0
printf:   printf("FCMLE V%d.%s, V%d.%s, #0.0\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCMLT_SCALAR_ZERO
instruction: FCMLT (zero)
section: C7.3.53
page: C7-855
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCMLT <V><d>, <V><n>, #0.0
printf:   printf("FCMLT %s%u, %s%u, #0.0\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FCMLT_SCALAR_VEC_ZERO
instruction: FCMLT (zero)
section: C7.3.53
page: C7-855
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCMLT <Vd>.<T>, <Vn>.<T>, #0.0
printf:   printf("FCMLT V%d.%s, V%d.%s, #0.0\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCMP_SINGLE_FROM_SP
instruction: FCMP
section: C7.3.54
page: C7-857
destination operands: 
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FCMP <Sn>, <Sm>
printf:   printf("FCMP S%d, S%d\n",packet->Rn.Value(),packet->Rm.Value());

instance-name: FCMP_FROM_DP
instruction: FCMP
section: C7.3.54
page: C7-857
destination operands: 
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FCMP <Dn>, <Dm>
printf:   printf("FCMP D%d, D%d\n",packet->Rn.Value(),packet->Rm.Value());

instance-name: FCMPE_SINGLE_FROM_SP
instruction: FCMPE
section: C7.3.55
page: C7-858
destination operands: 
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FCMPE <Sn>, <Sm>
printf:   printf("FCMPE S%d, S%d\n",packet->Rn.Value(),packet->Rm.Value());

instance-name: FCMPE_FROM_DP
instruction: FCMPE
section: C7.3.55
page: C7-858
destination operands: 
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FCMPE <Dn>, <Dm>
printf:   printf("FCMPE D%d, D%d\n",packet->Rn.Value(),packet->Rm.Value());

instance-name: FCSEL_SINGLE_FROM_SP
instruction: FCSEL
section: C7.3.56
page: C7-859
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>,<cond>
assembly: FCSEL <Sd>, <Sn>, <Sm>, <cond>
printf:   printf("FCSEL S%d, S%d, S%d, %s\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value(),Bcond(packet->cond.Value()).c_str());

instance-name: FCSEL_FROM_DP
instruction: FCSEL
section: C7.3.56
page: C7-859
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>,<cond>
assembly: FCSEL <Dd>, <Dn>, <Dm>, <cond>
printf:   printf("FCSEL D%d, D%d, D%d, %s\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value(),Bcond(packet->cond.Value()).c_str());

instance-name: FCVT_SINGLE_FROM_HP
instruction: FCVT
section: C7.3.57
page: C7-860
destination operands: <Dd>,<Hd>,<Sd>
source operands: <Dn>,<Hn>,<Sn>
assembly: FCVT <Sd>, <Hn>
printf:   printf("FCVT S%d, H%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FCVT_FROM_HP
instruction: FCVT
section: C7.3.57
page: C7-860
destination operands: <Dd>,<Hd>,<Sd>
source operands: <Dn>,<Hn>,<Sn>
assembly: FCVT <Dd>, <Hn>
printf:   printf("FCVT D%d, H%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FCVT_SINGLE_FROM_SP
instruction: FCVT
section: C7.3.57
page: C7-860
destination operands: <Dd>,<Hd>,<Sd>
source operands: <Dn>,<Hn>,<Sn>
assembly: FCVT <Hd>, <Sn>
printf:   printf("FCVT H%d, S%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FCVT_SINGLE_FROM_SP
instruction: FCVT
section: C7.3.57
page: C7-860
destination operands: <Dd>,<Hd>,<Sd>
source operands: <Dn>,<Hn>,<Sn>
assembly: FCVT <Dd>, <Sn>
printf:   printf("FCVT D%d, S%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FCVT_FROM_DP
instruction: FCVT
section: C7.3.57
page: C7-860
destination operands: <Dd>,<Hd>,<Sd>
source operands: <Dn>,<Hn>,<Sn>
assembly: FCVT <Hd>, <Dn>
printf:   printf("FCVT H%d, D%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FCVT_SINGLE_FROM_DP
instruction: FCVT
section: C7.3.57
page: C7-860
destination operands: <Dd>,<Hd>,<Sd>
source operands: <Dn>,<Hn>,<Sn>
assembly: FCVT <Sd>, <Dn>
printf:   printf("FCVT S%d, D%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FCVTAS_SCALAR_VEC
instruction: FCVTAS (vector)
section: C7.3.58
page: C7-862
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTAS <V><d>, <V><n>
printf:   printf("FCVTAS %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FCVTAS_SCALAR_VEC
instruction: FCVTAS (vector)
section: C7.3.58
page: C7-862
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTAS <Vd>.<T>, <Vn>.<T>
printf:   printf("FCVTAS V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCVTAS_SINGLE_FROM_SP
instruction: FCVTAS (scalar)
section: C7.3.59
page: C7-864
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTAS <Wd>, <Sn>
printf:   printf("FCVTAS %s, S%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTAS_SINGLE_FROM_SP
instruction: FCVTAS (scalar)
section: C7.3.59
page: C7-864
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTAS <Xd>, <Sn>
printf:   printf("FCVTAS %s, S%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTAS_FROM_DP
instruction: FCVTAS (scalar)
section: C7.3.59
page: C7-864
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTAS <Wd>, <Dn>
printf:   printf("FCVTAS %s, D%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTAS_FROM_DP
instruction: FCVTAS (scalar)
section: C7.3.59
page: C7-864
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTAS <Xd>, <Dn>
printf:   printf("FCVTAS %s, D%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTAU_SCALAR_VEC
instruction: FCVTAU (vector)
section: C7.3.60
page: C7-866
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTAU <V><d>, <V><n>
printf:   printf("FCVTAU %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FCVTAU_SCALAR_VEC
instruction: FCVTAU (vector)
section: C7.3.60
page: C7-866
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTAU <Vd>.<T>, <Vn>.<T>
printf:   printf("FCVTAU V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCVTAU_SINGLE_FROM_SP
instruction: FCVTAU (scalar)
section: C7.3.61
page: C7-868
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTAU <Wd>, <Sn>
printf:   printf("FCVTAU %s, S%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTAU_SINGLE_FROM_SP
instruction: FCVTAU (scalar)
section: C7.3.61
page: C7-868
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTAU <Xd>, <Sn>
printf:   printf("FCVTAU %s, S%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTAU_FROM_DP
instruction: FCVTAU (scalar)
section: C7.3.61
page: C7-868
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTAU <Wd>, <Dn>
printf:   printf("FCVTAU %s, D%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTAU_FROM_DP
instruction: FCVTAU (scalar)
section: C7.3.61
page: C7-868
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTAU <Xd>, <Dn>
printf:   printf("FCVTAU %s, D%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTL_VEC
instance-num: 1
instruction: FCVTL
section: C7.3.62
page: C7-870
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: FCVTL{2} <Vd>.<Ta>, <Vn>.<Tb>
printf:   printf("FCVTL2 V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCVTL_VEC
instance-num: 2
instruction: FCVTL2
section: C7.3.62
page: C7-870
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: FCVTL{2} <Vd>.<Ta>, <Vn>.<Tb>
printf:   printf("FCVTL2 V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCVTMS_SCALAR_VEC
instruction: FCVTMS (vector)
section: C7.3.63
page: C7-871
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTMS <V><d>, <V><n>
printf:   printf("FCVTMS %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FCVTMS_SCALAR_VEC
instruction: FCVTMS (vector)
section: C7.3.63
page: C7-871
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTMS <Vd>.<T>, <Vn>.<T>
printf:   printf("FCVTMS V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCVTMS_SINGLE_FROM_SP
instruction: FCVTMS (scalar)
section: C7.3.64
page: C7-873
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTMS <Wd>, <Sn>
printf:   printf("FCVTMS %s, S%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTMS_SINGLE_FROM_SP
instruction: FCVTMS (scalar)
section: C7.3.64
page: C7-873
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTMS <Xd>, <Sn>
printf:   printf("FCVTMS %s, S%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTMS_FROM_DP
instruction: FCVTMS (scalar)
section: C7.3.64
page: C7-873
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTMS <Wd>, <Dn>
printf:   printf("FCVTMS %s, D%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTMS_FROM_DP
instruction: FCVTMS (scalar)
section: C7.3.64
page: C7-873
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTMS <Xd>, <Dn>
printf:   printf("FCVTMS %s, D%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTMU_SCALAR_VEC
instruction: FCVTMU (vector)
section: C7.3.65
page: C7-875
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTMU <V><d>, <V><n>
printf:   printf("FCVTMU %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FCVTMU_SCALAR_VEC
instruction: FCVTMU (vector)
section: C7.3.65
page: C7-875
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTMU <Vd>.<T>, <Vn>.<T>
printf:   printf("FCVTMU V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCVTMU_SINGLE_FROM_SP
instruction: FCVTMU (scalar)
section: C7.3.66
page: C7-877
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTMU <Wd>, <Sn>
printf:   printf("FCVTMU %s, S%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTMU_SINGLE_FROM_SP
instruction: FCVTMU (scalar)
section: C7.3.66
page: C7-877
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTMU <Xd>, <Sn>
printf:   printf("FCVTMU %s, S%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTMU_FROM_DP
instruction: FCVTMU (scalar)
section: C7.3.66
page: C7-877
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTMU <Wd>, <Dn>
printf:   printf("FCVTMU %s, D%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTMU_FROM_DP
instruction: FCVTMU (scalar)
section: C7.3.66
page: C7-877
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTMU <Xd>, <Dn>
printf:   printf("FCVTMU %s, D%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTN_VEC
instance-num: 1
instruction: FCVTN
section: C7.3.67
page: C7-879
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: FCVTN{2} <Vd>.<Tb>, <Vn>.<Ta>
printf:   printf("FCVTN2 V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: FCVTN_VEC
instance-num: 2
instruction: FCVTN2
section: C7.3.67
page: C7-879
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: FCVTN{2} <Vd>.<Tb>, <Vn>.<Ta>
printf:   printf("FCVTN2 V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: FCVTNS_SCALAR_VEC
instruction: FCVTNS (vector)
section: C7.3.68
page: C7-880
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTNS <V><d>, <V><n>
printf:   printf("FCVTNS %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FCVTNS_SCALAR_VEC
instruction: FCVTNS (vector)
section: C7.3.68
page: C7-880
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTNS <Vd>.<T>, <Vn>.<T>
printf:   printf("FCVTNS V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCVTNS_SINGLE_FROM_SP
instruction: FCVTNS (scalar)
section: C7.3.69
page: C7-882
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTNS <Wd>, <Sn>
printf:   printf("FCVTNS %s, S%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTNS_SINGLE_FROM_SP
instruction: FCVTNS (scalar)
section: C7.3.69
page: C7-882
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTNS <Xd>, <Sn>
printf:   printf("FCVTNS %s, S%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTNS_FROM_DP
instruction: FCVTNS (scalar)
section: C7.3.69
page: C7-882
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTNS <Wd>, <Dn>
printf:   printf("FCVTNS %s, D%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTNS_FROM_DP
instruction: FCVTNS (scalar)
section: C7.3.69
page: C7-882
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTNS <Xd>, <Dn>
printf:   printf("FCVTNS %s, D%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTNU_SCALAR_VEC
instruction: FCVTNU (vector)
section: C7.3.70
page: C7-884
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTNU <V><d>, <V><n>
printf:   printf("FCVTNU %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FCVTNU_SCALAR_VEC
instruction: FCVTNU (vector)
section: C7.3.70
page: C7-884
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTNU <Vd>.<T>, <Vn>.<T>
printf:   printf("FCVTNU V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCVTNU_SINGLE_FROM_SP
instruction: FCVTNU (scalar)
section: C7.3.71
page: C7-886
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTNU <Wd>, <Sn>
printf:   printf("FCVTNU %s, S%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTNU_SINGLE_FROM_SP
instruction: FCVTNU (scalar)
section: C7.3.71
page: C7-886
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTNU <Xd>, <Sn>
printf:   printf("FCVTNU %s, S%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTNU_FROM_DP
instruction: FCVTNU (scalar)
section: C7.3.71
page: C7-886
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTNU <Wd>, <Dn>
printf:   printf("FCVTNU %s, D%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTNU_FROM_DP
instruction: FCVTNU (scalar)
section: C7.3.71
page: C7-886
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTNU <Xd>, <Dn>
printf:   printf("FCVTNU %s, D%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTPS_SCALAR_VEC
instruction: FCVTPS (vector)
section: C7.3.72
page: C7-888
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTPS <V><d>, <V><n>
printf:   printf("FCVTPS %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FCVTPS_SCALAR_VEC
instruction: FCVTPS (vector)
section: C7.3.72
page: C7-888
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTPS <Vd>.<T>, <Vn>.<T>
printf:   printf("FCVTPS V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCVTPS_SINGLE_FROM_SP
instruction: FCVTPS (scalar)
section: C7.3.73
page: C7-890
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTPS <Wd>, <Sn>
printf:   printf("FCVTPS %s, S%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTPS_SINGLE_FROM_SP
instruction: FCVTPS (scalar)
section: C7.3.73
page: C7-890
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTPS <Xd>, <Sn>
printf:   printf("FCVTPS %s, S%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTPS_FROM_DP
instruction: FCVTPS (scalar)
section: C7.3.73
page: C7-890
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTPS <Wd>, <Dn>
printf:   printf("FCVTPS %s, D%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTPS_FROM_DP
instruction: FCVTPS (scalar)
section: C7.3.73
page: C7-890
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTPS <Xd>, <Dn>
printf:   printf("FCVTPS %s, D%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTPU_SCALAR_VEC
instruction: FCVTPU (vector)
section: C7.3.74
page: C7-892
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTPU <V><d>, <V><n>
printf:   printf("FCVTPU %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FCVTPU_SCALAR_VEC
instruction: FCVTPU (vector)
section: C7.3.74
page: C7-892
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTPU <Vd>.<T>, <Vn>.<T>
printf:   printf("FCVTPU V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCVTPU_SINGLE_FROM_SP
instruction: FCVTPU (scalar)
section: C7.3.75
page: C7-894
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTPU <Wd>, <Sn>
printf:   printf("FCVTPU %s, S%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTPU_SINGLE_FROM_SP
instruction: FCVTPU (scalar)
section: C7.3.75
page: C7-894
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTPU <Xd>, <Sn>
printf:   printf("FCVTPU %s, S%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTPU_FROM_DP
instruction: FCVTPU (scalar)
section: C7.3.75
page: C7-894
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTPU <Wd>, <Dn>
printf:   printf("FCVTPU %s, D%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTPU_FROM_DP
instruction: FCVTPU (scalar)
section: C7.3.75
page: C7-894
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTPU <Xd>, <Dn>
printf:   printf("FCVTPU %s, D%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTXN_SCALAR
instance-num: 1
instruction: FCVTXN
section: C7.3.76
page: C7-896
destination operands: <Vd>
source operands: <Tb>,<Vn>
assembly: FCVTXN <Vb><d>, <Va><n>
printf:   printf("FCVTXN %s%u, %s%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value());

instance-name: FCVTXN_SCALAR_VEC
instance-num: 1
instruction: FCVTXN
section: C7.3.76
page: C7-896
destination operands: <Vd>
source operands: <Tb>,<Vn>
assembly: FCVTXN{2} <Vd>.<Tb>, <Vn>.<Ta>
printf:   printf("FCVTXN2 V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: FCVTXN_SCALAR
instance-num: 2
instruction: FCVTXN2
section: C7.3.76
page: C7-896
destination operands: <Vd>
source operands: <Tb>,<Vn>
assembly: FCVTXN <Vb><d>, <Va><n>
printf:   printf("FCVTXN %s%u, %s%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value());

instance-name: FCVTXN_SCALAR_VEC
instance-num: 2
instruction: FCVTXN2
section: C7.3.76
page: C7-896
destination operands: <Vd>
source operands: <Tb>,<Vn>
assembly: FCVTXN{2} <Vd>.<Tb>, <Vn>.<Ta>
printf:   printf("FCVTXN2 V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: FCVTZS_SCALAR_VEC_FIXED
instruction: FCVTZS (vector, fixed-point)
section: C7.3.77
page: C7-898
destination operands: 
source operands: <V>
assembly: FCVTZS <V><d>, <V><n>, #<fbits>
printf:   printf("FCVTZS %s%u, %s%u, #%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: FCVTZS_SCALAR_VEC_FIXED
instruction: FCVTZS (vector, fixed-point)
section: C7.3.77
page: C7-898
destination operands: 
source operands: <V>
assembly: FCVTZS <Vd>.<T>, <Vn>.<T>, #<fbits>
printf:   printf("FCVTZS V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: FCVTZS_SCALAR_VEC
instruction: FCVTZS (vector, integer)
section: C7.3.78
page: C7-900
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTZS <V><d>, <V><n>
printf:   printf("FCVTZS %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FCVTZS_SCALAR_VEC
instruction: FCVTZS (vector, integer)
section: C7.3.78
page: C7-900
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTZS <Vd>.<T>, <Vn>.<T>
printf:   printf("FCVTZS V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCVTZS_SINGLE_FROM_SP_FIXED
instruction: FCVTZS (scalar, fixed-point)
section: C7.3.79
page: C7-902
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTZS <Wd>, <Sn>, #<fbits>
printf:   printf("FCVTZS %s, S%d, #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: FCVTZS_SINGLE_FROM_SP_FIXED
instruction: FCVTZS (scalar, fixed-point)
section: C7.3.79
page: C7-902
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTZS <Xd>, <Sn>, #<fbits>
printf:   printf("FCVTZS %s, S%d, #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: FCVTZS_FROM_DP_FIXED
instruction: FCVTZS (scalar, fixed-point)
section: C7.3.79
page: C7-902
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTZS <Wd>, <Dn>, #<fbits>
printf:   printf("FCVTZS %s, D%d, #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: FCVTZS_FROM_DP_FIXED
instruction: FCVTZS (scalar, fixed-point)
section: C7.3.79
page: C7-902
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTZS <Xd>, <Dn>, #<fbits>
printf:   printf("FCVTZS %s, D%d, #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: FCVTZS_FIXED
instruction: FCVTZS (scalar, fixed-point)
section: C7.3.79
page: C7-902
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: CheckFPAdvSIMDEnabled64();
printf:   printf("CheckFPAdvSIMDEnabled64();\n");

instance-name: FCVTZS_SINGLE_FROM_SP
instruction: FCVTZS (scalar, integer)
section: C7.3.80
page: C7-904
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTZS <Wd>, <Sn>
printf:   printf("FCVTZS %s, S%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTZS_SINGLE_FROM_SP
instruction: FCVTZS (scalar, integer)
section: C7.3.80
page: C7-904
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTZS <Xd>, <Sn>
printf:   printf("FCVTZS %s, S%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTZS_FROM_DP
instruction: FCVTZS (scalar, integer)
section: C7.3.80
page: C7-904
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTZS <Wd>, <Dn>
printf:   printf("FCVTZS %s, D%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTZS_FROM_DP
instruction: FCVTZS (scalar, integer)
section: C7.3.80
page: C7-904
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTZS <Xd>, <Dn>
printf:   printf("FCVTZS %s, D%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTZU_SCALAR_VEC_FIXED
instruction: FCVTZU (vector, fixed-point)
section: C7.3.81
page: C7-906
destination operands: 
source operands: <V>
assembly: FCVTZU <V><d>, <V><n>, #<fbits>
printf:   printf("FCVTZU %s%u, %s%u, #%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: FCVTZU_SCALAR_VEC_FIXED
instruction: FCVTZU (vector, fixed-point)
section: C7.3.81
page: C7-906
destination operands: 
source operands: <V>
assembly: FCVTZU <Vd>.<T>, <Vn>.<T>, #<fbits>
printf:   printf("FCVTZU V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: FCVTZU_SCALAR_VEC
instruction: FCVTZU (vector, integer)
section: C7.3.82
page: C7-908
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTZU <V><d>, <V><n>
printf:   printf("FCVTZU %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FCVTZU_SCALAR_VEC
instruction: FCVTZU (vector, integer)
section: C7.3.82
page: C7-908
destination operands: <Vd>
source operands: <T>,<V>
assembly: FCVTZU <Vd>.<T>, <Vn>.<T>
printf:   printf("FCVTZU V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FCVTZU_SINGLE_FROM_SP_FIXED
instruction: FCVTZU (scalar, fixed-point)
section: C7.3.83
page: C7-910
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTZU <Wd>, <Sn>, #<fbits>
printf:   printf("FCVTZU %s, S%d, #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: FCVTZU_SINGLE_FROM_SP_FIXED
instruction: FCVTZU (scalar, fixed-point)
section: C7.3.83
page: C7-910
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTZU <Xd>, <Sn>, #<fbits>
printf:   printf("FCVTZU %s, S%d, #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: FCVTZU_FROM_DP_FIXED
instruction: FCVTZU (scalar, fixed-point)
section: C7.3.83
page: C7-910
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTZU <Wd>, <Dn>, #<fbits>
printf:   printf("FCVTZU %s, D%d, #%u\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: FCVTZU_FROM_DP_FIXED
instruction: FCVTZU (scalar, fixed-point)
section: C7.3.83
page: C7-910
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTZU <Xd>, <Dn>, #<fbits>
printf:   printf("FCVTZU %s, D%d, #%u\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: FCVTZU_FIXED
instruction: FCVTZU (scalar, fixed-point)
section: C7.3.83
page: C7-910
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: CheckFPAdvSIMDEnabled64();
printf:   printf("CheckFPAdvSIMDEnabled64();\n");

instance-name: FCVTZU_SINGLE_FROM_SP
instruction: FCVTZU (scalar, integer)
section: C7.3.84
page: C7-912
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTZU <Wd>, <Sn>
printf:   printf("FCVTZU %s, S%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTZU_SINGLE_FROM_SP
instruction: FCVTZU (scalar, integer)
section: C7.3.84
page: C7-912
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTZU <Xd>, <Sn>
printf:   printf("FCVTZU %s, S%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FCVTZU_FROM_DP
instruction: FCVTZU (scalar, integer)
section: C7.3.84
page: C7-912
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTZU <Wd>, <Dn>
printf:   printf("FCVTZU %s, D%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FCVTZU_FROM_DP
instruction: FCVTZU (scalar, integer)
section: C7.3.84
page: C7-912
destination operands: <Wd>,<Xd>
source operands: <Dn>,<Sn>
assembly: FCVTZU <Xd>, <Dn>
printf:   printf("FCVTZU %s, D%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FDIV_VEC
instruction: FDIV (vector)
section: C7.3.85
page: C7-914
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: FDIV <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FDIV V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FDIV_SINGLE_FROM_SP
instruction: FDIV (scalar)
section: C7.3.86
page: C7-915
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FDIV <Sd>, <Sn>, <Sm>
printf:   printf("FDIV S%d, S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: FDIV_FROM_DP
instruction: FDIV (scalar)
section: C7.3.86
page: C7-915
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FDIV <Dd>, <Dn>, <Dm>
printf:   printf("FDIV D%d, D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: FMADD_SINGLE_FROM_SP
instruction: FMADD
section: C7.3.87
page: C7-916
destination operands: <Dd>,<Sd>
source operands: <Da>,<Dm>,<Dn>,<Sa>,<Sm>,<Sn>
assembly: FMADD <Sd>, <Sn>, <Sm>, <Sa>
printf:   printf("FMADD S%d, S%d, S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value(),packet->Ra.Value());

instance-name: FMADD_FROM_DP
instruction: FMADD
section: C7.3.87
page: C7-916
destination operands: <Dd>,<Sd>
source operands: <Da>,<Dm>,<Dn>,<Sa>,<Sm>,<Sn>
assembly: FMADD <Dd>, <Dn>, <Dm>, <Da>
printf:   printf("FMADD D%d, D%d, D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value(),packet->Ra.Value());

instance-name: FMAX_VEC
instruction: FMAX (vector)
section: C7.3.88
page: C7-918
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: FMAX <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FMAX V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMAX_SINGLE_FROM_SP
instruction: FMAX (scalar)
section: C7.3.89
page: C7-920
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FMAX <Sd>, <Sn>, <Sm>
printf:   printf("FMAX S%d, S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: FMAX_FROM_DP
instruction: FMAX (scalar)
section: C7.3.89
page: C7-920
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FMAX <Dd>, <Dn>, <Dm>
printf:   printf("FMAX D%d, D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: FMAXNM_VEC
instruction: FMAXNM (vector)
section: C7.3.90
page: C7-921
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: FMAXNM <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FMAXNM V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMAXNM_SINGLE_FROM_SP
instruction: FMAXNM (scalar)
section: C7.3.91
page: C7-923
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FMAXNM <Sd>, <Sn>, <Sm>
printf:   printf("FMAXNM S%d, S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: FMAXNM_FROM_DP
instruction: FMAXNM (scalar)
section: C7.3.91
page: C7-923
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FMAXNM <Dd>, <Dn>, <Dm>
printf:   printf("FMAXNM D%d, D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: FMAXNMP_SCALAR
instruction: FMAXNMP (scalar)
section: C7.3.92
page: C7-924
destination operands: <V>
source operands: <T>,<Vn>
assembly: FMAXNMP <V><d>, <Vn>.<T>
printf:   printf("FMAXNMP %s%u, V%d.%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMAXNMP_VEC
instruction: FMAXNMP (vector)
section: C7.3.93
page: C7-925
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: FMAXNMP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FMAXNMP V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMAXNMV_SCALAR
instruction: FMAXNMV
section: C7.3.94
page: C7-927
destination operands: <V>
source operands: <T>,<Vn>
assembly: FMAXNMV <V><d>, <Vn>.<T>
printf:   printf("FMAXNMV %s%u, V%d.%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMAXP_SCALAR
instruction: FMAXP (scalar)
section: C7.3.95
page: C7-928
destination operands: <V>
source operands: <T>,<Vn>
assembly: FMAXP <V><d>, <Vn>.<T>
printf:   printf("FMAXP %s%u, V%d.%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMAXP_VEC
instruction: FMAXP (vector)
section: C7.3.96
page: C7-929
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: FMAXP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FMAXP V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMAXV_SCALAR
instruction: FMAXV
section: C7.3.97
page: C7-931
destination operands: <V>
source operands: <T>,<Vn>
assembly: FMAXV <V><d>, <Vn>.<T>
printf:   printf("FMAXV %s%u, V%d.%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMIN_VEC
instruction: FMIN (vector)
section: C7.3.98
page: C7-932
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: FMIN <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FMIN V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMIN_SINGLE_FROM_SP
instruction: FMIN (scalar)
section: C7.3.99
page: C7-934
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FMIN <Sd>, <Sn>, <Sm>
printf:   printf("FMIN S%d, S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: FMIN_FROM_DP
instruction: FMIN (scalar)
section: C7.3.99
page: C7-934
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FMIN <Dd>, <Dn>, <Dm>
printf:   printf("FMIN D%d, D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: FMINNM_VEC
instruction: FMINNM (vector)
section: C7.3.100
page: C7-935
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: FMINNM <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FMINNM V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMINNM_SINGLE_FROM_SP
instruction: FMINNM (scalar)
section: C7.3.101
page: C7-937
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FMINNM <Sd>, <Sn>, <Sm>
printf:   printf("FMINNM S%d, S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: FMINNM_FROM_DP
instruction: FMINNM (scalar)
section: C7.3.101
page: C7-937
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FMINNM <Dd>, <Dn>, <Dm>
printf:   printf("FMINNM D%d, D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: FMINNMP_SCALAR
instruction: FMINNMP (scalar)
section: C7.3.102
page: C7-938
destination operands: <V>
source operands: <T>,<Vn>
assembly: FMINNMP <V><d>, <Vn>.<T>
printf:   printf("FMINNMP %s%u, V%d.%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMINNMP_VEC
instruction: FMINNMP (vector)
section: C7.3.103
page: C7-939
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: FMINNMP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FMINNMP V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMINNMV_SCALAR
instruction: FMINNMV
section: C7.3.104
page: C7-941
destination operands: <V>
source operands: <T>,<Vn>
assembly: FMINNMV <V><d>, <Vn>.<T>
printf:   printf("FMINNMV %s%u, V%d.%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMINP_SCALAR
instruction: FMINP (scalar)
section: C7.3.105
page: C7-942
destination operands: <V>
source operands: <T>,<Vn>
assembly: FMINP <V><d>, <Vn>.<T>
printf:   printf("FMINP %s%u, V%d.%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMINP_VEC
instruction: FMINP (vector)
section: C7.3.106
page: C7-943
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: FMINP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FMINP V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMINV_SCALAR
instruction: FMINV
section: C7.3.107
page: C7-945
destination operands: <V>
source operands: <T>,<Vn>
assembly: FMINV <V><d>, <Vn>.<T>
printf:   printf("FMINV %s%u, V%d.%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMLA_SCALAR_ELEM
instruction: FMLA (by element)
section: C7.3.108
page: C7-946
destination operands: <Vd>
source operands: <T>,<Ts>,<V>,<Vm>,<Vn>
assembly: FMLA <V><d>, <V><n>, <Vm>.<Ts>[<index>]
printf:   printf("FMLA %s%u, %s%u, V%d.%s[%s]\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),fpElementIndex(packet->size.Value(),packet->L.Value(),packet->H.Value()).c_str());

instance-name: FMLA_SCALAR_VEC_ELEM
instruction: FMLA (by element)
section: C7.3.108
page: C7-946
destination operands: <Vd>
source operands: <T>,<Ts>,<V>,<Vm>,<Vn>
assembly: FMLA <Vd>.<T>, <Vn>.<T>, <Vm>.<Ts>[<index>]
printf:   printf("FMLA V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),fpElementIndex(packet->size.Value(),packet->L.Value(),packet->H.Value()).c_str());

instance-name: FMLA_VEC
instruction: FMLA (vector)
section: C7.3.109
page: C7-948
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: FMLA <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FMLA V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMLS_SCALAR_ELEM
instruction: FMLS (by element)
section: C7.3.110
page: C7-949
destination operands: <Vd>
source operands: <T>,<Ts>,<V>,<Vm>,<Vn>
assembly: FMLS <V><d>, <V><n>, <Vm>.<Ts>[<index>]
printf:   printf("FMLS %s%u, %s%u, V%d.%s[%s]\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),fpElementIndex(packet->size.Value(),packet->L.Value(),packet->H.Value()).c_str());

instance-name: FMLS_SCALAR_VEC_ELEM
instruction: FMLS (by element)
section: C7.3.110
page: C7-949
destination operands: <Vd>
source operands: <T>,<Ts>,<V>,<Vm>,<Vn>
assembly: FMLS <Vd>.<T>, <Vn>.<T>, <Vm>.<Ts>[<index>]
printf:   printf("FMLS V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),fpElementIndex(packet->size.Value(),packet->L.Value(),packet->H.Value()).c_str());

instance-name: FMLS_VEC
instruction: FMLS (vector)
section: C7.3.111
page: C7-951
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: FMLS <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FMLS V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMOV_IMM_SINGLE_VEC_FROM_SP
instruction: FMOV (vector, immediate)
section: C7.3.112
page: C7-952
destination operands: <Vd>
source operands: <T>,<imm>
assembly: FMOV <Vd>.<T>, #<imm>
printf:   printf("FMOV V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->a.Value()<<7|packet->b.Value()<<6|packet->c.Value()<<5|packet->d.Value()<<4|packet->e.Value()<<3|packet->f.Value()<<2|packet->g.Value()<<1|packet->h.Value());

instance-name: FMOV_IMM_VEC_FROM_DP
instruction: FMOV (vector, immediate)
section: C7.3.112
page: C7-952
destination operands: <Vd>
source operands: <T>,<imm>
assembly: FMOV <Vd>.2D, #<imm>
printf:   printf("FMOV V%d.2D, #%u\n",packet->Rd.Value(),packet->a.Value()<<7|packet->b.Value()<<6|packet->c.Value()<<5|packet->d.Value()<<4|packet->e.Value()<<3|packet->f.Value()<<2|packet->g.Value()<<1|packet->h.Value());

instance-name: FMOV_SINGLE_REG_FROM_SP
instruction: FMOV (register)
section: C7.3.113
page: C7-954
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FMOV <Sd>, <Sn>
printf:   printf("FMOV S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FMOV_REG_FROM_DP
instruction: FMOV (register)
section: C7.3.113
page: C7-954
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FMOV <Dd>, <Dn>
printf:   printf("FMOV D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FMOV_SINGLE
instruction: FMOV (general)
section: C7.3.114
page: C7-955
destination operands: <Dd>,<Sd>,<Vd>,<Wd>,<Xd>
source operands: <Dn>,<Sn>,<Vn>,<Wn>,<Xn>
assembly: FMOV <Sd>, <Wn>
printf:   printf("FMOV S%d, %s\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),true).c_str());

instance-name: FMOV_SINGLE_FROM_SP
instruction: FMOV (general)
section: C7.3.114
page: C7-955
destination operands: <Dd>,<Sd>,<Vd>,<Wd>,<Xd>
source operands: <Dn>,<Sn>,<Vn>,<Wn>,<Xn>
assembly: FMOV <Wd>, <Sn>
printf:   printf("FMOV %s, S%d\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value());

instance-name: FMOV
instruction: FMOV (general)
section: C7.3.114
page: C7-955
destination operands: <Dd>,<Sd>,<Vd>,<Wd>,<Xd>
source operands: <Dn>,<Sn>,<Vn>,<Wn>,<Xn>
assembly: FMOV <Dd>, <Xn>
printf:   printf("FMOV D%d, %s\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),false).c_str());

instance-name: FMOV
instruction: FMOV (general)
section: C7.3.114
page: C7-955
destination operands: <Dd>,<Sd>,<Vd>,<Wd>,<Xd>
source operands: <Dn>,<Sn>,<Vn>,<Wn>,<Xn>
assembly: FMOV <Vd>.D[1], <Xn>
printf:   printf("FMOV V%d.D[1], %s\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),false).c_str());

instance-name: FMOV_FROM_DP
instruction: FMOV (general)
section: C7.3.114
page: C7-955
destination operands: <Dd>,<Sd>,<Vd>,<Wd>,<Xd>
source operands: <Dn>,<Sn>,<Vn>,<Wn>,<Xn>
assembly: FMOV <Xd>, <Dn>
printf:   printf("FMOV %s, D%d\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FMOV
instruction: FMOV (general)
section: C7.3.114
page: C7-955
destination operands: <Dd>,<Sd>,<Vd>,<Wd>,<Xd>
source operands: <Dn>,<Sn>,<Vn>,<Wn>,<Xn>
assembly: FMOV <Xd>, <Vn>.D[1]
printf:   printf("FMOV %s, V%d.D[1]\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value());

instance-name: FMOV_IMM_SINGLE_FROM_SP
instruction: FMOV (scalar, immediate)
section: C7.3.115
page: C7-957
destination operands: <Dd>,<Sd>
source operands: <imm>
assembly: FMOV <Sd>, #<imm>
printf:   printf("FMOV S%d, #%u\n",packet->Rd.Value(),packet->imm8.Value());

instance-name: FMOV_IMM_FROM_DP
instruction: FMOV (scalar, immediate)
section: C7.3.115
page: C7-957
destination operands: <Dd>,<Sd>
source operands: <imm>
assembly: FMOV <Dd>, #<imm>
printf:   printf("FMOV D%d, #%u\n",packet->Rd.Value(),packet->imm8.Value());

instance-name: FMSUB_SINGLE_FROM_SP
instruction: FMSUB
section: C7.3.116
page: C7-958
destination operands: <Dd>,<Sd>
source operands: <Da>,<Dm>,<Dn>,<Sa>,<Sm>,<Sn>
assembly: FMSUB <Sd>, <Sn>, <Sm>, <Sa>
printf:   printf("FMSUB S%d, S%d, S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value(),packet->Ra.Value());

instance-name: FMSUB_FROM_DP
instruction: FMSUB
section: C7.3.116
page: C7-958
destination operands: <Dd>,<Sd>
source operands: <Da>,<Dm>,<Dn>,<Sa>,<Sm>,<Sn>
assembly: FMSUB <Dd>, <Dn>, <Dm>, <Da>
printf:   printf("FMSUB D%d, D%d, D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value(),packet->Ra.Value());

instance-name: FMUL_SCALAR_ELEM
instruction: FMUL (by element)
section: C7.3.117
page: C7-960
destination operands: <Vd>
source operands: <T>,<Ts>,<V>,<Vm>,<Vn>
assembly: FMUL <V><d>, <V><n>, <Vm>.<Ts>[<index>]
printf:   printf("FMUL %s%u, %s%u, V%d.%s[%s]\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),fpElementIndex(packet->size.Value(),packet->L.Value(),packet->H.Value()).c_str());

instance-name: FMUL_SCALAR_VEC_ELEM
instruction: FMUL (by element)
section: C7.3.117
page: C7-960
destination operands: <Vd>
source operands: <T>,<Ts>,<V>,<Vm>,<Vn>
assembly: FMUL <Vd>.<T>, <Vn>.<T>, <Vm>.<Ts>[<index>]
printf:   printf("FMUL V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),fpElementIndex(packet->size.Value(),packet->L.Value(),packet->H.Value()).c_str());

instance-name: FMUL_VEC
instruction: FMUL (vector)
section: C7.3.118
page: C7-963
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: FMUL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FMUL V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FMUL_SINGLE_FROM_SP
instruction: FMUL (scalar)
section: C7.3.119
page: C7-964
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FMUL <Sd>, <Sn>, <Sm>
printf:   printf("FMUL S%d, S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: FMUL_FROM_DP
instruction: FMUL (scalar)
section: C7.3.119
page: C7-964
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FMUL <Dd>, <Dn>, <Dm>
printf:   printf("FMUL D%d, D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: FMULX_SCALAR_ELEM
instruction: FMULX (by element)
section: C7.3.120
page: C7-965
destination operands: <Vd>
source operands: <T>,<Ts>,<V>,<Vm>,<Vn>
assembly: FMULX <V><d>, <V><n>, <Vm>.<Ts>[<index>]
printf:   printf("FMULX %s%u, %s%u, V%d.%s[%s]\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),fpElementIndex(packet->size.Value(),packet->L.Value(),packet->H.Value()).c_str());

instance-name: FMULX_SCALAR_VEC_ELEM
instruction: FMULX (by element)
section: C7.3.120
page: C7-965
destination operands: <Vd>
source operands: <T>,<Ts>,<V>,<Vm>,<Vn>
assembly: FMULX <Vd>.<T>, <Vn>.<T>, <Vm>.<Ts>[<index>]
printf:   printf("FMULX V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),fpElementIndex(packet->size.Value(),packet->L.Value(),packet->H.Value()).c_str());

instance-name: FMULX_SCALAR
instruction: FMULX
section: C7.3.121
page: C7-968
destination operands: <Vd>
source operands: <T>,<V>,<m>
assembly: FMULX <V><d>, <V><n>, <V><m>
printf:   printf("FMULX %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: FMULX_SCALAR_VEC
instruction: FMULX
section: C7.3.121
page: C7-968
destination operands: <Vd>
source operands: <T>,<V>,<m>
assembly: FMULX <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FMULX V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FNEG_VEC
instruction: FNEG (vector)
section: C7.3.122
page: C7-970
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: FNEG <Vd>.<T>, <Vn>.<T>
printf:   printf("FNEG V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FNEG_SINGLE_FROM_SP
instruction: FNEG (scalar)
section: C7.3.123
page: C7-971
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FNEG <Sd>, <Sn>
printf:   printf("FNEG S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FNEG_FROM_DP
instruction: FNEG (scalar)
section: C7.3.123
page: C7-971
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FNEG <Dd>, <Dn>
printf:   printf("FNEG D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FNMADD_SINGLE_FROM_SP
instruction: FNMADD
section: C7.3.124
page: C7-972
destination operands: <Dd>,<Sd>
source operands: <Da>,<Dm>,<Dn>,<Sa>,<Sm>,<Sn>
assembly: FNMADD <Sd>, <Sn>, <Sm>, <Sa>
printf:   printf("FNMADD S%d, S%d, S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value(),packet->Ra.Value());

instance-name: FNMADD_FROM_DP
instruction: FNMADD
section: C7.3.124
page: C7-972
destination operands: <Dd>,<Sd>
source operands: <Da>,<Dm>,<Dn>,<Sa>,<Sm>,<Sn>
assembly: FNMADD <Dd>, <Dn>, <Dm>, <Da>
printf:   printf("FNMADD D%d, D%d, D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value(),packet->Ra.Value());

instance-name: FNMSUB_SINGLE_FROM_SP
instruction: FNMSUB
section: C7.3.125
page: C7-974
destination operands: <Dd>,<Sd>
source operands: <Da>,<Dm>,<Dn>,<Sa>,<Sm>,<Sn>
assembly: FNMSUB <Sd>, <Sn>, <Sm>, <Sa>
printf:   printf("FNMSUB S%d, S%d, S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value(),packet->Ra.Value());

instance-name: FNMSUB_FROM_DP
instruction: FNMSUB
section: C7.3.125
page: C7-974
destination operands: <Dd>,<Sd>
source operands: <Da>,<Dm>,<Dn>,<Sa>,<Sm>,<Sn>
assembly: FNMSUB <Dd>, <Dn>, <Dm>, <Da>
printf:   printf("FNMSUB D%d, D%d, D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value(),packet->Ra.Value());

instance-name: FNMUL_SINGLE_FROM_SP
instruction: FNMUL
section: C7.3.126
page: C7-976
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FNMUL <Sd>, <Sn>, <Sm>
printf:   printf("FNMUL S%d, S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: FNMUL_FROM_DP
instruction: FNMUL
section: C7.3.126
page: C7-976
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FNMUL <Dd>, <Dn>, <Dm>
printf:   printf("FNMUL D%d, D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: FRECPE_SCALAR
instruction: FRECPE
section: C7.3.127
page: C7-977
destination operands: <Vd>
source operands: <T>,<V>,<Vn>
assembly: FRECPE <V><d>, <V><n>
printf:   printf("FRECPE %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FRECPE_SCALAR_VEC
instruction: FRECPE
section: C7.3.127
page: C7-977
destination operands: <Vd>
source operands: <T>,<V>,<Vn>
assembly: FRECPE <Vd>.<T>, <Vn>.<T>
printf:   printf("FRECPE V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FRECPS_SCALAR
instruction: FRECPS
section: C7.3.128
page: C7-979
destination operands: <Vd>
source operands: <T>,<V>,<m>
assembly: FRECPS <V><d>, <V><n>, <V><m>
printf:   printf("FRECPS %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: FRECPS_SCALAR_VEC
instruction: FRECPS
section: C7.3.128
page: C7-979
destination operands: <Vd>
source operands: <T>,<V>,<m>
assembly: FRECPS <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FRECPS V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FRECPX_SCALAR
instruction: FRECPX
section: C7.3.129
page: C7-981
destination operands: 
source operands: <V>
assembly: FRECPX <V><d>, <V><n>
printf:   printf("FRECPX %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FRINTA_VEC
instruction: FRINTA (vector)
section: C7.3.130
page: C7-982
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: FRINTA <Vd>.<T>, <Vn>.<T>
printf:   printf("FRINTA V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FRINTA_SINGLE_FROM_SP
instruction: FRINTA (scalar)
section: C7.3.131
page: C7-983
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FRINTA <Sd>, <Sn>
printf:   printf("FRINTA S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FRINTA_FROM_DP
instruction: FRINTA (scalar)
section: C7.3.131
page: C7-983
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FRINTA <Dd>, <Dn>
printf:   printf("FRINTA D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FRINTI_VEC
instruction: FRINTI (vector)
section: C7.3.132
page: C7-984
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: FRINTI <Vd>.<T>, <Vn>.<T>
printf:   printf("FRINTI V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FRINTI_SINGLE_FROM_SP
instruction: FRINTI (scalar)
section: C7.3.133
page: C7-985
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FRINTI <Sd>, <Sn>
printf:   printf("FRINTI S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FRINTI_FROM_DP
instruction: FRINTI (scalar)
section: C7.3.133
page: C7-985
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FRINTI <Dd>, <Dn>
printf:   printf("FRINTI D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FRINTM_VEC
instruction: FRINTM (vector)
section: C7.3.134
page: C7-986
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: FRINTM <Vd>.<T>, <Vn>.<T>
printf:   printf("FRINTM V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FRINTM_SINGLE_FROM_SP
instruction: FRINTM (scalar)
section: C7.3.135
page: C7-987
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FRINTM <Sd>, <Sn>
printf:   printf("FRINTM S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FRINTM_FROM_DP
instruction: FRINTM (scalar)
section: C7.3.135
page: C7-987
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FRINTM <Dd>, <Dn>
printf:   printf("FRINTM D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FRINTN_VEC
instruction: FRINTN (vector)
section: C7.3.136
page: C7-988
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: FRINTN <Vd>.<T>, <Vn>.<T>
printf:   printf("FRINTN V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FRINTN_SINGLE_FROM_SP
instruction: FRINTN (scalar)
section: C7.3.137
page: C7-989
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FRINTN <Sd>, <Sn>
printf:   printf("FRINTN S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FRINTN_FROM_DP
instruction: FRINTN (scalar)
section: C7.3.137
page: C7-989
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FRINTN <Dd>, <Dn>
printf:   printf("FRINTN D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FRINTP_VEC
instruction: FRINTP (vector)
section: C7.3.138
page: C7-990
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: FRINTP <Vd>.<T>, <Vn>.<T>
printf:   printf("FRINTP V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FRINTP_SINGLE_FROM_SP
instruction: FRINTP (scalar)
section: C7.3.139
page: C7-991
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FRINTP <Sd>, <Sn>
printf:   printf("FRINTP S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FRINTP_FROM_DP
instruction: FRINTP (scalar)
section: C7.3.139
page: C7-991
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FRINTP <Dd>, <Dn>
printf:   printf("FRINTP D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FRINTX_VEC
instruction: FRINTX (vector)
section: C7.3.140
page: C7-992
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: FRINTX <Vd>.<T>, <Vn>.<T>
printf:   printf("FRINTX V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FRINTX_SINGLE_FROM_SP
instruction: FRINTX (scalar)
section: C7.3.141
page: C7-993
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FRINTX <Sd>, <Sn>
printf:   printf("FRINTX S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FRINTX_FROM_DP
instruction: FRINTX (scalar)
section: C7.3.141
page: C7-993
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FRINTX <Dd>, <Dn>
printf:   printf("FRINTX D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FRINTZ_VEC
instruction: FRINTZ (vector)
section: C7.3.142
page: C7-994
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: FRINTZ <Vd>.<T>, <Vn>.<T>
printf:   printf("FRINTZ V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FRINTZ_SINGLE_FROM_SP
instruction: FRINTZ (scalar)
section: C7.3.143
page: C7-995
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FRINTZ <Sd>, <Sn>
printf:   printf("FRINTZ S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FRINTZ_FROM_DP
instruction: FRINTZ (scalar)
section: C7.3.143
page: C7-995
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FRINTZ <Dd>, <Dn>
printf:   printf("FRINTZ D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FRSQRTE_SCALAR
instruction: FRSQRTE
section: C7.3.144
page: C7-996
destination operands: <Vd>
source operands: <T>,<V>,<Vn>
assembly: FRSQRTE <V><d>, <V><n>
printf:   printf("FRSQRTE %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: FRSQRTE_SCALAR_VEC
instruction: FRSQRTE
section: C7.3.144
page: C7-996
destination operands: <Vd>
source operands: <T>,<V>,<Vn>
assembly: FRSQRTE <Vd>.<T>, <Vn>.<T>
printf:   printf("FRSQRTE V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FRSQRTS_SCALAR
instruction: FRSQRTS
section: C7.3.145
page: C7-998
destination operands: <Vd>
source operands: <T>,<V>,<m>
assembly: FRSQRTS <V><d>, <V><n>, <V><m>
printf:   printf("FRSQRTS %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: FRSQRTS_SCALAR_VEC
instruction: FRSQRTS
section: C7.3.145
page: C7-998
destination operands: <Vd>
source operands: <T>,<V>,<m>
assembly: FRSQRTS <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FRSQRTS V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FSQRT_VEC
instruction: FSQRT (vector)
section: C7.3.146
page: C7-1000
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: FSQRT <Vd>.<T>, <Vn>.<T>
printf:   printf("FSQRT V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FSQRT_SINGLE_FROM_SP
instruction: FSQRT (scalar)
section: C7.3.147
page: C7-1001
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FSQRT <Sd>, <Sn>
printf:   printf("FSQRT S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FSQRT_FROM_DP
instruction: FSQRT (scalar)
section: C7.3.147
page: C7-1001
destination operands: <Dd>,<Sd>
source operands: <Dn>,<Sn>
assembly: FSQRT <Dd>, <Dn>
printf:   printf("FSQRT D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: FSUB_VEC
instruction: FSUB (vector)
section: C7.3.148
page: C7-1002
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: FSUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("FSUB V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: FSUB_SINGLE_FROM_SP
instruction: FSUB (scalar)
section: C7.3.149
page: C7-1003
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FSUB <Sd>, <Sn>, <Sm>
printf:   printf("FSUB S%d, S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: FSUB_FROM_DP
instruction: FSUB (scalar)
section: C7.3.149
page: C7-1003
destination operands: <Dd>,<Sd>
source operands: <Dm>,<Dn>,<Sm>,<Sn>
assembly: FSUB <Dd>, <Dn>, <Dm>
printf:   printf("FSUB D%d, D%d, D%d\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: SIMD_INS_SCALAR_ELEM
instruction: INS (element)
section: C7.3.150
page: C7-1004
destination operands: <Vd>
source operands: <Ts>,<Vn>
assembly: INS <Vd>.<Ts>[<index1>], <Vn>.<Ts>[<index2>]
printf:   printf("INS V%d.%s[%s], V%d.%s[%s]\n",packet->Rd.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex(packet->imm5.Value()).c_str(),packet->Rn.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex2(packet->imm5.Value(),packet->imm4.Value()).c_str());

instance-name: SIMD_INS_SCALAR
instruction: INS (general)
section: C7.3.151
page: C7-1006
destination operands: <Vd>
source operands: <R>,<Ts>
assembly: INS <Vd>.<Ts>[<index>], <R><n>
printf:   printf("INS V%d.%s[%s], %c%u\n",packet->Rd.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex(packet->imm5.Value()).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',packet->Rn.Value());

instance-name: SIMD_LD1_FOUR_REG_MULT_STRUCT_NO_OFF
instance-num: 1
qualifier: opcode = 0010
instruction: LD1 (multiple structures) (No offset)
section: C7.3.152
page: C7-1008
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: LD1 {<Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>, <Vt4>.<T>}, [<Xn|SP>]
printf:   printf("LD1 V%d.%s, V%d.%s, V%d.%s, V%d.%s, [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 3) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: SIMD_LD1_THREE_REG_MULT_STRUCT_NO_OFF
instance-num: 1
qualifier: opcode = 0110
instruction: LD1 (multiple structures) (No offset)
section: C7.3.152
page: C7-1008
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: LD1 {<Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>}, [<Xn|SP>]
printf:   printf("LD1 V%d.%s, V%d.%s, V%d.%s, [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: SIMD_LD1_TWO_REG_MULT_STRUCT_NO_OFF
instance-num: 1
qualifier: opcode = 1010
instruction: LD1 (multiple structures) (No offset)
section: C7.3.152
page: C7-1008
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: LD1 {<Vt>.<T>, <Vt2>.<T>}, [<Xn|SP>]
printf:   printf("LD1 V%d.%s, V%d.%s, [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: SIMD_LD1_ONE_REG_MULT_STRUCT_NO_OFF
instance-num: 1
qualifier: opcode = 0111
instruction: LD1 (multiple structures) (No offset)
section: C7.3.152
page: C7-1008
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: LD1 {<Vt>.<T>}, [<Xn|SP>]
printf:   printf("LD1 V%d.%s, [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: SIMD_LD1_ONE_REG_MULT_STRUCT_POST_REG
instance-num: 2
qualifier: Rm != 11111, opcode = 0111
instruction: LD1 (multiple structures) (Post-index)
section: C7.3.152
page: C7-1008
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: LD1 { <Vt>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("LD1  V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: SIMD_LD1_ONE_REG_MULT_STRUCT_POST_OFF
instance-num: 2
qualifier: Rm = 11111, opcode = 0111
instruction: LD1 (multiple structures) (Post-index)
section: C7.3.152
page: C7-1008
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: LD1 { <Vt>.<T> }, [<Xn|SP>], <imm>
printf:   printf("LD1  V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(packet->Q.Value()==1 ? 16 : 8));

instance-name: SIMD_LD1_TWO_REG_MULT_STRUCT_POST_REG
instance-num: 2
qualifier: Rm != 11111, opcode = 1010
instruction: LD1 (multiple structures) (Post-index)
section: C7.3.152
page: C7-1008
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: LD1 { <Vt>.<T>, <Vt2>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("LD1  V%d.%s, V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: SIMD_LD1_TWO_REG_MULT_STRUCT_POST_OFF
instance-num: 2
qualifier: Rm = 11111, opcode = 1010
instruction: LD1 (multiple structures) (Post-index)
section: C7.3.152
page: C7-1008
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: LD1 { <Vt>.<T>, <Vt2>.<T> }, [<Xn|SP>], <imm>
printf:   printf("LD1  V%d.%s, V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(packet->Q.Value()==1 ? 32 : 16));

instance-name: SIMD_LD1_THREE_REG_MULT_STRUCT_POST_REG
instance-num: 2
qualifier: Rm != 11111, opcode = 0110
instruction: LD1 (multiple structures) (Post-index)
section: C7.3.152
page: C7-1008
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: LD1 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("LD1  V%d.%s, V%d.%s, V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: SIMD_LD1_THREE_REG_MULT_STRUCT_POST_OFF
instance-num: 2
qualifier: Rm = 11111, opcode = 0110
instruction: LD1 (multiple structures) (Post-index)
section: C7.3.152
page: C7-1008
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: LD1 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T> }, [<Xn|SP>], <imm>
printf:   printf("LD1  V%d.%s, V%d.%s, V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(packet->Q.Value()==1 ? 48 : 24));

instance-name: SIMD_LD1_FOUR_REG_MULT_STRUCT_POST_REG
instance-num: 2
qualifier: Rm != 11111, opcode = 0010
instruction: LD1 (multiple structures) (Post-index)
section: C7.3.152
page: C7-1008
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: LD1 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>, <Vt4>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("LD1  V%d.%s, V%d.%s, V%d.%s, V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 3) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: SIMD_LD1_FOUR_REG_MULT_STRUCT_POST_OFF
instance-num: 2
qualifier: Rm = 11111, opcode = 0010
instruction: LD1 (multiple structures) (Post-index)
section: C7.3.152
page: C7-1008
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: LD1 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>, <Vt4>.<T> }, [<Xn|SP>], <imm>
printf:   printf("LD1  V%d.%s, V%d.%s, V%d.%s, V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 3) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(packet->Q.Value()==1 ? 64 : 32));

instance-name: LD1_SINGLE_STRUCT_8
qualifier: opcode = 000
instruction: LD1 (single structure)
section: C7.3.153
page: C7-1011
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: LD1 { <Vt>.B }[<index>], [<Xn|SP>]
printf:   printf("LD1  V%d.B [%u], [%s]\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD1_SINGLE_STRUCT_8
qualifier: Rm = 11111, opcode = 000
instruction: LD1 (single structure)
section: C7.3.153
page: C7-1011
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: LD1 { <Vt>.B }[<index>], [<Xn|SP>], #1
printf:   printf("LD1  V%d.B [%u], [%s], #1\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD1_SINGLE_STRUCT_8
qualifier: Rm != 11111, opcode = 000
instruction: LD1 (single structure)
section: C7.3.153
page: C7-1011
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: LD1 { <Vt>.B }[<index>], [<Xn|SP>], <Xm>
printf:   printf("LD1  V%d.B [%u], [%s], %s\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD1_SINGLE_STRUCT_64
qualifier: opcode = 100, S = 0, size = 01
instruction: LD1 (single structure)
section: C7.3.153
page: C7-1011
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: LD1 { <Vt>.D }[<index>], [<Xn|SP>]
printf:   printf("LD1  V%d.D [%u], [%s]\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD1_SINGLE_STRUCT_64
qualifier: Rm = 11111, opcode = 100, S = 0, size = 01
instruction: LD1 (single structure)
section: C7.3.153
page: C7-1011
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: LD1 { <Vt>.D }[<index>], [<Xn|SP>], #8
printf:   printf("LD1  V%d.D [%u], [%s], #8\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD1_SINGLE_STRUCT_64
qualifier: Rm != 11111, opcode = 100, S = 0, size = 01
instruction: LD1 (single structure)
section: C7.3.153
page: C7-1011
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: LD1 { <Vt>.D }[<index>], [<Xn|SP>], <Xm>
printf:   printf("LD1  V%d.D [%u], [%s], %s\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD1_SINGLE_STRUCT_16
qualifier: opcode = 010, size = x0
instruction: LD1 (single structure)
section: C7.3.153
page: C7-1011
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: LD1 { <Vt>.H }[<index>], [<Xn|SP>]
printf:   printf("LD1  V%d.H [%u], [%s]\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD1_SINGLE_STRUCT_16
qualifier: Rm = 11111, opcode = 010, size = x0
instruction: LD1 (single structure)
section: C7.3.153
page: C7-1011
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: LD1 { <Vt>.H }[<index>], [<Xn|SP>], #2
printf:   printf("LD1  V%d.H [%u], [%s], #2\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD1_SINGLE_STRUCT_16
qualifier: Rm != 11111, opcode = 010, size = x0
instruction: LD1 (single structure)
section: C7.3.153
page: C7-1011
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: LD1 { <Vt>.H }[<index>], [<Xn|SP>], <Xm>
printf:   printf("LD1  V%d.H [%u], [%s], %s\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD1_SINGLE_STRUCT_32
qualifier: opcode = 100, size = 00
instruction: LD1 (single structure)
section: C7.3.153
page: C7-1011
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: LD1 { <Vt>.S }[<index>], [<Xn|SP>]
printf:   printf("LD1  V%d.S [%u], [%s]\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD1_SINGLE_STRUCT_32
qualifier: Rm = 11111, opcode = 100, size = 00
instruction: LD1 (single structure)
section: C7.3.153
page: C7-1011
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: LD1 { <Vt>.S }[<index>], [<Xn|SP>], #4
printf:   printf("LD1  V%d.S [%u], [%s], #4\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD1_SINGLE_STRUCT_32
qualifier: Rm != 11111, opcode = 100, size = 00
instruction: LD1 (single structure)
section: C7.3.153
page: C7-1011
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: LD1 { <Vt>.S }[<index>], [<Xn|SP>], <Xm>
printf:   printf("LD1  V%d.S [%u], [%s], %s\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD1R
instruction: LD1R
section: C7.3.154
page: C7-1014
destination operands: 
source operands: <T>,<Vt>,<Xn|SP>,<imm>
assembly: LD1R { <Vt>.<T> }, [<Xn|SP>]
printf:   printf("LD1R  V%d.%s , [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD1R
instruction: LD1R
section: C7.3.154
page: C7-1014
destination operands: 
source operands: <T>,<Vt>,<Xn|SP>,<imm>
assembly: LD1R { <Vt>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("LD1R  V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD1R
instruction: LD1R
section: C7.3.154
page: C7-1014
destination operands: 
source operands: <T>,<Vt>,<Xn|SP>,<imm>
assembly: LD1R { <Vt>.<T> }, [<Xn|SP>], <imm>
printf:   printf("LD1R  V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),1<<packet->size.Value());

instance-name: LD2_OFF_MULT_STRUCT
instance-num: 1
instruction: LD2 (multiple structures) (No offset)
section: C7.3.155
page: C7-1017
destination operands: 
source operands: <T>,<Vt2>,<Vt>,<Xn|SP>
assembly: LD2 { <Vt>.<T>, <Vt2>.<T> }, [<Xn|SP>]
printf:   printf("LD2  V%d.%s, V%d.%s , [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD2_MULT_REG_POST_STRUCT
instance-num: 2
instruction: LD2 (multiple structures) (Post-index)
section: C7.3.155
page: C7-1017
destination operands: 
source operands: <T>,<Vt2>,<Vt>,<Xn|SP>
assembly: LD2 { <Vt>.<T>, <Vt2>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("LD2  V%d.%s, V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD2_MULT_REG_POST_STRUCT
instance-num: 2
instruction: LD2 (multiple structures) (Post-index)
section: C7.3.155
page: C7-1017
destination operands: 
source operands: <T>,<Vt2>,<Vt>,<Xn|SP>
assembly: LD2 { <Vt>.<T>, <Vt2>.<T> }, [<Xn|SP>], <imm>
printf:   printf("LD2  V%d.%s, V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(packet->Q.Value()==1 ? 32 : 16));

instance-name: LD2_SINGLE_STRUCT_8
qualifier: opcode = 000
instruction: LD2 (single structure)
section: C7.3.156
page: C7-1020
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: LD2 { <Vt>.B, <Vt2>.B }[<index>], [<Xn|SP>]
printf:   printf("LD2  V%d.B, V%d.B [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD2_SINGLE_STRUCT_8
qualifier: Rm = 11111, opcode = 000
instruction: LD2 (single structure)
section: C7.3.156
page: C7-1020
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: LD2 { <Vt>.B, <Vt2>.B }[<index>], [<Xn|SP>], #2
printf:   printf("LD2  V%d.B, V%d.B [%u], [%s], #2\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD2_SINGLE_STRUCT_8
qualifier: Rm != 11111, opcode = 000
instruction: LD2 (single structure)
section: C7.3.156
page: C7-1020
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: LD2 { <Vt>.B, <Vt2>.B }[<index>], [<Xn|SP>], <Xm>
printf:   printf("LD2  V%d.B, V%d.B [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD2_SINGLE_STRUCT_64
qualifier: opcode = 100, S = 0, size = 01
instruction: LD2 (single structure)
section: C7.3.156
page: C7-1020
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: LD2 { <Vt>.D, <Vt2>.D }[<index>], [<Xn|SP>]
printf:   printf("LD2  V%d.D, V%d.D [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD2_SINGLE_STRUCT_64
qualifier: Rm = 11111, opcode = 100, S = 0, size = 01
instruction: LD2 (single structure)
section: C7.3.156
page: C7-1020
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: LD2 { <Vt>.D, <Vt2>.D }[<index>], [<Xn|SP>], #16
printf:   printf("LD2  V%d.D, V%d.D [%u], [%s], #16\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD2_SINGLE_STRUCT_64
qualifier: Rm != 11111, opcode = 100, S = 0, size = 01
instruction: LD2 (single structure)
section: C7.3.156
page: C7-1020
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: LD2 { <Vt>.D, <Vt2>.D }[<index>], [<Xn|SP>], <Xm>
printf:   printf("LD2  V%d.D, V%d.D [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD2_SINGLE_STRUCT_16
qualifier: opcode = 010, size = x0
instruction: LD2 (single structure)
section: C7.3.156
page: C7-1020
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: LD2 { <Vt>.H, <Vt2>.H }[<index>], [<Xn|SP>]
printf:   printf("LD2  V%d.H, V%d.H [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD2_SINGLE_STRUCT_16
qualifier: Rm = 11111, opcode = 010, size = x0
instruction: LD2 (single structure)
section: C7.3.156
page: C7-1020
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: LD2 { <Vt>.H, <Vt2>.H }[<index>], [<Xn|SP>], #4
printf:   printf("LD2  V%d.H, V%d.H [%u], [%s], #4\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD2_SINGLE_STRUCT_16
qualifier: Rm != 11111, opcode = 010, size = x0
instruction: LD2 (single structure)
section: C7.3.156
page: C7-1020
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: LD2 { <Vt>.H, <Vt2>.H }[<index>], [<Xn|SP>], <Xm>
printf:   printf("LD2  V%d.H, V%d.H [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD2_SINGLE_STRUCT_32
qualifier: opcode = 100, size = 00
instruction: LD2 (single structure)
section: C7.3.156
page: C7-1020
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: LD2 { <Vt>.S, <Vt2>.S }[<index>], [<Xn|SP>]
printf:   printf("LD2  V%d.S, V%d.S [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD2_SINGLE_STRUCT_32
qualifier: Rm = 11111, opcode = 100, size = 00
instruction: LD2 (single structure)
section: C7.3.156
page: C7-1020
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: LD2 { <Vt>.S, <Vt2>.S }[<index>], [<Xn|SP>], #8
printf:   printf("LD2  V%d.S, V%d.S [%u], [%s], #8\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD2_SINGLE_STRUCT_32
qualifier: Rm != 11111, opcode = 100, size = 00
instruction: LD2 (single structure)
section: C7.3.156
page: C7-1020
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: LD2 { <Vt>.S, <Vt2>.S }[<index>], [<Xn|SP>], <Xm>
printf:   printf("LD2  V%d.S, V%d.S [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD2R
instruction: LD2R
section: C7.3.157
page: C7-1023
destination operands: 
source operands: <T>,<Vt2>,<Vt>,<Xn|SP>
assembly: LD2R { <Vt>.<T>, <Vt2>.<T> }, [<Xn|SP>]
printf:   printf("LD2R  V%d.%s, V%d.%s , [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD2R
instruction: LD2R
section: C7.3.157
page: C7-1023
destination operands: 
source operands: <T>,<Vt2>,<Vt>,<Xn|SP>
assembly: LD2R { <Vt>.<T>, <Vt2>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("LD2R  V%d.%s, V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD2R
instruction: LD2R
section: C7.3.157
page: C7-1023
destination operands: 
source operands: <T>,<Vt2>,<Vt>,<Xn|SP>
assembly: LD2R { <Vt>.<T>, <Vt2>.<T> }, [<Xn|SP>], <imm>
printf:   printf("LD2R  V%d.%s, V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),1<<packet->size.Value());

instance-name: LD3_OFF_MULT_STRUCT
instance-num: 1
instruction: LD3 (multiple structures) (No offset)
section: C7.3.158
page: C7-1026
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt>,<Xn|SP>
assembly: LD3 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T> }, [<Xn|SP>]
printf:   printf("LD3  V%d.%s, V%d.%s, V%d.%s , [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD3_MULT_REG_POST_STRUCT
instance-num: 2
instruction: LD3 (multiple structures) (Post-index)
section: C7.3.158
page: C7-1026
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt>,<Xn|SP>
assembly: LD3 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("LD3  V%d.%s, V%d.%s, V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD3_MULT_REG_POST_STRUCT
instance-num: 2
instruction: LD3 (multiple structures) (Post-index)
section: C7.3.158
page: C7-1026
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt>,<Xn|SP>
assembly: LD3 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T> }, [<Xn|SP>], <imm>
printf:   printf("LD3  V%d.%s, V%d.%s, V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(packet->Q.Value()==1 ? 48 : 24));

instance-name: LD3_SINGLE_STRUCT_8
qualifier: opcode = 001
instruction: LD3 (single structure)
section: C7.3.159
page: C7-1029
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: LD3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<index>], [<Xn|SP>]
printf:   printf("LD3  V%d.B, V%d.B, V%d.B [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD3_SINGLE_STRUCT_8
qualifier: Rm = 11111, opcode = 001
instruction: LD3 (single structure)
section: C7.3.159
page: C7-1029
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: LD3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<index>], [<Xn|SP>], #3
printf:   printf("LD3  V%d.B, V%d.B, V%d.B [%u], [%s], #3\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD3_SINGLE_STRUCT_8
qualifier: Rm != 11111, opcode = 001
instruction: LD3 (single structure)
section: C7.3.159
page: C7-1029
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: LD3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<index>], [<Xn|SP>], <Xm>
printf:   printf("LD3  V%d.B, V%d.B, V%d.B [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD3_SINGLE_STRUCT_64
qualifier: opcode = 101, S = 0, size = 01
instruction: LD3 (single structure)
section: C7.3.159
page: C7-1029
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: LD3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<index>], [<Xn|SP>]
printf:   printf("LD3  V%d.D, V%d.D, V%d.D [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD3_SINGLE_STRUCT_64
qualifier: Rm = 11111, opcode = 101, S = 0, size = 01
instruction: LD3 (single structure)
section: C7.3.159
page: C7-1029
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: LD3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<index>], [<Xn|SP>], #24
printf:   printf("LD3  V%d.D, V%d.D, V%d.D [%u], [%s], #24\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD3_SINGLE_STRUCT_64
qualifier: Rm != 11111, opcode = 101, S = 0, size = 01
instruction: LD3 (single structure)
section: C7.3.159
page: C7-1029
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: LD3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<index>], [<Xn|SP>], <Xm>
printf:   printf("LD3  V%d.D, V%d.D, V%d.D [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD3_SINGLE_STRUCT_16
qualifier: opcode = 011, size = x0
instruction: LD3 (single structure)
section: C7.3.159
page: C7-1029
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: LD3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<index>], [<Xn|SP>]
printf:   printf("LD3  V%d.H, V%d.H, V%d.H [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD3_SINGLE_STRUCT_16
qualifier: Rm = 11111, opcode = 011, size = x0
instruction: LD3 (single structure)
section: C7.3.159
page: C7-1029
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: LD3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<index>], [<Xn|SP>], #6
printf:   printf("LD3  V%d.H, V%d.H, V%d.H [%u], [%s], #6\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD3_SINGLE_STRUCT_16
qualifier: Rm != 11111, opcode = 011, size = x0
instruction: LD3 (single structure)
section: C7.3.159
page: C7-1029
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: LD3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<index>], [<Xn|SP>], <Xm>
printf:   printf("LD3  V%d.H, V%d.H, V%d.H [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD3_SINGLE_STRUCT_32
qualifier: opcode = 101, size = 00
instruction: LD3 (single structure)
section: C7.3.159
page: C7-1029
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: LD3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<index>], [<Xn|SP>]
printf:   printf("LD3  V%d.S, V%d.S, V%d.S [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD3_SINGLE_STRUCT_32
qualifier: Rm = 11111, opcode = 101, size = 00
instruction: LD3 (single structure)
section: C7.3.159
page: C7-1029
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: LD3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<index>], [<Xn|SP>], #12
printf:   printf("LD3  V%d.S, V%d.S, V%d.S [%u], [%s], #12\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD3_SINGLE_STRUCT_32
qualifier: Rm != 11111, opcode = 101, size = 00
instruction: LD3 (single structure)
section: C7.3.159
page: C7-1029
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: LD3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<index>], [<Xn|SP>], <Xm>
printf:   printf("LD3  V%d.S, V%d.S, V%d.S [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD3R
instruction: LD3R
section: C7.3.160
page: C7-1032
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt>,<Xn|SP>
assembly: LD3R { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T> }, [<Xn|SP>]
printf:   printf("LD3R  V%d.%s, V%d.%s, V%d.%s , [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD3R
instruction: LD3R
section: C7.3.160
page: C7-1032
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt>,<Xn|SP>
assembly: LD3R { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("LD3R  V%d.%s, V%d.%s, V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD3R
instruction: LD3R
section: C7.3.160
page: C7-1032
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt>,<Xn|SP>
assembly: LD3R { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T> }, [<Xn|SP>], <imm>
printf:   printf("LD3R  V%d.%s, V%d.%s, V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),1<<packet->size.Value());

instance-name: LD4_OFF_MULT_STRUCT
instance-num: 1
instruction: LD4 (multiple structures) (No offset)
section: C7.3.161
page: C7-1035
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>
assembly: LD4 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>, <Vt4>.<T> }, [<Xn|SP>]
printf:   printf("LD4  V%d.%s, V%d.%s, V%d.%s, V%d.%s , [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 3) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD4_MULT_REG_POST_STRUCT
instance-num: 2
instruction: LD4 (multiple structures) (Post-index)
section: C7.3.161
page: C7-1035
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>
assembly: LD4 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>, <Vt4>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("LD4  V%d.%s, V%d.%s, V%d.%s, V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 3) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD4_MULT_REG_POST_STRUCT
instance-num: 2
instruction: LD4 (multiple structures) (Post-index)
section: C7.3.161
page: C7-1035
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>
assembly: LD4 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>, <Vt4>.<T> }, [<Xn|SP>], <imm>
printf:   printf("LD4  V%d.%s, V%d.%s, V%d.%s, V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 3) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(packet->Q.Value()==1 ? 64 : 32));

instance-name: LD4_SINGLE_STRUCT_8
qualifier: opcode = 001
instruction: LD4 (single structure)
section: C7.3.162
page: C7-1038
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: LD4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<index>], [<Xn|SP>]
printf:   printf("LD4  V%d.B, V%d.B, V%d.B, V%d.B [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD4_SINGLE_STRUCT_8
qualifier: Rm = 11111, opcode = 001
instruction: LD4 (single structure)
section: C7.3.162
page: C7-1038
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: LD4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<index>], [<Xn|SP>], #4
printf:   printf("LD4  V%d.B, V%d.B, V%d.B, V%d.B [%u], [%s], #4\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD4_SINGLE_STRUCT_8
qualifier: Rm != 11111, opcode = 001
instruction: LD4 (single structure)
section: C7.3.162
page: C7-1038
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: LD4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<index>], [<Xn|SP>], <Xm>
printf:   printf("LD4  V%d.B, V%d.B, V%d.B, V%d.B [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD4_SINGLE_STRUCT_64
qualifier: opcode = 101, S = 0, size = 01
instruction: LD4 (single structure)
section: C7.3.162
page: C7-1038
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: LD4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<index>], [<Xn|SP>]
printf:   printf("LD4  V%d.D, V%d.D, V%d.D, V%d.D [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD4_SINGLE_STRUCT_64
qualifier: Rm = 11111, opcode = 101, S = 0, size = 01
instruction: LD4 (single structure)
section: C7.3.162
page: C7-1038
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: LD4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<index>], [<Xn|SP>], #32
printf:   printf("LD4  V%d.D, V%d.D, V%d.D, V%d.D [%u], [%s], #32\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD4_SINGLE_STRUCT_64
qualifier: Rm != 11111, opcode = 101, S = 0, size = 01
instruction: LD4 (single structure)
section: C7.3.162
page: C7-1038
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: LD4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<index>], [<Xn|SP>], <Xm>
printf:   printf("LD4  V%d.D, V%d.D, V%d.D, V%d.D [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD4_SINGLE_STRUCT_16
qualifier: opcode = 011, size = x0
instruction: LD4 (single structure)
section: C7.3.162
page: C7-1038
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: LD4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<index>], [<Xn|SP>]
printf:   printf("LD4  V%d.H, V%d.H, V%d.H, V%d.H [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD4_SINGLE_STRUCT_16
qualifier: Rm = 11111, opcode = 011, size = x0
instruction: LD4 (single structure)
section: C7.3.162
page: C7-1038
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: LD4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<index>], [<Xn|SP>], #8
printf:   printf("LD4  V%d.H, V%d.H, V%d.H, V%d.H [%u], [%s], #8\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD4_SINGLE_STRUCT_16
qualifier: Rm != 11111, opcode = 011, size = x0
instruction: LD4 (single structure)
section: C7.3.162
page: C7-1038
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: LD4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<index>], [<Xn|SP>], <Xm>
printf:   printf("LD4  V%d.H, V%d.H, V%d.H, V%d.H [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD4_SINGLE_STRUCT_32
qualifier: opcode = 101, size = 00
instruction: LD4 (single structure)
section: C7.3.162
page: C7-1038
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: LD4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<index>], [<Xn|SP>]
printf:   printf("LD4  V%d.S, V%d.S, V%d.S, V%d.S [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD4_SINGLE_STRUCT_32
qualifier: Rm = 11111, opcode = 101, size = 00
instruction: LD4 (single structure)
section: C7.3.162
page: C7-1038
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: LD4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<index>], [<Xn|SP>], #16
printf:   printf("LD4  V%d.S, V%d.S, V%d.S, V%d.S [%u], [%s], #16\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD4_SINGLE_STRUCT_32
qualifier: Rm != 11111, opcode = 101, size = 00
instruction: LD4 (single structure)
section: C7.3.162
page: C7-1038
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: LD4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<index>], [<Xn|SP>], <Xm>
printf:   printf("LD4  V%d.S, V%d.S, V%d.S, V%d.S [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD4R
instruction: LD4R
section: C7.3.163
page: C7-1041
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>
assembly: LD4R { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>, <Vt4>.<T> }, [<Xn|SP>]
printf:   printf("LD4R  V%d.%s, V%d.%s, V%d.%s, V%d.%s , [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 3) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: LD4R
instruction: LD4R
section: C7.3.163
page: C7-1041
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>
assembly: LD4R { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>, <Vt4>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("LD4R  V%d.%s, V%d.%s, V%d.%s, V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 3) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: LD4R
instruction: LD4R
section: C7.3.163
page: C7-1041
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>
assembly: LD4R { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>, <Vt4>.<T> }, [<Xn|SP>], <imm>
printf:   printf("LD4R  V%d.%s, V%d.%s, V%d.%s, V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 3) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),1<<packet->size.Value());

instance-name: SIMD_LDNP_64
qualifier: opc = 01
instruction: LDNP (SIMD&FP)
section: C7.3.164
page: C7-1044
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: LDNP <Dt1>, <Dt2>, [<Xn|SP>{, #<imm>}]
printf:   printf("LDNP D%d, D%d, [%s, #%lld]\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 8);

instance-name: SIMD_LDNP_128
qualifier: opc = 10
instruction: LDNP (SIMD&FP)
section: C7.3.164
page: C7-1044
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: LDNP <Qt1>, <Qt2>, [<Xn|SP>{, #<imm>}]
printf:   printf("LDNP Q%d, Q%d, [%s, #%lld]\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 16);

instance-name: SIMD_LDNP_32
qualifier: opc = 00
instruction: LDNP (SIMD&FP)
section: C7.3.164
page: C7-1044
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: LDNP <St1>, <St2>, [<Xn|SP>{, #<imm>}]
printf:   printf("LDNP S%d, S%d, [%s, #%lld]\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: SIMD_LDP_REG_POST_64
instance-num: 1
qualifier: opc = 01
instruction: LDP (SIMD&FP) (Post-index)
section: C7.3.165
page: C7-1046
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: LDP <Dt1>, <Dt2>, [<Xn|SP>], #<imm>
printf:   printf("LDP D%d, D%d, [%s], #%lld\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 8);

instance-name: SIMD_LDP_REG_POST_128
instance-num: 1
qualifier: opc = 10
instruction: LDP (SIMD&FP) (Post-index)
section: C7.3.165
page: C7-1046
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: LDP <Qt1>, <Qt2>, [<Xn|SP>], #<imm>
printf:   printf("LDP Q%d, Q%d, [%s], #%lld\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 16);

instance-name: SIMD_LDP_REG_POST_32
instance-num: 1
qualifier: opc = 00
instruction: LDP (SIMD&FP) (Post-index)
section: C7.3.165
page: C7-1046
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: LDP <St1>, <St2>, [<Xn|SP>], #<imm>
printf:   printf("LDP S%d, S%d, [%s], #%lld\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: SIMD_LDP_REG_PRE_64
instance-num: 2
qualifier: opc = 01
instruction: LDP (SIMD&FP) (Pre-index)
section: C7.3.165
page: C7-1046
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: LDP <Dt1>, <Dt2>, [<Xn|SP>, #<imm>]!
printf:   printf("LDP D%d, D%d, [%s, #%lld]!\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 8);

instance-name: SIMD_LDP_REG_PRE_128
instance-num: 2
qualifier: opc = 10
instruction: LDP (SIMD&FP) (Pre-index)
section: C7.3.165
page: C7-1046
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: LDP <Qt1>, <Qt2>, [<Xn|SP>, #<imm>]!
printf:   printf("LDP Q%d, Q%d, [%s, #%lld]!\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 16);

instance-name: SIMD_LDP_REG_PRE_32
instance-num: 2
qualifier: opc = 00
instruction: LDP (SIMD&FP) (Pre-index)
section: C7.3.165
page: C7-1046
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: LDP <St1>, <St2>, [<Xn|SP>, #<imm>]!
printf:   printf("LDP S%d, S%d, [%s, #%lld]!\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: SIMD_LDP_REG_OFF_64
instance-num: 3
qualifier: opc = 01
instruction: LDP (SIMD&FP) (Signed offset)
section: C7.3.165
page: C7-1046
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: LDP <Dt1>, <Dt2>, [<Xn|SP>{, #<imm>}]
printf:   printf("LDP D%d, D%d, [%s, #%lld]\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 8);

instance-name: SIMD_LDP_REG_OFF_128
instance-num: 3
qualifier: opc = 10
instruction: LDP (SIMD&FP) (Signed offset)
section: C7.3.165
page: C7-1046
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: LDP <Qt1>, <Qt2>, [<Xn|SP>{, #<imm>}]
printf:   printf("LDP Q%d, Q%d, [%s, #%lld]\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 16);

instance-name: SIMD_LDP_REG_OFF_32
instance-num: 3
qualifier: opc = 00
instruction: LDP (SIMD&FP) (Signed offset)
section: C7.3.165
page: C7-1046
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: LDP <St1>, <St2>, [<Xn|SP>{, #<imm>}]
printf:   printf("LDP S%d, S%d, [%s, #%lld]\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: SIMD_LDR_IMM_8
qualifier: size = 00, opc = 01
instruction: LDR immediate (SIMD&FP)
section: C7.3.166
page: C7-1049
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: LDR <Bt>, [<Xn|SP>, #<simm>]!
printf:   printf("LDR B%d, [%s, #%d]!\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_LDR_IMM_8
qualifier: size = 00, opc = 01
instruction: LDR immediate (SIMD&FP)
section: C7.3.166
page: C7-1049
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: LDR <Bt>, [<Xn|SP>], #<simm>
printf:   printf("LDR B%d, [%s], #%d\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_LDR_IMM_8
qualifier: size = 00, opc = 01
instruction: LDR immediate (SIMD&FP)
section: C7.3.166
page: C7-1049
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: LDR <Bt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDR B%d, [%s, #%u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: SIMD_LDR_IMM_64
qualifier: size = 11, opc = 01
instruction: LDR immediate (SIMD&FP)
section: C7.3.166
page: C7-1049
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: LDR <Dt>, [<Xn|SP>, #<simm>]!
printf:   printf("LDR D%d, [%s, #%d]!\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_LDR_IMM_64
qualifier: size = 11, opc = 01
instruction: LDR immediate (SIMD&FP)
section: C7.3.166
page: C7-1049
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: LDR <Dt>, [<Xn|SP>], #<simm>
printf:   printf("LDR D%d, [%s], #%d\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_LDR_IMM_64
qualifier: size = 11, opc = 01
instruction: LDR immediate (SIMD&FP)
section: C7.3.166
page: C7-1049
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: LDR <Dt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDR D%d, [%s, #%u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: SIMD_LDR_IMM_16
qualifier: size = 01, opc = 01
instruction: LDR immediate (SIMD&FP)
section: C7.3.166
page: C7-1049
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: LDR <Ht>, [<Xn|SP>, #<simm>]!
printf:   printf("LDR H%d, [%s, #%d]!\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_LDR_IMM_16
qualifier: size = 01, opc = 01
instruction: LDR immediate (SIMD&FP)
section: C7.3.166
page: C7-1049
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: LDR <Ht>, [<Xn|SP>], #<simm>
printf:   printf("LDR H%d, [%s], #%d\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_LDR_IMM_16
qualifier: size = 01, opc = 01
instruction: LDR immediate (SIMD&FP)
section: C7.3.166
page: C7-1049
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: LDR <Ht>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDR H%d, [%s, #%u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: SIMD_LDR_IMM_128
qualifier: size = 00, opc = 11
instruction: LDR immediate (SIMD&FP)
section: C7.3.166
page: C7-1049
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: LDR <Qt>, [<Xn|SP>, #<simm>]!
printf:   printf("LDR Q%d, [%s, #%d]!\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_LDR_IMM_128
qualifier: size = 00, opc = 11
instruction: LDR immediate (SIMD&FP)
section: C7.3.166
page: C7-1049
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: LDR <Qt>, [<Xn|SP>], #<simm>
printf:   printf("LDR Q%d, [%s], #%d\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_LDR_IMM_128
qualifier: size = 00, opc = 11
instruction: LDR immediate (SIMD&FP)
section: C7.3.166
page: C7-1049
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: LDR <Qt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDR Q%d, [%s, #%u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: SIMD_LDR_IMM_32
qualifier: size = 10, opc = 01
instruction: LDR immediate (SIMD&FP)
section: C7.3.166
page: C7-1049
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: LDR <St>, [<Xn|SP>, #<simm>]!
printf:   printf("LDR S%d, [%s, #%d]!\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_LDR_IMM_32
qualifier: size = 10, opc = 01
instruction: LDR immediate (SIMD&FP)
section: C7.3.166
page: C7-1049
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: LDR <St>, [<Xn|SP>], #<simm>
printf:   printf("LDR S%d, [%s], #%d\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_LDR_IMM_32
qualifier: size = 10, opc = 01
instruction: LDR immediate (SIMD&FP)
section: C7.3.166
page: C7-1049
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: LDR <St>, [<Xn|SP>{, #<pimm>}]
printf:   printf("LDR S%d, [%s, #%u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: SIMD_LDR_64
qualifier: opc = 01
instruction: LDR literal (SIMD&FP)
section: C7.3.167
page: C7-1052
destination operands: 
source operands: <Dt>,<St>,<label>
assembly: LDR <Dt>, <label>
printf:   printf("LDR D%d, %lld\n",packet->Rt.Value(),SignExtend(packet->imm19.Value()<<2,21));

instance-name: SIMD_LDR_128
qualifier: opc = 10
instruction: LDR literal (SIMD&FP)
section: C7.3.167
page: C7-1052
destination operands: 
source operands: <Dt>,<St>,<label>
assembly: LDR <Qt>, <label>
printf:   printf("LDR Q%d, %lld\n",packet->Rt.Value(),SignExtend(packet->imm19.Value()<<2,21));

instance-name: SIMD_LDR_32
qualifier: opc = 00
instruction: LDR literal (SIMD&FP)
section: C7.3.167
page: C7-1052
destination operands: 
source operands: <Dt>,<St>,<label>
assembly: LDR <St>, <label>
printf:   printf("LDR S%d, %lld\n",packet->Rt.Value(),SignExtend(packet->imm19.Value()<<2,21));

instance-name: SIMD_LDR_REG_8
qualifier: size = 00, opc = 01
instruction: LDR register (SIMD&FP)
section: C7.3.168
page: C7-1053
destination operands: 
source operands: <Dt>,<Ht>,<R>,<St>,<Xn|SP>,<m>
assembly: LDR <Bt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("LDR B%d, [%s, %c%s, %s %u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: SIMD_LDR_REG_64
qualifier: size = 11, opc = 01
instruction: LDR register (SIMD&FP)
section: C7.3.168
page: C7-1053
destination operands: 
source operands: <Dt>,<Ht>,<R>,<St>,<Xn|SP>,<m>
assembly: LDR <Dt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("LDR D%d, [%s, %c%s, %s %u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: SIMD_LDR_REG_16
qualifier: size = 01, opc = 01
instruction: LDR register (SIMD&FP)
section: C7.3.168
page: C7-1053
destination operands: 
source operands: <Dt>,<Ht>,<R>,<St>,<Xn|SP>,<m>
assembly: LDR <Ht>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("LDR H%d, [%s, %c%s, %s %u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: SIMD_LDR_REG_128
qualifier: size = 00, opc = 11
instruction: LDR register (SIMD&FP)
section: C7.3.168
page: C7-1053
destination operands: 
source operands: <Dt>,<Ht>,<R>,<St>,<Xn|SP>,<m>
assembly: LDR <Qt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("LDR Q%d, [%s, %c%s, %s %u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: SIMD_LDR_REG_32
qualifier: size = 10, opc = 01
instruction: LDR register (SIMD&FP)
section: C7.3.168
page: C7-1053
destination operands: 
source operands: <Dt>,<Ht>,<R>,<St>,<Xn|SP>,<m>
assembly: LDR <St>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("LDR S%d, [%s, %c%s, %s %u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: SIMD_LDUR_8
qualifier: size = 00, opc = 01
instruction: LDUR (SIMD&FP)
section: C7.3.169
page: C7-1056
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<simm>
assembly: LDUR <Bt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDUR B%d, [%s, #%d]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_LDUR_64
qualifier: size = 11, opc = 01
instruction: LDUR (SIMD&FP)
section: C7.3.169
page: C7-1056
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<simm>
assembly: LDUR <Dt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDUR D%d, [%s, #%d]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_LDUR_16
qualifier: size = 01, opc = 01
instruction: LDUR (SIMD&FP)
section: C7.3.169
page: C7-1056
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<simm>
assembly: LDUR <Ht>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDUR H%d, [%s, #%d]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_LDUR_128
qualifier: size = 00, opc = 11
instruction: LDUR (SIMD&FP)
section: C7.3.169
page: C7-1056
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<simm>
assembly: LDUR <Qt>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDUR Q%d, [%s, #%d]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_LDUR_32
qualifier: size = 10, opc = 01
instruction: LDUR (SIMD&FP)
section: C7.3.169
page: C7-1056
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<simm>
assembly: LDUR <St>, [<Xn|SP>{, #<simm>}]
printf:   printf("LDUR S%d, [%s, #%d]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_MLA_VEC_ELEM
instruction: MLA (by element)
section: C7.3.170
page: C7-1058
destination operands: <Vd>
source operands: <T>,<Ts>,<Vm>,<Vn>
assembly: MLA <Vd>.<T>, <Vn>.<T>, <Vm>.<Ts>[<index>]
printf:   printf("MLA V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_MLA_VEC
instruction: MLA (vector)
section: C7.3.171
page: C7-1060
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: MLA <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("MLA V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_MLS_VEC_ELEM
instruction: MLS (by element)
section: C7.3.172
page: C7-1062
destination operands: <Vd>
source operands: <T>,<Ts>,<Vm>,<Vn>
assembly: MLS <Vd>.<T>, <Vn>.<T>, <Vm>.<Ts>[<index>]
printf:   printf("MLS V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_MLS_VEC
instruction: MLS (vector)
section: C7.3.173
page: C7-1064
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: MLS <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("MLS V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());


'MOV (scalar)' (ALIAS IGNORED)


'MOV (element)' (ALIAS IGNORED)


'MOV (from general)' (ALIAS IGNORED)


'MOV (vector)' (ALIAS IGNORED)


'MOV (to general)' (ALIAS IGNORED)

instance-name: SIMD_MOVI_SHIFT_IMM_MOD_16
qualifier: op = 0, cmode = 10x0
notes: 16-bit shifted immediate variant 
instruction: MOVI
section: C7.3.179
page: C7-1071
destination operands: <Dd>,<Vd>
source operands: 
assembly: MOVI <Vd>.<T>, #<imm8>{, LSL #<amount>}
printf:   printf("MOVI V%d.%s, #%u, LSL #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->a.Value()<<7|packet->b.Value()<<6|packet->c.Value()<<5|packet->d.Value()<<4|packet->e.Value()<<3|packet->f.Value()<<2|packet->g.Value()<<1|packet->h.Value(),packet->imm3.Value());

instance-name: SIMD_MOVI_SHIFT_IMM_MOD_32
qualifier: op = 0, cmode = 0xx0
notes: 32-bit shifted immediate variant 
instruction: MOVI
section: C7.3.179
page: C7-1071
destination operands: <Dd>,<Vd>
source operands: 
assembly: MOVI <Vd>.<T>, #<imm8>{, LSL #<amount>}
printf:   printf("MOVI V%d.%s, #%u, LSL #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->a.Value()<<7|packet->b.Value()<<6|packet->c.Value()<<5|packet->d.Value()<<4|packet->e.Value()<<3|packet->f.Value()<<2|packet->g.Value()<<1|packet->h.Value(),packet->imm3.Value());

instance-name: SIMD_MOVI_SHIFT_IMM_ONES_MOD_32
qualifier: op = 0, cmode = 110x
notes: 32-bit shifting ones variant 
instruction: MOVI
section: C7.3.179
page: C7-1071
destination operands: <Dd>,<Vd>
source operands: 
assembly: MOVI <Vd>.<T>, #<imm8>, MSL #<amount>
printf:   printf("MOVI V%d.%s, #%u, MSL #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->a.Value()<<7|packet->b.Value()<<6|packet->c.Value()<<5|packet->d.Value()<<4|packet->e.Value()<<3|packet->f.Value()<<2|packet->g.Value()<<1|packet->h.Value(),packet->imm3.Value());

instance-name: SIMD_MOVI_IMM_MOD_64
qualifier: Q = 0, op = 1, cmode = 1110
notes: 64-bit scalar variant 
instruction: MOVI
section: C7.3.179
page: C7-1071
destination operands: <Dd>,<Vd>
source operands: 
assembly: MOVI <Dd>, #<imm>
printf:   printf("MOVI D%d, #%llu\n",packet->Rd.Value(),FP8exp(packet->a.Value(),packet->b.Value(),packet->c.Value(),packet->d.Value(),packet->e.Value(),packet->f.Value(),packet->g.Value(),packet->h.Value()));

instance-name: SIMD_MOVI_IMM_MOD_VEC_64
qualifier: Q = 1, op = 1, cmode = 1110
notes: 64-bit vector variant 
instruction: MOVI
section: C7.3.179
page: C7-1071
destination operands: <Dd>,<Vd>
source operands: 
assembly: MOVI <Vd>.2D, #<imm>
printf:   printf("MOVI V%d.2D, #%llu\n",packet->Rd.Value(),FP8exp(packet->a.Value(),packet->b.Value(),packet->c.Value(),packet->d.Value(),packet->e.Value(),packet->f.Value(),packet->g.Value(),packet->h.Value()));

instance-name: SIMD_MOVI_IMM_MOD_8
qualifier: op = 0, cmode = 1110
notes: 8-bit variant 
instruction: MOVI
section: C7.3.179
page: C7-1071
destination operands: <Dd>,<Vd>
source operands: 
assembly: MOVI <Vd>.<T>, #<imm8>{, LSL #0}
printf:   printf("MOVI V%d.%s, #%u, LSL #0\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->a.Value()<<7|packet->b.Value()<<6|packet->c.Value()<<5|packet->d.Value()<<4|packet->e.Value()<<3|packet->f.Value()<<2|packet->g.Value()<<1|packet->h.Value());

instance-name: SIMD_MUL_VEC_ELEM
instruction: MUL (by element)
section: C7.3.180
page: C7-1073
destination operands: <Vd>
source operands: <T>,<Ts>,<Vm>,<Vn>
assembly: MUL <Vd>.<T>, <Vn>.<T>, <Vm>.<Ts>[<index>]
printf:   printf("MUL V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_MUL_VEC
instruction: MUL (vector)
section: C7.3.181
page: C7-1075
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: MUL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("MUL V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());


'MVN' (ALIAS IGNORED)

instance-name: SIMD_MVNI_SHIFT_IMM_MOD_16
qualifier: cmode = 10x0
notes: 16-bit shifted immediate variant 
instruction: MVNI
section: C7.3.183
page: C7-1078
destination operands: <Vd>
source operands: <T>,<imm8>
assembly: MVNI <Vd>.<T>, #<imm8>{, LSL #<amount>}
printf:   printf("MVNI V%d.%s, #%d, LSL #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->imm8.Value(),packet->imm3.Value());

instance-name: SIMD_MVNI_SHIFT_IMM_MOD_32
qualifier: cmode = 0xx0
notes: 32-bit shifted immediate variant 
instruction: MVNI
section: C7.3.183
page: C7-1078
destination operands: <Vd>
source operands: <T>,<imm8>
assembly: MVNI <Vd>.<T>, #<imm8>{, LSL #<amount>}
printf:   printf("MVNI V%d.%s, #%d, LSL #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->imm8.Value(),packet->imm3.Value());

instance-name: SIMD_MVNI_SHIFT_IMM_ONES_MOD_32
qualifier: cmode = 110x
notes: 32-bit shifting ones variant 
instruction: MVNI
section: C7.3.183
page: C7-1078
destination operands: <Vd>
source operands: <T>,<imm8>
assembly: MVNI <Vd>.<T>, #<imm8>, MSL #<amount>
printf:   printf("MVNI V%d.%s, #%d, MSL #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->imm8.Value(),packet->imm3.Value());

instance-name: SIMD_NEG_SCALAR_VEC
instruction: NEG (vector)
section: C7.3.184
page: C7-1080
destination operands: <Vd>
source operands: <T>,<V>
assembly: NEG <V><d>, <V><n>
printf:   printf("NEG %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: SIMD_NEG_SCALAR_VEC
instruction: NEG (vector)
section: C7.3.184
page: C7-1080
destination operands: <Vd>
source operands: <T>,<V>
assembly: NEG <Vd>.<T>, <Vn>.<T>
printf:   printf("NEG V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_NOT_VEC
instruction: NOT
section: C7.3.185
page: C7-1082
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: NOT <Vd>.<T>, <Vn>.<T>
printf:   printf("NOT V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_ORN_VEC
instruction: ORN (vector)
section: C7.3.186
page: C7-1083
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: ORN <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("ORN V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: ORR_IMM_VEC_32
qualifier: cmode = 0xx1
instruction: ORR (vector, immediate)
section: C7.3.187
page: C7-1084
destination operands: 
source operands: <T>,<Vd>,<imm8>
assembly: ORR <Vd>.<T>, #<imm8>{, LSL #<amount>}
printf:   printf("ORR V%d.%s, #%d, LSL #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->imm8.Value(),packet->imm3.Value());

instance-name: ORR_IMM_VEC_16
qualifier: cmode = 10x1
instruction: ORR (vector, immediate)
section: C7.3.187
page: C7-1084
destination operands: 
source operands: <T>,<Vd>,<imm8>
assembly: ORR <Vd>.<T>, #<imm8>{, LSL #<amount>}   
printf:   printf("ORR V%d.%s, #%d, LSL #%u   \n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->imm8.Value(),packet->imm3.Value());

instance-name: SIMD_ORR_REG_VEC
instruction: ORR (vector, register)
section: C7.3.188
page: C7-1086
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: ORR <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("ORR V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_PMUL_VEC
instruction: PMUL
section: C7.3.189
page: C7-1087
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: PMUL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("PMUL V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_PMULL_VEC
instance-num: 1
instruction: PMULL
section: C7.3.190
page: C7-1088
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: PMULL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==0)
printf:   printf("PMULL V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_PMULL_VEC
instance-num: 2
instruction: PMULL2
section: C7.3.190
page: C7-1088
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: PMULL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==1)
printf:   printf("PMULL2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_RADDHN_VEC
instance-num: 1
instruction: RADDHN
section: C7.3.191
page: C7-1090
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: RADDHN <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta> (Q==0)
printf:   printf("RADDHN V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rm.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_RADDHN_VEC
instance-num: 2
instruction: RADDHN2
section: C7.3.191
page: C7-1090
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: RADDHN2 <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta> (Q==1)
printf:   printf("RADDHN2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rm.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_RBIT_VEC
instruction: RBIT (vector)
section: C7.3.192
page: C7-1092
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: RBIT <Vd>.<T>, <Vn>.<T>
printf:   printf("RBIT V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_REV16_VEC
instruction: REV16 (vector)
section: C7.3.193
page: C7-1093
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: REV16 <Vd>.<T>, <Vn>.<T>
printf:   printf("REV16 V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_REV32_VEC
instruction: REV32 (vector)
section: C7.3.194
page: C7-1095
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: REV32 <Vd>.<T>, <Vn>.<T>
printf:   printf("REV32 V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_REV64_VEC
instruction: REV64
section: C7.3.195
page: C7-1097
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: REV64 <Vd>.<T>, <Vn>.<T>
printf:   printf("REV64 V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_RSHRN_VEC
instance-num: 1
instruction: RSHRN
section: C7.3.196
page: C7-1099
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: RSHRN{2} <Vd>.<Tb>, <Vn>.<Ta>, #<shift>
printf:   printf("RSHRN2 V%d.%s, V%d.%s, #%s\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),simd_rshift1(packet->immh.Value(),packet->immb.Value()).c_str());

instance-name: SIMD_RSHRN_VEC
instance-num: 2
instruction: RSHRN2
section: C7.3.196
page: C7-1099
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: RSHRN{2} <Vd>.<Tb>, <Vn>.<Ta>, #<shift>
printf:   printf("RSHRN2 V%d.%s, V%d.%s, #%s\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),simd_rshift1(packet->immh.Value(),packet->immb.Value()).c_str());

instance-name: SIMD_RSUBHN_VEC
instance-num: 1
instruction: RSUBHN
section: C7.3.197
page: C7-1101
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: RSUBHN <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta> (Q==0)
printf:   printf("RSUBHN V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rm.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_RSUBHN_VEC
instance-num: 2
instruction: RSUBHN2
section: C7.3.197
page: C7-1101
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: RSUBHN2 <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta> (Q==1)
printf:   printf("RSUBHN2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rm.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_SABA_VEC
instruction: SABA
section: C7.3.198
page: C7-1103
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: SABA <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SABA V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SABAL_VEC
instance-num: 1
instruction: SABAL
section: C7.3.199
page: C7-1104
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SABAL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==0)
printf:   printf("SABAL V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SABAL_VEC
instance-num: 2
instruction: SABAL2
section: C7.3.199
page: C7-1104
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SABAL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==1)
printf:   printf("SABAL2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SABD_VEC
instruction: SABD
section: C7.3.200
page: C7-1106
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: SABD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SABD V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SABDL_VEC
instance-num: 1
instruction: SABDL
section: C7.3.201
page: C7-1107
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SABDL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==0)
printf:   printf("SABDL V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SABDL_VEC
instance-num: 2
instruction: SABDL2
section: C7.3.201
page: C7-1107
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SABDL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==1)
printf:   printf("SABDL2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SADALP_VEC
instruction: SADALP
section: C7.3.202
page: C7-1109
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: SADALP <Vd>.<Ta>, <Vn>.<Tb>
printf:   printf("SADALP V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SADDL_VEC
instance-num: 1
instruction: SADDL
section: C7.3.203
page: C7-1111
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SADDL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==0)
printf:   printf("SADDL V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SADDL_VEC
instance-num: 2
instruction: SADDL2
section: C7.3.203
page: C7-1111
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SADDL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==1)
printf:   printf("SADDL2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SADDLP_VEC
instruction: SADDLP
section: C7.3.204
page: C7-1113
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: SADDLP <Vd>.<Ta>, <Vn>.<Tb>
printf:   printf("SADDLP V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SADDLV_SCALAR
instruction: SADDLV
section: C7.3.205
page: C7-1115
destination operands: <V>
source operands: <T>,<Vn>
assembly: SADDLV <V><d>, <Vn>.<T>
printf:   printf("SADDLV %s%u, V%d.%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SADDW_VEC
instance-num: 1
instruction: SADDW
section: C7.3.206
page: C7-1116
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SADDW <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb> (Q==0)
printf:   printf("SADDW V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SADDW_VEC
instance-num: 2
instruction: SADDW2
section: C7.3.206
page: C7-1116
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SADDW2 <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb> (Q==1)
printf:   printf("SADDW2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SCVTF_SCALAR_VEC_FIXED
instruction: SCVTF (vector, fixed-point)
section: C7.3.207
page: C7-1118
destination operands: 
source operands: <V>
assembly: SCVTF <V><d>, <V><n>, #<fbits>
printf:   printf("SCVTF %s%u, %s%u, #%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: SIMD_SCVTF_SCALAR_VEC_FIXED
instruction: SCVTF (vector, fixed-point)
section: C7.3.207
page: C7-1118
destination operands: 
source operands: <V>
assembly: SCVTF <Vd>.<T>, <Vn>.<T>, #<fbits>
printf:   printf("SCVTF V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: SIMD_SCVTF_SCALAR_VEC
instruction: SCVTF (vector, integer)
section: C7.3.208
page: C7-1120
destination operands: <Vd>
source operands: <T>,<V>
assembly: SCVTF <V><d>, <V><n>
printf:   printf("SCVTF %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: SIMD_SCVTF_SCALAR_VEC
instruction: SCVTF (vector, integer)
section: C7.3.208
page: C7-1120
destination operands: <Vd>
source operands: <T>,<V>
assembly: SCVTF <Vd>.<T>, <Vn>.<T>
printf:   printf("SCVTF V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SCVTF_SINGLE_FIXED
instruction: SCVTF (scalar, fixed-point)
section: C7.3.209
page: C7-1122
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: SCVTF <Sd>, <Wn>, #<fbits>
printf:   printf("SCVTF S%d, %s, #%u\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),true).c_str(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: SIMD_SCVTF_FIXED
instruction: SCVTF (scalar, fixed-point)
section: C7.3.209
page: C7-1122
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: SCVTF <Dd>, <Wn>, #<fbits>
printf:   printf("SCVTF D%d, %s, #%u\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),true).c_str(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: SIMD_SCVTF_SINGLE_FIXED
instruction: SCVTF (scalar, fixed-point)
section: C7.3.209
page: C7-1122
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: SCVTF <Sd>, <Xn>, #<fbits>
printf:   printf("SCVTF S%d, %s, #%u\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),false).c_str(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: SIMD_SCVTF_FIXED
instruction: SCVTF (scalar, fixed-point)
section: C7.3.209
page: C7-1122
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: SCVTF <Dd>, <Xn>, #<fbits>
printf:   printf("SCVTF D%d, %s, #%u\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),false).c_str(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: SIMD_SCVTF_FIXED
instruction: SCVTF (scalar, fixed-point)
section: C7.3.209
page: C7-1122
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: CheckFPAdvSIMDEnabled64();
printf:   printf("CheckFPAdvSIMDEnabled64();\n");

instance-name: SIMD_SCVTF_SINGLE
instruction: SCVTF (scalar, integer)
section: C7.3.210
page: C7-1124
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: SCVTF <Sd>, <Wn>
printf:   printf("SCVTF S%d, %s\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),true).c_str());

instance-name: SIMD_SCVTF
instruction: SCVTF (scalar, integer)
section: C7.3.210
page: C7-1124
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: SCVTF <Dd>, <Wn>
printf:   printf("SCVTF D%d, %s\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),true).c_str());

instance-name: SIMD_SCVTF_SINGLE
instruction: SCVTF (scalar, integer)
section: C7.3.210
page: C7-1124
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: SCVTF <Sd>, <Xn>
printf:   printf("SCVTF S%d, %s\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),false).c_str());

instance-name: SIMD_SCVTF
instruction: SCVTF (scalar, integer)
section: C7.3.210
page: C7-1124
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: SCVTF <Dd>, <Xn>
printf:   printf("SCVTF D%d, %s\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),false).c_str());

instance-name: SIMD_SHA1C_SCALAR
instruction: SHA1C
section: C7.3.211
page: C7-1126
destination operands: 
source operands: <Sn>,<Vm>
assembly: SHA1C <Qd>, <Sn>, <Vm>.4S
printf:   printf("SHA1C Q%d, S%d, V%d.4S\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: SIMD_SHA1H_SCALAR
instruction: SHA1H
section: C7.3.212
page: C7-1127
destination operands: <Sd>
source operands: <Sn>
assembly: SHA1H <Sd>, <Sn>
printf:   printf("SHA1H S%d, S%d\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: SIMD_SHA1M_SCALAR
instruction: SHA1M
section: C7.3.213
page: C7-1128
destination operands: 
source operands: <Sn>,<Vm>
assembly: SHA1M <Qd>, <Sn>, <Vm>.4S
printf:   printf("SHA1M Q%d, S%d, V%d.4S\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: SIMD_SHA1P_SCALAR
instruction: SHA1P
section: C7.3.214
page: C7-1129
destination operands: 
source operands: <Sn>,<Vm>
assembly: SHA1P <Qd>, <Sn>, <Vm>.4S
printf:   printf("SHA1P Q%d, S%d, V%d.4S\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: SIMD_SHA1SU0_SCALAR
instruction: SHA1SU0
section: C7.3.215
page: C7-1130
destination operands: <Vd>
source operands: <Vm>,<Vn>
assembly: SHA1SU0 <Vd>.4S, <Vn>.4S, <Vm>.4S
printf:   printf("SHA1SU0 V%d.4S, V%d.4S, V%d.4S\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: SIMD_SHA1SU1_SCALAR
instruction: SHA1SU1
section: C7.3.216
page: C7-1131
destination operands: <Vd>
source operands: <Vn>
assembly: SHA1SU1 <Vd>.4S, <Vn>.4S
printf:   printf("SHA1SU1 V%d.4S, V%d.4S\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: SIMD_SHA256H2_SCALAR
instruction: SHA256H2
section: C7.3.217
page: C7-1132
destination operands: 
source operands: <Vm>
assembly: SHA256H2 <Qd>, <Qn>, <Vm>.4S
printf:   printf("SHA256H2 Q%d, Q%d, V%d.4S\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: SIMD_SHA256H_SCALAR
instruction: SHA256H
section: C7.3.218
page: C7-1133
destination operands: 
source operands: <Vm>
assembly: SHA256H <Qd>, <Qn>, <Vm>.4S
printf:   printf("SHA256H Q%d, Q%d, V%d.4S\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: SIMD_SHA256SU0_SCALAR
instruction: SHA256SU0
section: C7.3.219
page: C7-1134
destination operands: <Vd>
source operands: <Vn>
assembly: SHA256SU0 <Vd>.4S, <Vn>.4S
printf:   printf("SHA256SU0 V%d.4S, V%d.4S\n",packet->Rd.Value(),packet->Rn.Value());

instance-name: SIMD_SHA256SU1_SCALAR
instruction: SHA256SU1
section: C7.3.220
page: C7-1135
destination operands: <Vd>
source operands: <Vm>,<Vn>
assembly: SHA256SU1 <Vd>.4S, <Vn>.4S, <Vm>.4S
printf:   printf("SHA256SU1 V%d.4S, V%d.4S, V%d.4S\n",packet->Rd.Value(),packet->Rn.Value(),packet->Rm.Value());

instance-name: SIMD_SHADD_VEC
instruction: SHADD
section: C7.3.221
page: C7-1136
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: SHADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SHADD V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SHL_SCALAR
instruction: SHL
section: C7.3.222
page: C7-1137
destination operands: <Vd>
source operands: <T>,<V>
assembly: SHL <V><d>, <V><n>, #<shift>
printf:   printf("SHL %s%u, %s%u, #%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simd_lshift_scalar(packet->immh.Value(),packet->immb.Value()).c_str());

instance-name: SIMD_SHL_SCALAR_VEC
instruction: SHL
section: C7.3.222
page: C7-1137
destination operands: <Vd>
source operands: <T>,<V>
assembly: SHL <Vd>.<T>, <Vn>.<T>, #<shift>
printf:   printf("SHL V%d.%s, V%d.%s, #%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),simd_lshift_vector(packet->immh.Value(),packet->immb.Value()).c_str());

instance-name: SIMD_SHLL_VEC
instance-num: 1
instruction: SHLL
section: C7.3.223
page: C7-1139
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: SHLL{2} <Vd>.<Ta>, <Vn>.<Tb>, #<shift>
printf:   printf("SHLL2 V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),(packet->immh.Value()<<3|packet->immb.Value()) - (8<<HighestSetBit(packet->immh.Value(),4)));

instance-name: SIMD_SHLL_VEC
instance-num: 2
instruction: SHLL2
section: C7.3.223
page: C7-1139
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: SHLL{2} <Vd>.<Ta>, <Vn>.<Tb>, #<shift>
printf:   printf("SHLL2 V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),(packet->immh.Value()<<3|packet->immb.Value()) - (8<<HighestSetBit(packet->immh.Value(),4)));

instance-name: SIMD_SHRN_VEC
instance-num: 1
instruction: SHRN
section: C7.3.224
page: C7-1141
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: SHRN{2} <Vd>.<Tb>, <Vn>.<Ta>, #<shift>
printf:   printf("SHRN2 V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),(packet->immh.Value()<<3|packet->immb.Value()) - (8<<HighestSetBit(packet->immh.Value(),4)));

instance-name: SIMD_SHRN_VEC
instance-num: 2
instruction: SHRN2
section: C7.3.224
page: C7-1141
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: SHRN{2} <Vd>.<Tb>, <Vn>.<Ta>, #<shift>
printf:   printf("SHRN2 V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),(packet->immh.Value()<<3|packet->immb.Value()) - (8<<HighestSetBit(packet->immh.Value(),4)));

instance-name: SIMD_SHSUB_VEC
instruction: SHSUB
section: C7.3.225
page: C7-1143
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: SHSUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SHSUB V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SLI_SCALAR
instruction: SLI
section: C7.3.226
page: C7-1144
destination operands: <Vd>
source operands: <T>,<V>
assembly: SLI <V><d>, <V><n>, #<shift>
printf:   printf("SLI %s%u, %s%u, #%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),(packet->immh.Value()<<3|packet->immb.Value()) - (8<<3));

instance-name: SIMD_SLI_SCALAR_VEC
instruction: SLI
section: C7.3.226
page: C7-1144
destination operands: <Vd>
source operands: <T>,<V>
assembly: SLI <Vd>.<T>, <Vn>.<T>, #<shift>
printf:   printf("SLI V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->immh.Value()<<3|packet->immb.Value()) - (8<<HighestSetBit(packet->immh.Value(),4)));

instance-name: SIMD_SMAX_VEC
instruction: SMAX
section: C7.3.227
page: C7-1146
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: SMAX <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SMAX V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SMAXP_VEC
instruction: SMAXP
section: C7.3.228
page: C7-1147
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: SMAXP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SMAXP V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SMAXV_SCALAR
instruction: SMAXV
section: C7.3.229
page: C7-1148
destination operands: <V>
source operands: <T>,<Vn>
assembly: SMAXV <V><d>, <Vn>.<T>
printf:   printf("SMAXV %s%u, V%d.%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SMIN_VEC
instruction: SMIN
section: C7.3.230
page: C7-1150
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: SMIN <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SMIN V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SMINP_VEC
instruction: SMINP
section: C7.3.231
page: C7-1151
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: SMINP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SMINP V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SMINV_SCALAR
instruction: SMINV
section: C7.3.232
page: C7-1152
destination operands: <V>
source operands: <T>,<Vn>
assembly: SMINV <V><d>, <Vn>.<T>
printf:   printf("SMINV %s%u, V%d.%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SMLAL_VEC_ELEM
instance-num: 1
instruction: SMLAL
section: C7.3.233
page: C7-1154
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: SMLAL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("SMLAL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SMLAL_VEC_ELEM
instance-num: 2
instruction: SMLAL2 (by element)
section: C7.3.233
page: C7-1154
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: SMLAL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("SMLAL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SMLAL_VEC
instance-num: 1
instruction: SMLAL
section: C7.3.234
page: C7-1156
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SMLAL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==0)
printf:   printf("SMLAL V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SMLAL_VEC
instance-num: 2
instruction: SMLAL2 (vector)
section: C7.3.234
page: C7-1156
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SMLAL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==1)
printf:   printf("SMLAL2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SMLSL_VEC_ELEM
instance-num: 1
instruction: SMLSL
section: C7.3.235
page: C7-1158
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: SMLSL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("SMLSL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SMLSL_VEC_ELEM
instance-num: 2
instruction: SMLSL2 (by element)
section: C7.3.235
page: C7-1158
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: SMLSL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("SMLSL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SMLSL_VEC
instance-num: 1
instruction: SMLSL
section: C7.3.236
page: C7-1160
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SMLSL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==0)
printf:   printf("SMLSL V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SMLSL_VEC
instance-num: 2
instruction: SMLSL2 (vector)
section: C7.3.236
page: C7-1160
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SMLSL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==1)
printf:   printf("SMLSL2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SMOV_IMM_MOD_32
qualifier: Q = 0
notes: 32-bit variant 
instruction: SMOV
section: C7.3.237
page: C7-1162
destination operands: <Wd>,<Xd>
source operands: <Ts>,<Vn>
assembly: SMOV <Wd>, <Vn>.<Ts>[<index>]
printf:   printf("SMOV %s, V%d.%s[%s]\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex2(packet->imm5.Value(),packet->imm4.Value()).c_str());

instance-name: SIMD_SMOV_IMM_MOD_64
qualifier: Q = 1
notes: 64-bit variant 
instruction: SMOV
section: C7.3.237
page: C7-1162
destination operands: <Wd>,<Xd>
source operands: <Ts>,<Vn>
assembly: SMOV <Xd>, <Vn>.<Ts>[<index>]
printf:   printf("SMOV %s, V%d.%s[%s]\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex(packet->imm5.Value()).c_str());

instance-name: SIMD_SMULL_VEC_ELEM
instance-num: 1
instruction: SMULL
section: C7.3.238
page: C7-1164
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: SMULL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("SMULL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SMULL_VEC_ELEM
instance-num: 2
instruction: SMULL2 (by element)
section: C7.3.238
page: C7-1164
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: SMULL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("SMULL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SMULL_VEC
instance-num: 1
instruction: SMULL
section: C7.3.239
page: C7-1166
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SMULL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==0)
printf:   printf("SMULL V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SMULL_VEC
instance-num: 2
instruction: SMULL2 (vector)
section: C7.3.239
page: C7-1166
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SMULL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==1)
printf:   printf("SMULL2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SQABS_SCALAR
instruction: SQABS
section: C7.3.240
page: C7-1168
destination operands: <Vd>
source operands: <V>
assembly: SQABS <V><d>, <V><n>
printf:   printf("SQABS %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: SIMD_SQABS_SCALAR_VEC
instruction: SQABS
section: C7.3.240
page: C7-1168
destination operands: <Vd>
source operands: <V>
assembly: SQABS <Vd>.<T>, <Vn>.<T>
printf:   printf("SQABS V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SQADD_SCALAR
instruction: SQADD
section: C7.3.241
page: C7-1170
destination operands: <Vd>
source operands: <V>,<m>
assembly: SQADD <V><d>, <V><n>, <V><m>
printf:   printf("SQADD %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_SQADD_SCALAR_VEC
instruction: SQADD
section: C7.3.241
page: C7-1170
destination operands: <Vd>
source operands: <V>,<m>
assembly: SQADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SQADD V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SQDMLAL_SCALAR_ELEM
instance-num: 1
instruction: SQDMLAL
section: C7.3.242
page: C7-1172
destination operands: <Va>,<Vd>
source operands: <Ta>,<Tb>,<Ts>,<Vb>,<Vm>,<Vn>
assembly: SQDMLAL <Va><d>, <Vb><n>, <Vm>.<Ts>[<index>]
printf:   printf("SQDMLAL %s%u, %s%u, V%d.%s[%s]\n",(packet->size.Value()==1) ? "D" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "S" : "?",packet->Rn.Value(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SQDMLAL_SCALAR_VEC_ELEM
instance-num: 1
instruction: SQDMLAL
section: C7.3.242
page: C7-1172
destination operands: <Va>,<Vd>
source operands: <Ta>,<Tb>,<Ts>,<Vb>,<Vm>,<Vn>
assembly: SQDMLAL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("SQDMLAL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SQDMLAL_SCALAR_ELEM
instance-num: 2
instruction: SQDMLAL2 (by element)
section: C7.3.242
page: C7-1172
destination operands: <Va>,<Vd>
source operands: <Ta>,<Tb>,<Ts>,<Vb>,<Vm>,<Vn>
assembly: SQDMLAL <Va><d>, <Vb><n>, <Vm>.<Ts>[<index>]
printf:   printf("SQDMLAL %s%u, %s%u, V%d.%s[%s]\n",(packet->size.Value()==1) ? "D" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "S" : "?",packet->Rn.Value(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SQDMLAL_SCALAR_VEC_ELEM
instance-num: 2
instruction: SQDMLAL2 (by element)
section: C7.3.242
page: C7-1172
destination operands: <Va>,<Vd>
source operands: <Ta>,<Tb>,<Ts>,<Vb>,<Vm>,<Vn>
assembly: SQDMLAL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("SQDMLAL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SQDMLAL_SCALAR_VEC
instance-num: 1
instruction: SQDMLAL
section: C7.3.243
page: C7-1175
destination operands: <Vd>
source operands: <Ta>
assembly: SQDMLAL <Va><d>, <Vb><n>, <Vb><m>
printf:   printf("SQDMLAL %s%u, %s%u, %s%s\n",(packet->size.Value()==1) ? "D" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "S" : "?",packet->Rn.Value(),(packet->size.Value()==1) ? "S" : "?",ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_SQDMLAL_SCALAR_VEC
instance-num: 1
instruction: SQDMLAL
section: C7.3.243
page: C7-1175
destination operands: <Vd>
source operands: <Ta>
assembly: SQDMLAL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>
printf:   printf("SQDMLAL2 V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SQDMLAL_SCALAR_VEC
instance-num: 2
instruction: SQDMLAL2 (vector)
section: C7.3.243
page: C7-1175
destination operands: <Vd>
source operands: <Ta>
assembly: SQDMLAL <Va><d>, <Vb><n>, <Vb><m>
printf:   printf("SQDMLAL %s%u, %s%u, %s%s\n",(packet->size.Value()==1) ? "D" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "S" : "?",packet->Rn.Value(),(packet->size.Value()==1) ? "S" : "?",ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_SQDMLAL_SCALAR_VEC
instance-num: 2
instruction: SQDMLAL2 (vector)
section: C7.3.243
page: C7-1175
destination operands: <Vd>
source operands: <Ta>
assembly: SQDMLAL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>
printf:   printf("SQDMLAL2 V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SQDMLSL_SCALAR_ELEM
instance-num: 1
instruction: SQDMLSL
section: C7.3.244
page: C7-1178
destination operands: <Va>,<Vd>
source operands: <Ta>,<Tb>,<Ts>,<Vb>,<Vm>,<Vn>
assembly: SQDMLSL <Va><d>, <Vb><n>, <Vm>.<Ts>[<index>]
printf:   printf("SQDMLSL %s%u, %s%u, V%d.%s[%s]\n",(packet->size.Value()==1) ? "D" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "S" : "?",packet->Rn.Value(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SQDMLSL_SCALAR_VEC_ELEM
instance-num: 1
instruction: SQDMLSL
section: C7.3.244
page: C7-1178
destination operands: <Va>,<Vd>
source operands: <Ta>,<Tb>,<Ts>,<Vb>,<Vm>,<Vn>
assembly: SQDMLSL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("SQDMLSL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SQDMLSL_SCALAR_ELEM
instance-num: 2
instruction: SQDMLSL2 (by element)
section: C7.3.244
page: C7-1178
destination operands: <Va>,<Vd>
source operands: <Ta>,<Tb>,<Ts>,<Vb>,<Vm>,<Vn>
assembly: SQDMLSL <Va><d>, <Vb><n>, <Vm>.<Ts>[<index>]
printf:   printf("SQDMLSL %s%u, %s%u, V%d.%s[%s]\n",(packet->size.Value()==1) ? "D" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "S" : "?",packet->Rn.Value(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SQDMLSL_SCALAR_VEC_ELEM
instance-num: 2
instruction: SQDMLSL2 (by element)
section: C7.3.244
page: C7-1178
destination operands: <Va>,<Vd>
source operands: <Ta>,<Tb>,<Ts>,<Vb>,<Vm>,<Vn>
assembly: SQDMLSL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("SQDMLSL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SQDMLSL_SCALAR_VEC
instance-num: 1
instruction: SQDMLSL
section: C7.3.245
page: C7-1181
destination operands: <Vd>
source operands: <Ta>
assembly: SQDMLSL <Va><d>, <Vb><n>, <Vb><m>
printf:   printf("SQDMLSL %s%u, %s%u, %s%s\n",(packet->size.Value()==1) ? "D" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "S" : "?",packet->Rn.Value(),(packet->size.Value()==1) ? "S" : "?",ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_SQDMLSL_SCALAR_VEC
instance-num: 1
instruction: SQDMLSL
section: C7.3.245
page: C7-1181
destination operands: <Vd>
source operands: <Ta>
assembly: SQDMLSL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>
printf:   printf("SQDMLSL2 V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SQDMLSL_SCALAR_VEC
instance-num: 2
instruction: SQDMLSL2 (vector)
section: C7.3.245
page: C7-1181
destination operands: <Vd>
source operands: <Ta>
assembly: SQDMLSL <Va><d>, <Vb><n>, <Vb><m>
printf:   printf("SQDMLSL %s%u, %s%u, %s%s\n",(packet->size.Value()==1) ? "D" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "S" : "?",packet->Rn.Value(),(packet->size.Value()==1) ? "S" : "?",ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_SQDMLSL_SCALAR_VEC
instance-num: 2
instruction: SQDMLSL2 (vector)
section: C7.3.245
page: C7-1181
destination operands: <Vd>
source operands: <Ta>
assembly: SQDMLSL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>
printf:   printf("SQDMLSL2 V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SQDMULH_SCALAR_ELEM
instruction: SQDMULH (by element)
section: C7.3.246
page: C7-1184
destination operands: <Vd>
source operands: <T>,<Ts>,<V>,<Vm>,<Vn>
assembly: SQDMULH <V><d>, <V><n>, <Vm>.<Ts>[<index>]
printf:   printf("SQDMULH %s%u, %s%u, V%d.%s[%s]\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SQDMULH_SCALAR_VEC_ELEM
instruction: SQDMULH (by element)
section: C7.3.246
page: C7-1184
destination operands: <Vd>
source operands: <T>,<Ts>,<V>,<Vm>,<Vn>
assembly: SQDMULH <Vd>.<T>, <Vn>.<T>, <Vm>.<Ts>[<index>]
printf:   printf("SQDMULH V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SQDMULH_SCALAR_VEC
instruction: SQDMULH (vector)
section: C7.3.247
page: C7-1187
destination operands: <Vd>
source operands: <V>,<m>
assembly: SQDMULH <V><d>, <V><n>, <V><m>
printf:   printf("SQDMULH %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_SQDMULH_SCALAR_VEC
instruction: SQDMULH (vector)
section: C7.3.247
page: C7-1187
destination operands: <Vd>
source operands: <V>,<m>
assembly: SQDMULH <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SQDMULH V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SQDMULL_SCALAR_ELEM
instance-num: 1
instruction: SQDMULL
section: C7.3.248
page: C7-1189
destination operands: <Va>,<Vd>
source operands: <Ta>,<Tb>,<Ts>,<Vb>,<Vm>,<Vn>
assembly: SQDMULL <Va><d>, <Vb><n>, <Vm>.<Ts>[<index>]
printf:   printf("SQDMULL %s%u, %s%u, V%d.%s[%s]\n",(packet->size.Value()==1) ? "D" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "S" : "?",packet->Rn.Value(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SQDMULL_SCALAR_VEC_ELEM
instance-num: 1
instruction: SQDMULL
section: C7.3.248
page: C7-1189
destination operands: <Va>,<Vd>
source operands: <Ta>,<Tb>,<Ts>,<Vb>,<Vm>,<Vn>
assembly: SQDMULL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("SQDMULL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SQDMULL_SCALAR_ELEM
instance-num: 2
instruction: SQDMULL2 (by element)
section: C7.3.248
page: C7-1189
destination operands: <Va>,<Vd>
source operands: <Ta>,<Tb>,<Ts>,<Vb>,<Vm>,<Vn>
assembly: SQDMULL <Va><d>, <Vb><n>, <Vm>.<Ts>[<index>]
printf:   printf("SQDMULL %s%u, %s%u, V%d.%s[%s]\n",(packet->size.Value()==1) ? "D" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "S" : "?",packet->Rn.Value(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SQDMULL_SCALAR_VEC_ELEM
instance-num: 2
instruction: SQDMULL2 (by element)
section: C7.3.248
page: C7-1189
destination operands: <Va>,<Vd>
source operands: <Ta>,<Tb>,<Ts>,<Vb>,<Vm>,<Vn>
assembly: SQDMULL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("SQDMULL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SQDMULL_SCALAR_VEC
instance-num: 1
instruction: SQDMULL
section: C7.3.249
page: C7-1192
destination operands: <Vd>
source operands: <Ta>
assembly: SQDMULL <Va><d>, <Vb><n>, <Vb><m>
printf:   printf("SQDMULL %s%u, %s%u, %s%s\n",(packet->size.Value()==1) ? "D" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "S" : "?",packet->Rn.Value(),(packet->size.Value()==1) ? "S" : "?",ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_SQDMULL_SCALAR_VEC
instance-num: 1
instruction: SQDMULL
section: C7.3.249
page: C7-1192
destination operands: <Vd>
source operands: <Ta>
assembly: SQDMULL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>
printf:   printf("SQDMULL2 V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SQDMULL_SCALAR_VEC
instance-num: 2
instruction: SQDMULL2 (vector)
section: C7.3.249
page: C7-1192
destination operands: <Vd>
source operands: <Ta>
assembly: SQDMULL <Va><d>, <Vb><n>, <Vb><m>
printf:   printf("SQDMULL %s%u, %s%u, %s%s\n",(packet->size.Value()==1) ? "D" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "S" : "?",packet->Rn.Value(),(packet->size.Value()==1) ? "S" : "?",ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_SQDMULL_SCALAR_VEC
instance-num: 2
instruction: SQDMULL2 (vector)
section: C7.3.249
page: C7-1192
destination operands: <Vd>
source operands: <Ta>
assembly: SQDMULL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>
printf:   printf("SQDMULL2 V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SQNEG_SCALAR
instruction: SQNEG
section: C7.3.250
page: C7-1194
destination operands: <Vd>
source operands: <V>
assembly: SQNEG <V><d>, <V><n>
printf:   printf("SQNEG %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: SIMD_SQNEG_SCALAR_VEC
instruction: SQNEG
section: C7.3.250
page: C7-1194
destination operands: <Vd>
source operands: <V>
assembly: SQNEG <Vd>.<T>, <Vn>.<T>
printf:   printf("SQNEG V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SQRDMULH_SCALAR_ELEM
instruction: SQRDMULH (by element)
section: C7.3.251
page: C7-1196
destination operands: <Vd>
source operands: <T>,<Ts>,<V>,<Vm>,<Vn>
assembly: SQRDMULH <V><d>, <V><n>, <Vm>.<Ts>[<index>]
printf:   printf("SQRDMULH %s%u, %s%u, V%d.%s[%s]\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SQRDMULH_SCALAR_VEC_ELEM
instruction: SQRDMULH (by element)
section: C7.3.251
page: C7-1196
destination operands: <Vd>
source operands: <T>,<Ts>,<V>,<Vm>,<Vn>
assembly: SQRDMULH <Vd>.<T>, <Vn>.<T>, <Vm>.<Ts>[<index>]
printf:   printf("SQRDMULH V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_SQRDMULH_SCALAR_VEC
instruction: SQRDMULH (vector)
section: C7.3.252
page: C7-1199
destination operands: <Vd>
source operands: <V>,<m>
assembly: SQRDMULH <V><d>, <V><n>, <V><m>
printf:   printf("SQRDMULH %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_SQRDMULH_SCALAR_VEC
instruction: SQRDMULH (vector)
section: C7.3.252
page: C7-1199
destination operands: <Vd>
source operands: <V>,<m>
assembly: SQRDMULH <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SQRDMULH V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SQRSHL_SCALAR
instruction: SQRSHL
section: C7.3.253
page: C7-1201
destination operands: 
source operands: <V>,<m>
assembly: SQRSHL <V><d>, <V><n>, <V><m>
printf:   printf("SQRSHL %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_SQRSHL_SCALAR_VEC
instruction: SQRSHL
section: C7.3.253
page: C7-1201
destination operands: 
source operands: <V>,<m>
assembly: SQRSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SQRSHL V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SQRSHRN_SCALAR
instance-num: 1
instruction: SQRSHRN
section: C7.3.254
page: C7-1203
destination operands: <Vd>
source operands: 
assembly: SQRSHRN <Vb><d>, <Va><n>, #<shift>
printf:   printf("SQRSHRN %s%u, %s%u, #%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SQRSHRN_SCALAR_VEC
instance-num: 1
instruction: SQRSHRN
section: C7.3.254
page: C7-1203
destination operands: <Vd>
source operands: 
assembly: SQRSHRN{2} <Vd>.<Tb>, <Vn>.<Ta>, #<shift>
printf:   printf("SQRSHRN2 V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SQRSHRN_SCALAR
instance-num: 2
instruction: SQRSHRN2
section: C7.3.254
page: C7-1203
destination operands: <Vd>
source operands: 
assembly: SQRSHRN <Vb><d>, <Va><n>, #<shift>
printf:   printf("SQRSHRN %s%u, %s%u, #%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SQRSHRN_SCALAR_VEC
instance-num: 2
instruction: SQRSHRN2
section: C7.3.254
page: C7-1203
destination operands: <Vd>
source operands: 
assembly: SQRSHRN{2} <Vd>.<Tb>, <Vn>.<Ta>, #<shift>
printf:   printf("SQRSHRN2 V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SQRSHRUN_SCALAR
instance-num: 1
instruction: SQRSHRUN
section: C7.3.255
page: C7-1206
destination operands: <Vd>
source operands: 
assembly: SQRSHRUN <Vb><d>, <Va><n>, #<shift>
printf:   printf("SQRSHRUN %s%u, %s%u, #%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SQRSHRUN_SCALAR_VEC
instance-num: 1
instruction: SQRSHRUN
section: C7.3.255
page: C7-1206
destination operands: <Vd>
source operands: 
assembly: SQRSHRUN{2} <Vd>.<Tb>, <Vn>.<Ta>, #<shift>
printf:   printf("SQRSHRUN2 V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SQRSHRUN_SCALAR
instance-num: 2
instruction: SQRSHRUN2
section: C7.3.255
page: C7-1206
destination operands: <Vd>
source operands: 
assembly: SQRSHRUN <Vb><d>, <Va><n>, #<shift>
printf:   printf("SQRSHRUN %s%u, %s%u, #%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SQRSHRUN_SCALAR_VEC
instance-num: 2
instruction: SQRSHRUN2
section: C7.3.255
page: C7-1206
destination operands: <Vd>
source operands: 
assembly: SQRSHRUN{2} <Vd>.<Tb>, <Vn>.<Ta>, #<shift>
printf:   printf("SQRSHRUN2 V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SQSHL_IMM_SCALAR
instruction: SQSHL (immediate)
section: C7.3.256
page: C7-1209
destination operands: <Vd>
source operands: <T>,<V>,<Vn>
assembly: SQSHL <V><d>, <V><n>, #<shift>
printf:   printf("SQSHL %s%u, %s%u, #%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),(packet->immh.Value()<<3|packet->immb.Value()) - (8<<HighestSetBit(packet->immh.Value(),4)));

instance-name: SIMD_SQSHL_IMM_SCALAR_VEC
instruction: SQSHL (immediate)
section: C7.3.256
page: C7-1209
destination operands: <Vd>
source operands: <T>,<V>,<Vn>
assembly: SQSHL <Vd>.<T>, <Vn>.<T>, #<shift>
printf:   printf("SQSHL V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->immh.Value()<<3|packet->immb.Value()) - (8<<HighestSetBit(packet->immh.Value(),4)));

instance-name: SIMD_SQSHL_REG_SCALAR
instruction: SQSHL (register)
section: C7.3.257
page: C7-1212
destination operands: 
source operands: <V>,<m>
assembly: SQSHL <V><d>, <V><n>, <V><m>
printf:   printf("SQSHL %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_SQSHL_REG_SCALAR_VEC
instruction: SQSHL (register)
section: C7.3.257
page: C7-1212
destination operands: 
source operands: <V>,<m>
assembly: SQSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SQSHL V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SQSHLU_SCALAR
instruction: SQSHLU
section: C7.3.258
page: C7-1214
destination operands: <Vd>
source operands: <T>,<V>,<Vn>
assembly: SQSHLU <V><d>, <V><n>, #<shift>
printf:   printf("SQSHLU %s%u, %s%u, #%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),(packet->immh.Value()<<3|packet->immb.Value()) - (8<<HighestSetBit(packet->immh.Value(),4)));

instance-name: SIMD_SQSHLU_SCALAR_VEC
instruction: SQSHLU
section: C7.3.258
page: C7-1214
destination operands: <Vd>
source operands: <T>,<V>,<Vn>
assembly: SQSHLU <Vd>.<T>, <Vn>.<T>, #<shift>
printf:   printf("SQSHLU V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->immh.Value()<<3|packet->immb.Value()) - (8<<HighestSetBit(packet->immh.Value(),4)));

instance-name: SIMD_SQSHRN_SCALAR
instance-num: 1
instruction: SQSHRN
section: C7.3.259
page: C7-1217
destination operands: <Vd>
source operands: 
assembly: SQSHRN <Vb><d>, <Va><n>, #<shift>
printf:   printf("SQSHRN %s%u, %s%u, #%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SQSHRN_SCALAR_VEC
instance-num: 1
instruction: SQSHRN
section: C7.3.259
page: C7-1217
destination operands: <Vd>
source operands: 
assembly: SQSHRN{2} <Vd>.<Tb>, <Vn>.<Ta>, #<shift>
printf:   printf("SQSHRN2 V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SQSHRN_SCALAR
instance-num: 2
instruction: SQSHRN2
section: C7.3.259
page: C7-1217
destination operands: <Vd>
source operands: 
assembly: SQSHRN <Vb><d>, <Va><n>, #<shift>
printf:   printf("SQSHRN %s%u, %s%u, #%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SQSHRN_SCALAR_VEC
instance-num: 2
instruction: SQSHRN2
section: C7.3.259
page: C7-1217
destination operands: <Vd>
source operands: 
assembly: SQSHRN{2} <Vd>.<Tb>, <Vn>.<Ta>, #<shift>
printf:   printf("SQSHRN2 V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SQSHRUN_SCALAR
instance-num: 1
instruction: SQSHRUN
section: C7.3.260
page: C7-1220
destination operands: <Vd>
source operands: 
assembly: SQSHRUN <Vb><d>, <Va><n>, #<shift>
printf:   printf("SQSHRUN %s%u, %s%u, #%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SQSHRUN_SCALAR_VEC
instance-num: 1
instruction: SQSHRUN
section: C7.3.260
page: C7-1220
destination operands: <Vd>
source operands: 
assembly: SQSHRUN{2} <Vd>.<Tb>, <Vn>.<Ta>, #<shift>
printf:   printf("SQSHRUN2 V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SQSHRUN_SCALAR
instance-num: 2
instruction: SQSHRUN2
section: C7.3.260
page: C7-1220
destination operands: <Vd>
source operands: 
assembly: SQSHRUN <Vb><d>, <Va><n>, #<shift>
printf:   printf("SQSHRUN %s%u, %s%u, #%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SQSHRUN_SCALAR_VEC
instance-num: 2
instruction: SQSHRUN2
section: C7.3.260
page: C7-1220
destination operands: <Vd>
source operands: 
assembly: SQSHRUN{2} <Vd>.<Tb>, <Vn>.<Ta>, #<shift>
printf:   printf("SQSHRUN2 V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SQSUB_SCALAR
instruction: SQSUB
section: C7.3.261
page: C7-1223
destination operands: <Vd>
source operands: <V>,<m>
assembly: SQSUB <V><d>, <V><n>, <V><m>
printf:   printf("SQSUB %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_SQSUB_SCALAR_VEC
instruction: SQSUB
section: C7.3.261
page: C7-1223
destination operands: <Vd>
source operands: <V>,<m>
assembly: SQSUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SQSUB V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SQXTN_SCALAR
instance-num: 1
instruction: SQXTN
section: C7.3.262
page: C7-1225
destination operands: <Vd>
source operands: <Tb>
assembly: SQXTN <Vb><d>, <Va><n>
printf:   printf("SQXTN %s%u, %s%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value());

instance-name: SIMD_SQXTN_SCALAR_VEC
instance-num: 1
instruction: SQXTN
section: C7.3.262
page: C7-1225
destination operands: <Vd>
source operands: <Tb>
assembly: SQXTN{2} <Vd>.<Tb>, <Vn>.<Ta>
printf:   printf("SQXTN2 V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_SQXTN_SCALAR
instance-num: 2
instruction: SQXTN2
section: C7.3.262
page: C7-1225
destination operands: <Vd>
source operands: <Tb>
assembly: SQXTN <Vb><d>, <Va><n>
printf:   printf("SQXTN %s%u, %s%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value());

instance-name: SIMD_SQXTN_SCALAR_VEC
instance-num: 2
instruction: SQXTN2
section: C7.3.262
page: C7-1225
destination operands: <Vd>
source operands: <Tb>
assembly: SQXTN{2} <Vd>.<Tb>, <Vn>.<Ta>
printf:   printf("SQXTN2 V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_SQXTUN_SCALAR
instance-num: 1
instruction: SQXTUN
section: C7.3.263
page: C7-1227
destination operands: <Vd>
source operands: <Tb>
assembly: SQXTUN <Vb><d>, <Va><n>
printf:   printf("SQXTUN %s%u, %s%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value());

instance-name: SIMD_SQXTUN_SCALAR_VEC
instance-num: 1
instruction: SQXTUN
section: C7.3.263
page: C7-1227
destination operands: <Vd>
source operands: <Tb>
assembly: SQXTUN{2} <Vd>.<Tb>, <Vn>.<Ta>
printf:   printf("SQXTUN2 V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_SQXTUN_SCALAR
instance-num: 2
instruction: SQXTUN2
section: C7.3.263
page: C7-1227
destination operands: <Vd>
source operands: <Tb>
assembly: SQXTUN <Vb><d>, <Va><n>
printf:   printf("SQXTUN %s%u, %s%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value());

instance-name: SIMD_SQXTUN_SCALAR_VEC
instance-num: 2
instruction: SQXTUN2
section: C7.3.263
page: C7-1227
destination operands: <Vd>
source operands: <Tb>
assembly: SQXTUN{2} <Vd>.<Tb>, <Vn>.<Ta>
printf:   printf("SQXTUN2 V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_SRHADD_VEC
instruction: SRHADD
section: C7.3.264
page: C7-1229
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: SRHADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SRHADD V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SRI_SCALAR
instruction: SRI
section: C7.3.265
page: C7-1230
destination operands: <Vd>
source operands: <T>,<V>
assembly: SRI <V><d>, <V><n>, #<shift>
printf:   printf("SRI %s%u, %s%u, #%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SRI_SCALAR_VEC
instruction: SRI
section: C7.3.265
page: C7-1230
destination operands: <Vd>
source operands: <T>,<V>
assembly: SRI <Vd>.<T>, <Vn>.<T>, #<shift>
printf:   printf("SRI V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SRSHL_SCALAR
instruction: SRSHL
section: C7.3.266
page: C7-1232
destination operands: 
source operands: <V>,<m>
assembly: SRSHL <V><d>, <V><n>, <V><m>
printf:   printf("SRSHL %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_SRSHL_SCALAR_VEC
instruction: SRSHL
section: C7.3.266
page: C7-1232
destination operands: 
source operands: <V>,<m>
assembly: SRSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SRSHL V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SRSHR_SCALAR
instruction: SRSHR
section: C7.3.267
page: C7-1234
destination operands: 
source operands: <V>
assembly: SRSHR <V><d>, <V><n>, #<shift>
printf:   printf("SRSHR %s%u, %s%u, #%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SRSHR_SCALAR_VEC
instruction: SRSHR
section: C7.3.267
page: C7-1234
destination operands: 
source operands: <V>
assembly: SRSHR <Vd>.<T>, <Vn>.<T>, #<shift>
printf:   printf("SRSHR V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SRSRA_SCALAR
instruction: SRSRA
section: C7.3.268
page: C7-1236
destination operands: 
source operands: <V>
assembly: SRSRA <V><d>, <V><n>, #<shift>
printf:   printf("SRSRA %s%u, %s%u, #%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SRSRA_SCALAR_VEC
instruction: SRSRA
section: C7.3.268
page: C7-1236
destination operands: 
source operands: <V>
assembly: SRSRA <Vd>.<T>, <Vn>.<T>, #<shift>
printf:   printf("SRSRA V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SSHL_SCALAR
instruction: SSHL
section: C7.3.269
page: C7-1238
destination operands: 
source operands: <V>,<m>
assembly: SSHL <V><d>, <V><n>, <V><m>
printf:   printf("SSHL %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_SSHL_SCALAR_VEC
instruction: SSHL
section: C7.3.269
page: C7-1238
destination operands: 
source operands: <V>,<m>
assembly: SSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SSHL V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SSHLL_VEC
instance-num: 1
instruction: SSHLL
section: C7.3.270
page: C7-1240
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: SSHLL{2} <Vd>.<Ta>, <Vn>.<Tb>, #<shift>
printf:   printf("SSHLL2 V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),(packet->immh.Value()<<3|packet->immb.Value()) - (8<<HighestSetBit(packet->immh.Value(),4)));

instance-name: SIMD_SSHLL_VEC
instance-num: 2
instruction: SSHLL2
section: C7.3.270
page: C7-1240
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: SSHLL{2} <Vd>.<Ta>, <Vn>.<Tb>, #<shift>
printf:   printf("SSHLL2 V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),(packet->immh.Value()<<3|packet->immb.Value()) - (8<<HighestSetBit(packet->immh.Value(),4)));

instance-name: SIMD_SSHR_SCALAR
instruction: SSHR
section: C7.3.271
page: C7-1242
destination operands: 
source operands: <V>
assembly: SSHR <V><d>, <V><n>, #<shift>
printf:   printf("SSHR %s%u, %s%u, #%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SSHR_SCALAR_VEC
instruction: SSHR
section: C7.3.271
page: C7-1242
destination operands: 
source operands: <V>
assembly: SSHR <Vd>.<T>, <Vn>.<T>, #<shift>
printf:   printf("SSHR V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SSRA_SCALAR
instruction: SSRA
section: C7.3.272
page: C7-1244
destination operands: 
source operands: <V>
assembly: SSRA <V><d>, <V><n>, #<shift>
printf:   printf("SSRA %s%u, %s%u, #%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simd_rshift1(packet->immh.Value(),packet->immb.Value()).c_str());

instance-name: SIMD_SSRA_SCALAR_VEC
instruction: SSRA
section: C7.3.272
page: C7-1244
destination operands: 
source operands: <V>
assembly: SSRA <Vd>.<T>, <Vn>.<T>, #<shift>
printf:   printf("SSRA V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_SSUBL_VEC
instance-num: 1
instruction: SSUBL
section: C7.3.273
page: C7-1246
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SSUBL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==0)
printf:   printf("SSUBL V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SSUBL_VEC
instance-num: 2
instruction: SSUBL2
section: C7.3.273
page: C7-1246
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SSUBL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==1)
printf:   printf("SSUBL2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SSUBW_VEC
instance-num: 1
instruction: SSUBW
section: C7.3.274
page: C7-1248
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SSUBW <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb> (Q==0)
printf:   printf("SSUBW V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SSUBW_VEC
instance-num: 2
instruction: SSUBW2
section: C7.3.274
page: C7-1248
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SSUBW2 <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb> (Q==1)
printf:   printf("SSUBW2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_ST1_ONE_REG_MULT_STRUCT_NO_OFF
instance-num: 1
qualifier: opcode = 0111
instruction: ST1 (multiple structures) (No offset)
section: C7.3.275
page: C7-1250
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: ST1 { <Vt>.<T> }, [<Xn|SP>]
printf:   printf("ST1  V%d.%s , [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: SIMD_ST1_TWO_REG_MULT_STRUCT_NO_OFF
instance-num: 1
qualifier: opcode = 1010
instruction: ST1 (multiple structures) (No offset)
section: C7.3.275
page: C7-1250
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: ST1 { <Vt>.<T>, <Vt2>.<T> }, [<Xn|SP>]
printf:   printf("ST1  V%d.%s, V%d.%s , [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: SIMD_ST1_THREE_REG_MULT_STRUCT_NO_OFF
instance-num: 1
qualifier: opcode = 0110
instruction: ST1 (multiple structures) (No offset)
section: C7.3.275
page: C7-1250
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: ST1 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T> }, [<Xn|SP>]
printf:   printf("ST1  V%d.%s, V%d.%s, V%d.%s , [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: SIMD_ST1_FOUR_REG_MULT_STRUCT_NO_OFF
instance-num: 1
qualifier: opcode = 0010
instruction: ST1 (multiple structures) (No offset)
section: C7.3.275
page: C7-1250
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: ST1 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>, <Vt4>.<T> }, [<Xn|SP>]
printf:   printf("ST1  V%d.%s, V%d.%s, V%d.%s, V%d.%s , [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 3) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: SIMD_ST1_ONE_REG_MULT_STRUCT_POST_REG
instance-num: 2
qualifier: Rm != 11111, opcode = 0111
instruction: ST1 (multiple structures) (Post-index)
section: C7.3.275
page: C7-1250
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: ST1 { <Vt>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("ST1  V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: SIMD_ST1_ONE_REG_MULT_STRUCT_POST_OFF
instance-num: 2
qualifier: Rm = 11111, opcode = 0111
instruction: ST1 (multiple structures) (Post-index)
section: C7.3.275
page: C7-1250
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: ST1 { <Vt>.<T> }, [<Xn|SP>], <imm>
printf:   printf("ST1  V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(packet->Q.Value()==1 ? 48 : 24));

instance-name: SIMD_ST1_TWO_REG_MULT_STRUCT_POST_REG
instance-num: 2
qualifier: Rm != 11111, opcode = 1010
instruction: ST1 (multiple structures) (Post-index)
section: C7.3.275
page: C7-1250
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: ST1 { <Vt>.<T>, <Vt2>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("ST1  V%d.%s, V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: SIMD_ST1_TWO_REG_MULT_STRUCT_POST_OFF
instance-num: 2
qualifier: Rm = 11111, opcode = 1010
instruction: ST1 (multiple structures) (Post-index)
section: C7.3.275
page: C7-1250
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: ST1 { <Vt>.<T>, <Vt2>.<T> }, [<Xn|SP>], <imm>
printf:   printf("ST1  V%d.%s, V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(packet->Q.Value()==1 ? 64 : 32));

instance-name: SIMD_ST1_THREE_REG_MULT_STRUCT_POST_REG
instance-num: 2
qualifier: Rm != 11111, opcode = 0110
instruction: ST1 (multiple structures) (Post-index)
section: C7.3.275
page: C7-1250
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: ST1 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("ST1  V%d.%s, V%d.%s, V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: SIMD_ST1_THREE_REG_MULT_STRUCT_POST_OFF
instance-num: 2
qualifier: Rm = 11111, opcode = 0110
instruction: ST1 (multiple structures) (Post-index)
section: C7.3.275
page: C7-1250
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: ST1 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T> }, [<Xn|SP>], <imm>
printf:   printf("ST1  V%d.%s, V%d.%s, V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(packet->Q.Value()==1 ? 16 : 8));

instance-name: SIMD_ST1_FOUR_REG_MULT_STRUCT_POST_REG
instance-num: 2
qualifier: Rm != 11111, opcode = 0010
instruction: ST1 (multiple structures) (Post-index)
section: C7.3.275
page: C7-1250
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: ST1 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>, <Vt4>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("ST1  V%d.%s, V%d.%s, V%d.%s, V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 3) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: SIMD_ST1_FOUR_REG_MULT_STRUCT_POST_OFF
instance-num: 2
qualifier: Rm = 11111, opcode = 0010
instruction: ST1 (multiple structures) (Post-index)
section: C7.3.275
page: C7-1250
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>,<imm>
assembly: ST1 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>, <Vt4>.<T> }, [<Xn|SP>], <imm>
printf:   printf("ST1  V%d.%s, V%d.%s, V%d.%s, V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 3) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(packet->Q.Value()==1 ? 32 : 16));

instance-name: ST1_SINGLE_STRUCT_8
qualifier: opcode = 000
instruction: ST1 (single structure)
section: C7.3.276
page: C7-1253
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: ST1 { <Vt>.B }[<index>], [<Xn|SP>]
printf:   printf("ST1  V%d.B [%u], [%s]\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST1_SINGLE_STRUCT_8
qualifier: Rm = 11111, opcode = 000
instruction: ST1 (single structure)
section: C7.3.276
page: C7-1253
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: ST1 { <Vt>.B }[<index>], [<Xn|SP>], #1
printf:   printf("ST1  V%d.B [%u], [%s], #1\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST1_SINGLE_STRUCT_8
qualifier: Rm != 11111, opcode = 000
instruction: ST1 (single structure)
section: C7.3.276
page: C7-1253
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: ST1 { <Vt>.B }[<index>], [<Xn|SP>], <Xm>
printf:   printf("ST1  V%d.B [%u], [%s], %s\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST1_SINGLE_STRUCT_64
qualifier: opcode = 100, S = 0, size = 01
instruction: ST1 (single structure)
section: C7.3.276
page: C7-1253
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: ST1 { <Vt>.D }[<index>], [<Xn|SP>]
printf:   printf("ST1  V%d.D [%u], [%s]\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST1_SINGLE_STRUCT_64
qualifier: Rm = 11111, opcode = 100, S = 0, size = 01
instruction: ST1 (single structure)
section: C7.3.276
page: C7-1253
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: ST1 { <Vt>.D }[<index>], [<Xn|SP>], #8
printf:   printf("ST1  V%d.D [%u], [%s], #8\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST1_SINGLE_STRUCT_64
qualifier: Rm != 11111, opcode = 100, S = 0, size = 01
instruction: ST1 (single structure)
section: C7.3.276
page: C7-1253
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: ST1 { <Vt>.D }[<index>], [<Xn|SP>], <Xm>
printf:   printf("ST1  V%d.D [%u], [%s], %s\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST1_SINGLE_STRUCT_16
qualifier: opcode = 010, size = x0
instruction: ST1 (single structure)
section: C7.3.276
page: C7-1253
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: ST1 { <Vt>.H }[<index>], [<Xn|SP>]
printf:   printf("ST1  V%d.H [%u], [%s]\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST1_SINGLE_STRUCT_16
qualifier: Rm = 11111, opcode = 010, size = x0
instruction: ST1 (single structure)
section: C7.3.276
page: C7-1253
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: ST1 { <Vt>.H }[<index>], [<Xn|SP>], #2
printf:   printf("ST1  V%d.H [%u], [%s], #2\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST1_SINGLE_STRUCT_16
qualifier: Rm != 11111, opcode = 010, size = x0
instruction: ST1 (single structure)
section: C7.3.276
page: C7-1253
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: ST1 { <Vt>.H }[<index>], [<Xn|SP>], <Xm>
printf:   printf("ST1  V%d.H [%u], [%s], %s\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST1_SINGLE_STRUCT_32
qualifier: opcode = 100, size = 00
instruction: ST1 (single structure)
section: C7.3.276
page: C7-1253
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: ST1 { <Vt>.S }[<index>], [<Xn|SP>]
printf:   printf("ST1  V%d.S [%u], [%s]\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST1_SINGLE_STRUCT_32
qualifier: Rm = 11111, opcode = 100, size = 00
instruction: ST1 (single structure)
section: C7.3.276
page: C7-1253
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: ST1 { <Vt>.S }[<index>], [<Xn|SP>], #4
printf:   printf("ST1  V%d.S [%u], [%s], #4\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST1_SINGLE_STRUCT_32
qualifier: Rm != 11111, opcode = 100, size = 00
instruction: ST1 (single structure)
section: C7.3.276
page: C7-1253
destination operands: 
source operands: <Vt>,<Xm>,<Xn|SP>
assembly: ST1 { <Vt>.S }[<index>], [<Xn|SP>], <Xm>
printf:   printf("ST1  V%d.S [%u], [%s], %s\n",packet->Rt.Value(),simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST2_OFF_MULT_STRUCT
instance-num: 1
instruction: ST2 (multiple structures) (No offset)
section: C7.3.277
page: C7-1256
destination operands: 
source operands: <T>,<Vt2>,<Vt>,<Xn|SP>
assembly: ST2 { <Vt>.<T>, <Vt2>.<T> }, [<Xn|SP>]
printf:   printf("ST2  V%d.%s, V%d.%s , [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST2_MULT_REG_POST_STRUCT
instance-num: 2
instruction: ST2 (multiple structures) (Post-index)
section: C7.3.277
page: C7-1256
destination operands: 
source operands: <T>,<Vt2>,<Vt>,<Xn|SP>
assembly: ST2 { <Vt>.<T>, <Vt2>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("ST2  V%d.%s, V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST2_MULT_REG_POST_STRUCT
instance-num: 2
instruction: ST2 (multiple structures) (Post-index)
section: C7.3.277
page: C7-1256
destination operands: 
source operands: <T>,<Vt2>,<Vt>,<Xn|SP>
assembly: ST2 { <Vt>.<T>, <Vt2>.<T> }, [<Xn|SP>], <imm>
printf:   printf("ST2  V%d.%s, V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(packet->Q.Value()==1 ? 32 : 16));

instance-name: ST2_SINGLE_STRUCT_8
qualifier: opcode = 000
instruction: ST2 (single structure)
section: C7.3.278
page: C7-1259
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: ST2 { <Vt>.B, <Vt2>.B }[<index>], [<Xn|SP>]
printf:   printf("ST2  V%d.B, V%d.B [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST2_SINGLE_STRUCT_8
qualifier: Rm = 11111, opcode = 000
instruction: ST2 (single structure)
section: C7.3.278
page: C7-1259
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: ST2 { <Vt>.B, <Vt2>.B }[<index>], [<Xn|SP>], #2
printf:   printf("ST2  V%d.B, V%d.B [%u], [%s], #2\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST2_SINGLE_STRUCT_8
qualifier: Rm != 11111, opcode = 000
instruction: ST2 (single structure)
section: C7.3.278
page: C7-1259
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: ST2 { <Vt>.B, <Vt2>.B }[<index>], [<Xn|SP>], <Xm>
printf:   printf("ST2  V%d.B, V%d.B [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST2_SINGLE_STRUCT_64
qualifier: opcode = 100, S = 0, size = 01
instruction: ST2 (single structure)
section: C7.3.278
page: C7-1259
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: ST2 { <Vt>.D, <Vt2>.D }[<index>], [<Xn|SP>]
printf:   printf("ST2  V%d.D, V%d.D [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST2_SINGLE_STRUCT_64
qualifier: Rm = 11111, opcode = 100, S = 0, size = 01
instruction: ST2 (single structure)
section: C7.3.278
page: C7-1259
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: ST2 { <Vt>.D, <Vt2>.D }[<index>], [<Xn|SP>], #16
printf:   printf("ST2  V%d.D, V%d.D [%u], [%s], #16\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST2_SINGLE_STRUCT_64
qualifier: Rm != 11111, opcode = 100, S = 0, size = 01
instruction: ST2 (single structure)
section: C7.3.278
page: C7-1259
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: ST2 { <Vt>.D, <Vt2>.D }[<index>], [<Xn|SP>], <Xm>
printf:   printf("ST2  V%d.D, V%d.D [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST2_SINGLE_STRUCT_16
qualifier: opcode = 010, size = x0
instruction: ST2 (single structure)
section: C7.3.278
page: C7-1259
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: ST2 { <Vt>.H, <Vt2>.H }[<index>], [<Xn|SP>]
printf:   printf("ST2  V%d.H, V%d.H [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST2_SINGLE_STRUCT_16
qualifier: Rm = 11111, opcode = 010, size = x0
instruction: ST2 (single structure)
section: C7.3.278
page: C7-1259
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: ST2 { <Vt>.H, <Vt2>.H }[<index>], [<Xn|SP>], #4
printf:   printf("ST2  V%d.H, V%d.H [%u], [%s], #4\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST2_SINGLE_STRUCT_16
qualifier: Rm != 11111, opcode = 010, size = x0
instruction: ST2 (single structure)
section: C7.3.278
page: C7-1259
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: ST2 { <Vt>.H, <Vt2>.H }[<index>], [<Xn|SP>], <Xm>
printf:   printf("ST2  V%d.H, V%d.H [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST2_SINGLE_STRUCT_32
qualifier: opcode = 100, size = 00
instruction: ST2 (single structure)
section: C7.3.278
page: C7-1259
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: ST2 { <Vt>.S, <Vt2>.S }[<index>], [<Xn|SP>]
printf:   printf("ST2  V%d.S, V%d.S [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST2_SINGLE_STRUCT_32
qualifier: Rm = 11111, opcode = 100, size = 00
instruction: ST2 (single structure)
section: C7.3.278
page: C7-1259
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: ST2 { <Vt>.S, <Vt2>.S }[<index>], [<Xn|SP>], #8
printf:   printf("ST2  V%d.S, V%d.S [%u], [%s], #8\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST2_SINGLE_STRUCT_32
qualifier: Rm != 11111, opcode = 100, size = 00
instruction: ST2 (single structure)
section: C7.3.278
page: C7-1259
destination operands: 
source operands: <Vt2>,<Vt>,<Xm>,<Xn|SP>
assembly: ST2 { <Vt>.S, <Vt2>.S }[<index>], [<Xn|SP>], <Xm>
printf:   printf("ST2  V%d.S, V%d.S [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST3_OFF_MULT_STRUCT
instance-num: 1
instruction: ST3 (multiple structures) (No offset)
section: C7.3.279
page: C7-1262
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt>,<Xn|SP>
assembly: ST3 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T> }, [<Xn|SP>]
printf:   printf("ST3  V%d.%s, V%d.%s, V%d.%s , [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST3_MULT_REG_POST_STRUCT
instance-num: 2
instruction: ST3 (multiple structures) (Post-index)
section: C7.3.279
page: C7-1262
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt>,<Xn|SP>
assembly: ST3 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("ST3  V%d.%s, V%d.%s, V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST3_MULT_REG_POST_STRUCT
instance-num: 2
instruction: ST3 (multiple structures) (Post-index)
section: C7.3.279
page: C7-1262
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt>,<Xn|SP>
assembly: ST3 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T> }, [<Xn|SP>], <imm>
printf:   printf("ST3  V%d.%s, V%d.%s, V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(packet->Q.Value()==1 ? 48 : 24));

instance-name: ST3_SINGLE_STRUCT_8
qualifier: opcode = 001
instruction: ST3 (single structure)
section: C7.3.280
page: C7-1265
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: ST3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<index>], [<Xn|SP>]
printf:   printf("ST3  V%d.B, V%d.B, V%d.B [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST3_SINGLE_STRUCT_8
qualifier: Rm = 11111, opcode = 001
instruction: ST3 (single structure)
section: C7.3.280
page: C7-1265
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: ST3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<index>], [<Xn|SP>], #3
printf:   printf("ST3  V%d.B, V%d.B, V%d.B [%u], [%s], #3\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST3_SINGLE_STRUCT_8
qualifier: Rm != 11111, opcode = 001
instruction: ST3 (single structure)
section: C7.3.280
page: C7-1265
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: ST3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<index>], [<Xn|SP>], <Xm>
printf:   printf("ST3  V%d.B, V%d.B, V%d.B [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST3_SINGLE_STRUCT_64
qualifier: opcode = 101, S = 0, size = 01
instruction: ST3 (single structure)
section: C7.3.280
page: C7-1265
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: ST3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<index>], [<Xn|SP>]
printf:   printf("ST3  V%d.D, V%d.D, V%d.D [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST3_SINGLE_STRUCT_64
qualifier: Rm = 11111, opcode = 101, S = 0, size = 01
instruction: ST3 (single structure)
section: C7.3.280
page: C7-1265
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: ST3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<index>], [<Xn|SP>], #24
printf:   printf("ST3  V%d.D, V%d.D, V%d.D [%u], [%s], #24\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST3_SINGLE_STRUCT_64
qualifier: Rm != 11111, opcode = 101, S = 0, size = 01
instruction: ST3 (single structure)
section: C7.3.280
page: C7-1265
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: ST3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<index>], [<Xn|SP>], <Xm>
printf:   printf("ST3  V%d.D, V%d.D, V%d.D [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST3_SINGLE_STRUCT_16
qualifier: opcode = 011, size = x0
instruction: ST3 (single structure)
section: C7.3.280
page: C7-1265
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: ST3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<index>], [<Xn|SP>]
printf:   printf("ST3  V%d.H, V%d.H, V%d.H [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST3_SINGLE_STRUCT_16
qualifier: Rm = 11111, opcode = 011, size = x0
instruction: ST3 (single structure)
section: C7.3.280
page: C7-1265
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: ST3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<index>], [<Xn|SP>], #6
printf:   printf("ST3  V%d.H, V%d.H, V%d.H [%u], [%s], #6\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST3_SINGLE_STRUCT_16
qualifier: Rm != 11111, opcode = 011, size = x0
instruction: ST3 (single structure)
section: C7.3.280
page: C7-1265
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: ST3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<index>], [<Xn|SP>], <Xm>
printf:   printf("ST3  V%d.H, V%d.H, V%d.H [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST3_SINGLE_STRUCT_32
qualifier: opcode = 101, size = 00
instruction: ST3 (single structure)
section: C7.3.280
page: C7-1265
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: ST3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<index>], [<Xn|SP>]
printf:   printf("ST3  V%d.S, V%d.S, V%d.S [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST3_SINGLE_STRUCT_32
qualifier: Rm = 11111, opcode = 101, size = 00
instruction: ST3 (single structure)
section: C7.3.280
page: C7-1265
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: ST3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<index>], [<Xn|SP>], #12
printf:   printf("ST3  V%d.S, V%d.S, V%d.S [%u], [%s], #12\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST3_SINGLE_STRUCT_32
qualifier: Rm != 11111, opcode = 101, size = 00
instruction: ST3 (single structure)
section: C7.3.280
page: C7-1265
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt>,<Xm>,<Xn|SP>
assembly: ST3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<index>], [<Xn|SP>], <Xm>
printf:   printf("ST3  V%d.S, V%d.S, V%d.S [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST4_OFF_MULT_STRUCT
instance-num: 1
instruction: ST4 (multiple structures) (No offset)
section: C7.3.281
page: C7-1268
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>
assembly: ST4 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>, <Vt4>.<T> }, [<Xn|SP>]
printf:   printf("ST4  V%d.%s, V%d.%s, V%d.%s, V%d.%s , [%s]\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 3) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST4_MULT_REG_POST_STRUCT
instance-num: 2
instruction: ST4 (multiple structures) (Post-index)
section: C7.3.281
page: C7-1268
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>
assembly: ST4 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>, <Vt4>.<T> }, [<Xn|SP>], <Xm>
printf:   printf("ST4  V%d.%s, V%d.%s, V%d.%s, V%d.%s , [%s], %s\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 3) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST4_MULT_REG_POST_STRUCT
instance-num: 2
instruction: ST4 (multiple structures) (Post-index)
section: C7.3.281
page: C7-1268
destination operands: 
source operands: <T>,<Vt2>,<Vt3>,<Vt4>,<Vt>
assembly: ST4 { <Vt>.<T>, <Vt2>.<T>, <Vt3>.<T>, <Vt4>.<T> }, [<Xn|SP>], <imm>
printf:   printf("ST4  V%d.%s, V%d.%s, V%d.%s, V%d.%s , [%s], %u\n",packet->Rt.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 1) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 2) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->Rt.Value() + 3) % 32,Tparm(packet->size.Value(),packet->Q.Value()).c_str(),XnSP(packet->Rn.Value(),false).c_str(),(packet->Q.Value()==1 ? 64 : 32));

instance-name: ST4_SINGLE_STRUCT_8
qualifier: opcode = 001
instruction: ST4 (single structure)
section: C7.3.282
page: C7-1271
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: ST4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<index>], [<Xn|SP>]
printf:   printf("ST4  V%d.B, V%d.B, V%d.B, V%d.B [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST4_SINGLE_STRUCT_8
qualifier: Rm = 11111, opcode = 001
instruction: ST4 (single structure)
section: C7.3.282
page: C7-1271
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: ST4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<index>], [<Xn|SP>], #4
printf:   printf("ST4  V%d.B, V%d.B, V%d.B, V%d.B [%u], [%s], #4\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST4_SINGLE_STRUCT_8
qualifier: Rm != 11111, opcode = 001
instruction: ST4 (single structure)
section: C7.3.282
page: C7-1271
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: ST4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<index>], [<Xn|SP>], <Xm>
printf:   printf("ST4  V%d.B, V%d.B, V%d.B, V%d.B [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),packet->size.Value(),8),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST4_SINGLE_STRUCT_64
qualifier: opcode = 101, S = 0, size = 01
instruction: ST4 (single structure)
section: C7.3.282
page: C7-1271
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: ST4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<index>], [<Xn|SP>]
printf:   printf("ST4  V%d.D, V%d.D, V%d.D, V%d.D [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST4_SINGLE_STRUCT_64
qualifier: Rm = 11111, opcode = 101, S = 0, size = 01
instruction: ST4 (single structure)
section: C7.3.282
page: C7-1271
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: ST4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<index>], [<Xn|SP>], #32
printf:   printf("ST4  V%d.D, V%d.D, V%d.D, V%d.D [%u], [%s], #32\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST4_SINGLE_STRUCT_64
qualifier: Rm != 11111, opcode = 101, S = 0, size = 01
instruction: ST4 (single structure)
section: C7.3.282
page: C7-1271
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: ST4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<index>], [<Xn|SP>], <Xm>
printf:   printf("ST4  V%d.D, V%d.D, V%d.D, V%d.D [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),0,0,64),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST4_SINGLE_STRUCT_16
qualifier: opcode = 011, size = x0
instruction: ST4 (single structure)
section: C7.3.282
page: C7-1271
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: ST4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<index>], [<Xn|SP>]
printf:   printf("ST4  V%d.H, V%d.H, V%d.H, V%d.H [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST4_SINGLE_STRUCT_16
qualifier: Rm = 11111, opcode = 011, size = x0
instruction: ST4 (single structure)
section: C7.3.282
page: C7-1271
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: ST4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<index>], [<Xn|SP>], #8
printf:   printf("ST4  V%d.H, V%d.H, V%d.H, V%d.H [%u], [%s], #8\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST4_SINGLE_STRUCT_16
qualifier: Rm != 11111, opcode = 011, size = x0
instruction: ST4 (single structure)
section: C7.3.282
page: C7-1271
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: ST4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<index>], [<Xn|SP>], <Xm>
printf:   printf("ST4  V%d.H, V%d.H, V%d.H, V%d.H [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),(packet->size.Value()>>1)&1,16),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: ST4_SINGLE_STRUCT_32
qualifier: opcode = 101, size = 00
instruction: ST4 (single structure)
section: C7.3.282
page: C7-1271
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: ST4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<index>], [<Xn|SP>]
printf:   printf("ST4  V%d.S, V%d.S, V%d.S, V%d.S [%u], [%s]\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST4_SINGLE_STRUCT_32
qualifier: Rm = 11111, opcode = 101, size = 00
instruction: ST4 (single structure)
section: C7.3.282
page: C7-1271
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: ST4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<index>], [<Xn|SP>], #16
printf:   printf("ST4  V%d.S, V%d.S, V%d.S, V%d.S [%u], [%s], #16\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str());

instance-name: ST4_SINGLE_STRUCT_32
qualifier: Rm != 11111, opcode = 101, size = 00
instruction: ST4 (single structure)
section: C7.3.282
page: C7-1271
destination operands: 
source operands: <Vt2>,<Vt3>,<Vt4>,<Vt>,<Xm>,<Xn|SP>
assembly: ST4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<index>], [<Xn|SP>], <Xm>
printf:   printf("ST4  V%d.S, V%d.S, V%d.S, V%d.S [%u], [%s], %s\n",packet->Rt.Value(),(packet->Rt.Value() + 1) % 32,(packet->Rt.Value() + 2) % 32,(packet->Rt.Value() + 3) % 32,simd_ld1_imm(packet->Q.Value(),packet->S.Value(),0,32),XnSP(packet->Rn.Value(),false).c_str(),XnXZR(packet->Rm.Value(),false).c_str());

instance-name: SIMD_STNP_64
qualifier: opc = 01
instruction: STNP (SIMD&FP)
section: C7.3.283
page: C7-1274
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: STNP <Dt1>, <Dt2>, [<Xn|SP>{, #<imm>}]
printf:   printf("STNP D%d, D%d, [%s, #%lld]\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 8);

instance-name: SIMD_STNP_128
qualifier: opc = 10
instruction: STNP (SIMD&FP)
section: C7.3.283
page: C7-1274
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: STNP <Qt1>, <Qt2>, [<Xn|SP>{, #<imm>}]
printf:   printf("STNP Q%d, Q%d, [%s, #%lld]\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 16);

instance-name: SIMD_STNP_32
qualifier: opc = 00
instruction: STNP (SIMD&FP)
section: C7.3.283
page: C7-1274
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: STNP <St1>, <St2>, [<Xn|SP>{, #<imm>}]
printf:   printf("STNP S%d, S%d, [%s, #%lld]\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: SIMD_STP_REG_POST_64
instance-num: 1
qualifier: opc = 01
instruction: STP (SIMD&FP) (Post-index)
section: C7.3.284
page: C7-1276
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: STP <Dt1>, <Dt2>, [<Xn|SP>], #<imm>
printf:   printf("STP D%d, D%d, [%s], #%lld\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 8);

instance-name: SIMD_STP_REG_POST_128
instance-num: 1
qualifier: opc = 10
instruction: STP (SIMD&FP) (Post-index)
section: C7.3.284
page: C7-1276
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: STP <Qt1>, <Qt2>, [<Xn|SP>], #<imm>
printf:   printf("STP Q%d, Q%d, [%s], #%lld\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 16);

instance-name: SIMD_STP_REG_POST_32
instance-num: 1
qualifier: opc = 00
instruction: STP (SIMD&FP) (Post-index)
section: C7.3.284
page: C7-1276
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: STP <St1>, <St2>, [<Xn|SP>], #<imm>
printf:   printf("STP S%d, S%d, [%s], #%lld\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: SIMD_STP_REG_PRE_64
instance-num: 2
qualifier: opc = 01
instruction: STP (SIMD&FP) (Pre-index)
section: C7.3.284
page: C7-1276
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: STP <Dt1>, <Dt2>, [<Xn|SP>, #<imm>]!
printf:   printf("STP D%d, D%d, [%s, #%lld]!\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 8);

instance-name: SIMD_STP_REG_PRE_128
instance-num: 2
qualifier: opc = 10
instruction: STP (SIMD&FP) (Pre-index)
section: C7.3.284
page: C7-1276
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: STP <Qt1>, <Qt2>, [<Xn|SP>, #<imm>]!
printf:   printf("STP Q%d, Q%d, [%s, #%lld]!\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 16);

instance-name: SIMD_STP_REG_PRE_32
instance-num: 2
qualifier: opc = 00
instruction: STP (SIMD&FP) (Pre-index)
section: C7.3.284
page: C7-1276
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: STP <St1>, <St2>, [<Xn|SP>, #<imm>]!
printf:   printf("STP S%d, S%d, [%s, #%lld]!\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: SIMD_STP_REG_OFF_64
instance-num: 3
qualifier: opc = 01
instruction: STP (SIMD&FP) (Signed offset)
section: C7.3.284
page: C7-1276
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: STP <Dt1>, <Dt2>, [<Xn|SP>{, #<imm>}]
printf:   printf("STP D%d, D%d, [%s, #%lld]\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 8);

instance-name: SIMD_STP_REG_OFF_128
instance-num: 3
qualifier: opc = 10
instruction: STP (SIMD&FP) (Signed offset)
section: C7.3.284
page: C7-1276
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: STP <Qt1>, <Qt2>, [<Xn|SP>{, #<imm>}]
printf:   printf("STP Q%d, Q%d, [%s, #%lld]\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 16);

instance-name: SIMD_STP_REG_OFF_32
instance-num: 3
qualifier: opc = 00
instruction: STP (SIMD&FP) (Signed offset)
section: C7.3.284
page: C7-1276
destination operands: 
source operands: <Dt1>,<Dt2>,<St1>,<St2>,<Xn|SP>,<imm>
assembly: STP <St1>, <St2>, [<Xn|SP>{, #<imm>}]
printf:   printf("STP S%d, S%d, [%s, #%lld]\n",packet->Rt.Value(),packet->Rt2.Value(),XnSP(packet->Rn.Value(),false).c_str(),SignExtend(packet->imm7.Value(),7) * 4);

instance-name: SIMD_STR_IMM_8
qualifier: size = 00, opc = 00
instruction: STR immediate (SIMD&FP)
section: C7.3.285
page: C7-1279
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: STR <Bt>, [<Xn|SP>, #<simm>]!
printf:   printf("STR B%d, [%s, #%d]!\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_STR_IMM_8
qualifier: size = 00, opc = 00
instruction: STR immediate (SIMD&FP)
section: C7.3.285
page: C7-1279
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: STR <Bt>, [<Xn|SP>], #<simm>
printf:   printf("STR B%d, [%s], #%d\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_STR_IMM_8
qualifier: size = 00, opc = 00
instruction: STR immediate (SIMD&FP)
section: C7.3.285
page: C7-1279
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: STR <Bt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("STR B%d, [%s, #%u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: SIMD_STR_IMM_64
qualifier: size = 11, opc = 00
instruction: STR immediate (SIMD&FP)
section: C7.3.285
page: C7-1279
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: STR <Dt>, [<Xn|SP>, #<simm>]!
printf:   printf("STR D%d, [%s, #%d]!\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_STR_IMM_64
qualifier: size = 11, opc = 00
instruction: STR immediate (SIMD&FP)
section: C7.3.285
page: C7-1279
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: STR <Dt>, [<Xn|SP>], #<simm>
printf:   printf("STR D%d, [%s], #%d\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_STR_IMM_64
qualifier: size = 11, opc = 00
instruction: STR immediate (SIMD&FP)
section: C7.3.285
page: C7-1279
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: STR <Dt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("STR D%d, [%s, #%u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: SIMD_STR_IMM_16
qualifier: size = 01, opc = 00
instruction: STR immediate (SIMD&FP)
section: C7.3.285
page: C7-1279
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: STR <Ht>, [<Xn|SP>, #<simm>]!
printf:   printf("STR H%d, [%s, #%d]!\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_STR_IMM_16
qualifier: size = 01, opc = 00
instruction: STR immediate (SIMD&FP)
section: C7.3.285
page: C7-1279
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: STR <Ht>, [<Xn|SP>], #<simm>
printf:   printf("STR H%d, [%s], #%d\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_STR_IMM_16
qualifier: size = 01, opc = 00
instruction: STR immediate (SIMD&FP)
section: C7.3.285
page: C7-1279
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: STR <Ht>, [<Xn|SP>{, #<pimm>}]
printf:   printf("STR H%d, [%s, #%u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: SIMD_STR_IMM_128
qualifier: size = 00, opc = 10
instruction: STR immediate (SIMD&FP)
section: C7.3.285
page: C7-1279
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: STR <Qt>, [<Xn|SP>, #<simm>]!
printf:   printf("STR Q%d, [%s, #%d]!\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_STR_IMM_128
qualifier: size = 00, opc = 10
instruction: STR immediate (SIMD&FP)
section: C7.3.285
page: C7-1279
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: STR <Qt>, [<Xn|SP>], #<simm>
printf:   printf("STR Q%d, [%s], #%d\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_STR_IMM_128
qualifier: size = 00, opc = 10
instruction: STR immediate (SIMD&FP)
section: C7.3.285
page: C7-1279
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: STR <Qt>, [<Xn|SP>{, #<pimm>}]
printf:   printf("STR Q%d, [%s, #%u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: SIMD_STR_IMM_32
qualifier: size = 10, opc = 00
instruction: STR immediate (SIMD&FP)
section: C7.3.285
page: C7-1279
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: STR <St>, [<Xn|SP>, #<simm>]!
printf:   printf("STR S%d, [%s, #%d]!\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_STR_IMM_32
qualifier: size = 10, opc = 00
instruction: STR immediate (SIMD&FP)
section: C7.3.285
page: C7-1279
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: STR <St>, [<Xn|SP>], #<simm>
printf:   printf("STR S%d, [%s], #%d\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_STR_IMM_32
qualifier: size = 10, opc = 00
instruction: STR immediate (SIMD&FP)
section: C7.3.285
page: C7-1279
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<pimm>,<simm>
assembly: STR <St>, [<Xn|SP>{, #<pimm>}]
printf:   printf("STR S%d, [%s, #%u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),decode_pimm(packet->imm12.Value(),packet->size.Value(),packet->opc.Value()));

instance-name: SIMD_STR_REG_8
qualifier: size = 00, opc = 00
instruction: STR register (SIMD&FP)
section: C7.3.286
page: C7-1282
destination operands: 
source operands: <Dt>,<Ht>,<R>,<St>,<Xn|SP>,<m>
assembly: STR <Bt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("STR B%d, [%s, %c%s, %s %u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: SIMD_STR_REG_64
qualifier: size = 11, opc = 00
instruction: STR register (SIMD&FP)
section: C7.3.286
page: C7-1282
destination operands: 
source operands: <Dt>,<Ht>,<R>,<St>,<Xn|SP>,<m>
assembly: STR <Dt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("STR D%d, [%s, %c%s, %s %u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: SIMD_STR_REG_16
qualifier: size = 01, opc = 00
instruction: STR register (SIMD&FP)
section: C7.3.286
page: C7-1282
destination operands: 
source operands: <Dt>,<Ht>,<R>,<St>,<Xn|SP>,<m>
assembly: STR <Ht>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("STR H%d, [%s, %c%s, %s %u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: SIMD_STR_REG_128
qualifier: size = 00, opc = 10
instruction: STR register (SIMD&FP)
section: C7.3.286
page: C7-1282
destination operands: 
source operands: <Dt>,<Ht>,<R>,<St>,<Xn|SP>,<m>
assembly: STR <Qt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("STR Q%d, [%s, %c%s, %s %u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: SIMD_STR_REG_32
qualifier: size = 10, opc = 00
instruction: STR register (SIMD&FP)
section: C7.3.286
page: C7-1282
destination operands: 
source operands: <Dt>,<Ht>,<R>,<St>,<Xn|SP>,<m>
assembly: STR <St>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}]
printf:   printf("STR S%d, [%s, %c%s, %s %u]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),((packet->option.Value() & 3)==3) ? 'X' : 'W',ZR(packet->Rm.Value()).c_str(),extendOption(packet->option.Value(),packet->Rd.Value(),packet->Rn.Value(),packet->imm3.IsDefined()).c_str(),packet->imm3.Value());

instance-name: SIMD_STUR_8
qualifier: size = 00, opc = 00
instruction: STUR (SIMD&FP)
section: C7.3.287
page: C7-1285
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<simm>
assembly: STUR <Bt>, [<Xn|SP>{, #<simm>}]
printf:   printf("STUR B%d, [%s, #%d]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_STUR_64
qualifier: size = 11, opc = 00
instruction: STUR (SIMD&FP)
section: C7.3.287
page: C7-1285
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<simm>
assembly: STUR <Dt>, [<Xn|SP>{, #<simm>}]
printf:   printf("STUR D%d, [%s, #%d]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_STUR_16
qualifier: size = 01, opc = 00
instruction: STUR (SIMD&FP)
section: C7.3.287
page: C7-1285
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<simm>
assembly: STUR <Ht>, [<Xn|SP>{, #<simm>}]
printf:   printf("STUR H%d, [%s, #%d]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_STUR_128
qualifier: size = 00, opc = 10
instruction: STUR (SIMD&FP)
section: C7.3.287
page: C7-1285
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<simm>
assembly: STUR <Qt>, [<Xn|SP>{, #<simm>}]
printf:   printf("STUR Q%d, [%s, #%d]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_STUR_32
qualifier: size = 10, opc = 00
instruction: STUR (SIMD&FP)
section: C7.3.287
page: C7-1285
destination operands: 
source operands: <Dt>,<Ht>,<St>,<Xn|SP>,<simm>
assembly: STUR <St>, [<Xn|SP>{, #<simm>}]
printf:   printf("STUR S%d, [%s, #%d]\n",packet->Rt.Value(),XnSP(packet->Rn.Value(),false).c_str(),(int) SignExtend(packet->imm9.Value(),9));

instance-name: SIMD_SUB_SCALAR_VEC
instruction: SUB (vector)
section: C7.3.288
page: C7-1287
destination operands: <Vd>
source operands: <T>,<V>,<m>
assembly: SUB <V><d>, <V><n>, <V><m>
printf:   printf("SUB %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_SUB_SCALAR_VEC
instruction: SUB (vector)
section: C7.3.288
page: C7-1287
destination operands: <Vd>
source operands: <T>,<V>,<m>
assembly: SUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("SUB V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_SUBHN_VEC
instance-num: 1
instruction: SUBHN
section: C7.3.289
page: C7-1289
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SUBHN <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta> (Q==0)
printf:   printf("SUBHN V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rm.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_SUBHN_VEC
instance-num: 2
instruction: SUBHN2
section: C7.3.289
page: C7-1289
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: SUBHN2 <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta> (Q==1)
printf:   printf("SUBHN2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rm.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_SUQADD_SCALAR
instruction: SUQADD
section: C7.3.290
page: C7-1291
destination operands: <Vd>
source operands: <V>
assembly: SUQADD <V><d>, <V><n>
printf:   printf("SUQADD %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: SIMD_SUQADD_SCALAR_VEC
instruction: SUQADD
section: C7.3.290
page: C7-1291
destination operands: <Vd>
source operands: <V>
assembly: SUQADD <Vd>.<T>, <Vn>.<T>
printf:   printf("SUQADD V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());


'SXTL' (ALIAS IGNORED)

instance-name: SIMD_TBL_IMM_MOD
qualifier: len = 11
notes: Four register table variant 
instruction: TBL
section: C7.3.292
page: C7-1294
destination operands: <Vd>
source operands: <Ta>,<Vm>,<Vn>
assembly: TBL <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B, <Vn+2>.16B, <Vn+3>.16B }, <Vm>.<Ta>
printf:   printf("TBL V%d.%s,  V%d.16B, V%d.16B, V%d.16B, V%d.16B , V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),(packet->Rn.Value() + 1) % 32,(packet->Rn.Value() + 2) % 32,(packet->Rn.Value() + 3) % 32,packet->Rm.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_TBL_IMM_MOD
qualifier: len = 00
notes: Single register table variant 
instruction: TBL
section: C7.3.292
page: C7-1294
destination operands: <Vd>
source operands: <Ta>,<Vm>,<Vn>
assembly: TBL <Vd>.<Ta>, { <Vn>.16B }, <Vm>.<Ta>
printf:   printf("TBL V%d.%s,  V%d.16B , V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),packet->Rm.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_TBL_IMM_MOD
qualifier: len = 10
notes: Three register table variant 
instruction: TBL
section: C7.3.292
page: C7-1294
destination operands: <Vd>
source operands: <Ta>,<Vm>,<Vn>
assembly: TBL <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B, <Vn+2>.16B }, <Vm>.<Ta>
printf:   printf("TBL V%d.%s,  V%d.16B, V%d.16B, V%d.16B , V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),(packet->Rn.Value() + 1) % 32,(packet->Rn.Value() + 2) % 32,packet->Rm.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_TBL_IMM_MOD
qualifier: len = 01
notes: Two register table variant 
instruction: TBL
section: C7.3.292
page: C7-1294
destination operands: <Vd>
source operands: <Ta>,<Vm>,<Vn>
assembly: TBL <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B }, <Vm>.<Ta>
printf:   printf("TBL V%d.%s,  V%d.16B, V%d.16B , V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),(packet->Rn.Value() + 1) % 32,packet->Rm.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_TBX_IMM_MOD
qualifier: len = 11
notes: Four register table variant 
instruction: TBX
section: C7.3.293
page: C7-1296
destination operands: <Vd>
source operands: <Ta>,<Vm>,<Vn>
assembly: TBX <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B, <Vn+2>.16B, <Vn+3>.16B }, <Vm>.<Ta>
printf:   printf("TBX V%d.%s,  V%d.16B, V%d.16B, V%d.16B, V%d.16B , V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),(packet->Rn.Value() + 1) % 32,(packet->Rn.Value() + 2) % 32,(packet->Rn.Value() + 3) % 32,packet->Rm.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_TBX_IMM_MOD
qualifier: len = 00
notes: Single register table variant 
instruction: TBX
section: C7.3.293
page: C7-1296
destination operands: <Vd>
source operands: <Ta>,<Vm>,<Vn>
assembly: TBX <Vd>.<Ta>, { <Vn>.16B }, <Vm>.<Ta>
printf:   printf("TBX V%d.%s,  V%d.16B , V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),packet->Rm.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_TBX_IMM_MOD
qualifier: len = 10
notes: Three register table variant 
instruction: TBX
section: C7.3.293
page: C7-1296
destination operands: <Vd>
source operands: <Ta>,<Vm>,<Vn>
assembly: TBX <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B, <Vn+2>.16B }, <Vm>.<Ta>
printf:   printf("TBX V%d.%s,  V%d.16B, V%d.16B, V%d.16B , V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),(packet->Rn.Value() + 1) % 32,(packet->Rn.Value() + 2) % 32,packet->Rm.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_TBX_IMM_MOD
qualifier: len = 01
notes: Two register table variant 
instruction: TBX
section: C7.3.293
page: C7-1296
destination operands: <Vd>
source operands: <Ta>,<Vm>,<Vn>
assembly: TBX <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B }, <Vm>.<Ta>
printf:   printf("TBX V%d.%s,  V%d.16B, V%d.16B , V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),(packet->Rn.Value() + 1) % 32,packet->Rm.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_TRN1_SCALAR
instruction: TRN1
section: C7.3.294
page: C7-1298
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: TRN1 <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("TRN1 V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_TRN2_SCALAR
instruction: TRN2
section: C7.3.295
page: C7-1299
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: TRN2 <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("TRN2 V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UABA_VEC
instruction: UABA
section: C7.3.296
page: C7-1300
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: UABA <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("UABA V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UABAL_VEC
instance-num: 1
instruction: UABAL
section: C7.3.297
page: C7-1301
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: UABAL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==0)
printf:   printf("UABAL V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UABAL_VEC
instance-num: 2
instruction: UABAL2
section: C7.3.297
page: C7-1301
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: UABAL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==1)
printf:   printf("UABAL2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UABD_VEC
instruction: UABD
section: C7.3.298
page: C7-1303
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: UABD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("UABD V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UABDL_VEC
instance-num: 1
instruction: UABDL
section: C7.3.299
page: C7-1304
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: UABDL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==0)
printf:   printf("UABDL V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UABDL_VEC
instance-num: 2
instruction: UABDL2
section: C7.3.299
page: C7-1304
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: UABDL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==1)
printf:   printf("UABDL2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UADALP_VEC
instruction: UADALP
section: C7.3.300
page: C7-1306
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: UADALP <Vd>.<Ta>, <Vn>.<Tb>
printf:   printf("UADALP V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UADDL_VEC
instance-num: 1
instruction: UADDL
section: C7.3.301
page: C7-1308
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: UADDL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==0)
printf:   printf("UADDL V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UADDL_VEC
instance-num: 2
instruction: UADDL2
section: C7.3.301
page: C7-1308
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: UADDL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==1)
printf:   printf("UADDL2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UADDLP_VEC
instruction: UADDLP
section: C7.3.302
page: C7-1310
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: UADDLP <Vd>.<Ta>, <Vn>.<Tb>
printf:   printf("UADDLP V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UADDLV_SCALAR
instruction: UADDLV
section: C7.3.303
page: C7-1312
destination operands: <V>
source operands: <T>,<Vn>
assembly: UADDLV <V><d>, <Vn>.<T>
printf:   printf("UADDLV %s%u, V%d.%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UADDW_VEC
instance-num: 1
instruction: UADDW
section: C7.3.304
page: C7-1313
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: UADDW <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb> (Q==0)
printf:   printf("UADDW V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UADDW_VEC
instance-num: 2
instruction: UADDW2
section: C7.3.304
page: C7-1313
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: UADDW2 <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb> (Q==1)
printf:   printf("UADDW2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UCVTF_SCALAR_VEC_FIXED
instruction: UCVTF (vector, fixed-point)
section: C7.3.305
page: C7-1315
destination operands: 
source operands: <V>
assembly: UCVTF <V><d>, <V><n>, #<fbits>
printf:   printf("UCVTF %s%u, %s%u, #%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: SIMD_UCVTF_SCALAR_VEC_FIXED
instruction: UCVTF (vector, fixed-point)
section: C7.3.305
page: C7-1315
destination operands: 
source operands: <V>
assembly: UCVTF <Vd>.<T>, <Vn>.<T>, #<fbits>
printf:   printf("UCVTF V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: SIMD_UCVTF_SCALAR_VEC
instruction: UCVTF (vector, integer)
section: C7.3.306
page: C7-1317
destination operands: <Vd>
source operands: <T>,<V>
assembly: UCVTF <V><d>, <V><n>
printf:   printf("UCVTF %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: SIMD_UCVTF_SCALAR_VEC
instruction: UCVTF (vector, integer)
section: C7.3.306
page: C7-1317
destination operands: <Vd>
source operands: <T>,<V>
assembly: UCVTF <Vd>.<T>, <Vn>.<T>
printf:   printf("UCVTF V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UCVTF_SINGLE_FIXED
instruction: UCVTF (scalar, fixed-point)
section: C7.3.307
page: C7-1319
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: UCVTF <Sd>, <Wn>, #<fbits>
printf:   printf("UCVTF S%d, %s, #%u\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),true).c_str(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: SIMD_UCVTF_FIXED
instruction: UCVTF (scalar, fixed-point)
section: C7.3.307
page: C7-1319
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: UCVTF <Dd>, <Wn>, #<fbits>
printf:   printf("UCVTF D%d, %s, #%u\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),true).c_str(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: SIMD_UCVTF_SINGLE_FIXED
instruction: UCVTF (scalar, fixed-point)
section: C7.3.307
page: C7-1319
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: UCVTF <Sd>, <Xn>, #<fbits>
printf:   printf("UCVTF S%d, %s, #%u\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),false).c_str(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: SIMD_UCVTF_FIXED
instruction: UCVTF (scalar, fixed-point)
section: C7.3.307
page: C7-1319
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: UCVTF <Dd>, <Xn>, #<fbits>
printf:   printf("UCVTF D%d, %s, #%u\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),false).c_str(),decodeFbits(packet->immh.Value(),packet->immb.Value(),packet->scale.Value(),packet->scale.IsDefined()));

instance-name: SIMD_UCVTF_FIXED
instruction: UCVTF (scalar, fixed-point)
section: C7.3.307
page: C7-1319
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: CheckFPAdvSIMDEnabled64();
printf:   printf("CheckFPAdvSIMDEnabled64();\n");

instance-name: SIMD_UCVTF_SINGLE
instruction: UCVTF (scalar, integer)
section: C7.3.308
page: C7-1321
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: UCVTF <Sd>, <Wn>
printf:   printf("UCVTF S%d, %s\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),true).c_str());

instance-name: SIMD_UCVTF
instruction: UCVTF (scalar, integer)
section: C7.3.308
page: C7-1321
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: UCVTF <Dd>, <Wn>
printf:   printf("UCVTF D%d, %s\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),true).c_str());

instance-name: SIMD_UCVTF_SINGLE
instruction: UCVTF (scalar, integer)
section: C7.3.308
page: C7-1321
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: UCVTF <Sd>, <Xn>
printf:   printf("UCVTF S%d, %s\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),false).c_str());

instance-name: SIMD_UCVTF
instruction: UCVTF (scalar, integer)
section: C7.3.308
page: C7-1321
destination operands: <Dd>,<Sd>
source operands: <Wn>,<Xn>
assembly: UCVTF <Dd>, <Xn>
printf:   printf("UCVTF D%d, %s\n",packet->Rd.Value(),XnXZR(packet->Rn.Value(),false).c_str());

instance-name: SIMD_UHADD_VEC
instruction: UHADD
section: C7.3.309
page: C7-1323
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: UHADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("UHADD V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UHSUB_VEC
instruction: UHSUB
section: C7.3.310
page: C7-1324
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: UHSUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("UHSUB V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UMAX_VEC
instruction: UMAX
section: C7.3.311
page: C7-1325
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: UMAX <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("UMAX V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UMAXP_VEC
instruction: UMAXP
section: C7.3.312
page: C7-1326
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: UMAXP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("UMAXP V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UMAXV_SCALAR
instruction: UMAXV
section: C7.3.313
page: C7-1327
destination operands: <V>
source operands: <T>,<Vn>
assembly: UMAXV <V><d>, <Vn>.<T>
printf:   printf("UMAXV %s%u, V%d.%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UMIN_VEC
instruction: UMIN
section: C7.3.314
page: C7-1329
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: UMIN <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("UMIN V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UMINP_VEC
instruction: UMINP
section: C7.3.315
page: C7-1330
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: UMINP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("UMINP V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UMINV_SCALAR
instruction: UMINV
section: C7.3.316
page: C7-1331
destination operands: <V>
source operands: <T>,<Vn>
assembly: UMINV <V><d>, <Vn>.<T>
printf:   printf("UMINV %s%u, V%d.%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UMLAL_VEC_ELEM
instance-num: 1
instruction: UMLAL
section: C7.3.317
page: C7-1333
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: UMLAL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("UMLAL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_UMLAL_VEC_ELEM
instance-num: 2
instruction: UMLAL2 (by element)
section: C7.3.317
page: C7-1333
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: UMLAL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("UMLAL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_UMLAL_VEC
instance-num: 1
instruction: UMLAL
section: C7.3.318
page: C7-1335
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: UMLAL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==0)
printf:   printf("UMLAL V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UMLAL_VEC
instance-num: 2
instruction: UMLAL2 (vector)
section: C7.3.318
page: C7-1335
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: UMLAL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==1)
printf:   printf("UMLAL2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UMLSL_VEC_ELEM
instance-num: 1
instruction: UMLSL
section: C7.3.319
page: C7-1337
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: UMLSL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("UMLSL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_UMLSL_VEC_ELEM
instance-num: 2
instruction: UMLSL2 (by element)
section: C7.3.319
page: C7-1337
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: UMLSL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("UMLSL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_UMLSL_VEC
instance-num: 1
instruction: UMLSL
section: C7.3.320
page: C7-1339
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: UMLSL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==0)
printf:   printf("UMLSL V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UMLSL_VEC
instance-num: 2
instruction: UMLSL2 (vector)
section: C7.3.320
page: C7-1339
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: UMLSL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==1)
printf:   printf("UMLSL2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UMOV_32
qualifier: Q = 0
notes: 32-bit variant 
instruction: UMOV
section: C7.3.321
page: C7-1341
destination operands: <Wd>,<Xd>
source operands: <Ts>,<Vn>
assembly: UMOV <Wd>, <Vn>.<Ts>[<index>]
printf:   printf("UMOV %s, V%d.%s[%s]\n",XnXZR(packet->Rd.Value(),true).c_str(),packet->Rn.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex(packet->imm5.Value()).c_str());

instance-name: SIMD_UMOV_64
qualifier: Q = 1
notes: 64-bit variant 
instruction: UMOV
section: C7.3.321
page: C7-1341
destination operands: <Wd>,<Xd>
source operands: <Ts>,<Vn>
assembly: UMOV <Xd>, <Vn>.<Ts>[<index>]
printf:   printf("UMOV %s, V%d.%s[%u]\n",XnXZR(packet->Rd.Value(),false).c_str(),packet->Rn.Value(),Tscale(packet->imm5.Value()).c_str(),packet->imm5.Value()>>4);

instance-name: SIMD_UMULL_VEC_ELEM
instance-num: 1
instruction: UMULL
section: C7.3.322
page: C7-1343
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: UMULL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("UMULL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_UMULL_VEC_ELEM
instance-num: 2
instruction: UMULL2 (by element)
section: C7.3.322
page: C7-1343
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: UMULL{2} <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
printf:   printf("UMULL2 V%d.%s, V%d.%s, V%d.%s[%s]\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tscale(packet->imm5.Value()).c_str(),simdElementIndex3(packet->size.Value(),packet->H.Value(),packet->L.Value(),packet->M.Value()).c_str());

instance-name: SIMD_UMULL_VEC
instance-num: 1
instruction: UMULL
section: C7.3.323
page: C7-1345
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: UMULL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==0)
printf:   printf("UMULL V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UMULL_VEC
instance-num: 2
instruction: UMULL2 (vector)
section: C7.3.323
page: C7-1345
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: UMULL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==1)
printf:   printf("UMULL2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UQADD_SCALAR
instruction: UQADD
section: C7.3.324
page: C7-1347
destination operands: <Vd>
source operands: <V>,<m>
assembly: UQADD <V><d>, <V><n>, <V><m>
printf:   printf("UQADD %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_UQADD_SCALAR_VEC
instruction: UQADD
section: C7.3.324
page: C7-1347
destination operands: <Vd>
source operands: <V>,<m>
assembly: UQADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("UQADD V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UQRSHL_SCALAR
instruction: UQRSHL
section: C7.3.325
page: C7-1349
destination operands: 
source operands: <V>,<m>
assembly: UQRSHL <V><d>, <V><n>, <V><m>
printf:   printf("UQRSHL %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_UQRSHL_SCALAR_VEC
instruction: UQRSHL
section: C7.3.325
page: C7-1349
destination operands: 
source operands: <V>,<m>
assembly: UQRSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("UQRSHL V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UQRSHRN_SCALAR
instance-num: 1
instruction: UQRSHRN
section: C7.3.326
page: C7-1351
destination operands: <Vd>
source operands: 
assembly: UQRSHRN <Vb><d>, <Va><n>, #<shift>
printf:   printf("UQRSHRN %s%u, %s%u, #%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_UQRSHRN_SCALAR_VEC
instance-num: 1
instruction: UQRSHRN
section: C7.3.326
page: C7-1351
destination operands: <Vd>
source operands: 
assembly: UQRSHRN{2} <Vd>.<Tb>, <Vn>.<Ta>, #<shift>
printf:   printf("UQRSHRN2 V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_UQRSHRN_SCALAR
instance-num: 2
instruction: UQRSHRN2
section: C7.3.326
page: C7-1351
destination operands: <Vd>
source operands: 
assembly: UQRSHRN <Vb><d>, <Va><n>, #<shift>
printf:   printf("UQRSHRN %s%u, %s%u, #%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_UQRSHRN_SCALAR_VEC
instance-num: 2
instruction: UQRSHRN2
section: C7.3.326
page: C7-1351
destination operands: <Vd>
source operands: 
assembly: UQRSHRN{2} <Vd>.<Tb>, <Vn>.<Ta>, #<shift>
printf:   printf("UQRSHRN2 V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_UQSHL_IMM_SCALAR
instruction: UQSHL (immediate)
section: C7.3.327
page: C7-1354
destination operands: <Vd>
source operands: <T>,<V>,<Vn>
assembly: UQSHL <V><d>, <V><n>, #<shift>
printf:   printf("UQSHL %s%u, %s%u, #%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),(packet->immh.Value()<<3|packet->immb.Value()) - (8<<HighestSetBit(packet->immh.Value(),4)));

instance-name: SIMD_UQSHL_IMM_SCALAR_VEC
instruction: UQSHL (immediate)
section: C7.3.327
page: C7-1354
destination operands: <Vd>
source operands: <T>,<V>,<Vn>
assembly: UQSHL <Vd>.<T>, <Vn>.<T>, #<shift>
printf:   printf("UQSHL V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(packet->immh.Value()<<3|packet->immb.Value()) - (8<<HighestSetBit(packet->immh.Value(),4)));

instance-name: SIMD_UQSHL_REG_SCALAR
instruction: UQSHL (register)
section: C7.3.328
page: C7-1357
destination operands: 
source operands: <V>,<m>
assembly: UQSHL <V><d>, <V><n>, <V><m>
printf:   printf("UQSHL %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_UQSHL_REG_SCALAR_VEC
instruction: UQSHL (register)
section: C7.3.328
page: C7-1357
destination operands: 
source operands: <V>,<m>
assembly: UQSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("UQSHL V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UQSHRN_SCALAR
instruction: UQSHRN
section: C7.3.329
page: C7-1359
destination operands: <Vd>
source operands: 
assembly: UQSHRN <Vb><d>, <Va><n>, #<shift>
printf:   printf("UQSHRN %s%u, %s%u, #%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_UQSHRN_SCALAR_VEC
instruction: UQSHRN
section: C7.3.329
page: C7-1359
destination operands: <Vd>
source operands: 
assembly: UQSHRN{2} <Vd>.<Tb>, <Vn>.<Ta>, #<shift>
printf:   printf("UQSHRN2 V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_UQSUB_SCALAR
instruction: UQSUB
section: C7.3.330
page: C7-1362
destination operands: <Vd>
source operands: <V>,<m>
assembly: UQSUB <V><d>, <V><n>, <V><m>
printf:   printf("UQSUB %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_UQSUB_SCALAR_VEC
instruction: UQSUB
section: C7.3.330
page: C7-1362
destination operands: <Vd>
source operands: <V>,<m>
assembly: UQSUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("UQSUB V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UQXTN_SCALAR
instance-num: 1
instruction: UQXTN
section: C7.3.331
page: C7-1364
destination operands: <Vd>
source operands: <Tb>
assembly: UQXTN <Vb><d>, <Va><n>
printf:   printf("UQXTN %s%u, %s%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value());

instance-name: SIMD_UQXTN_SCALAR_VEC
instance-num: 1
instruction: UQXTN
section: C7.3.331
page: C7-1364
destination operands: <Vd>
source operands: <Tb>
assembly: UQXTN{2} <Vd>.<Tb>, <Vn>.<Ta>
printf:   printf("UQXTN2 V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_UQXTN_SCALAR
instance-num: 2
instruction: UQXTN2
section: C7.3.331
page: C7-1364
destination operands: <Vd>
source operands: <Tb>
assembly: UQXTN <Vb><d>, <Va><n>
printf:   printf("UQXTN %s%u, %s%u\n",(packet->size.Value()==1) ? "S" : "?",packet->Rd.Value(),(packet->size.Value()==1) ? "D" : "?",packet->Rn.Value());

instance-name: SIMD_UQXTN_SCALAR_VEC
instance-num: 2
instruction: UQXTN2
section: C7.3.331
page: C7-1364
destination operands: <Vd>
source operands: <Tb>
assembly: UQXTN{2} <Vd>.<Tb>, <Vn>.<Ta>
printf:   printf("UQXTN2 V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_URECPE_VEC
instruction: URECPE
section: C7.3.332
page: C7-1366
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: URECPE <Vd>.<T>, <Vn>.<T>
printf:   printf("URECPE V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_URHADD_VEC
instruction: URHADD
section: C7.3.333
page: C7-1367
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: URHADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("URHADD V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_URSHL_SCALAR
instruction: URSHL
section: C7.3.334
page: C7-1368
destination operands: 
source operands: <V>,<m>
assembly: URSHL <V><d>, <V><n>, <V><m>
printf:   printf("URSHL %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_URSHL_SCALAR_VEC
instruction: URSHL
section: C7.3.334
page: C7-1368
destination operands: 
source operands: <V>,<m>
assembly: URSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("URSHL V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_URSHR_SCALAR
instruction: URSHR
section: C7.3.335
page: C7-1370
destination operands: 
source operands: <V>
assembly: URSHR <V><d>, <V><n>, #<shift>
printf:   printf("URSHR %s%u, %s%u, #%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_URSHR_SCALAR_VEC
instruction: URSHR
section: C7.3.335
page: C7-1370
destination operands: 
source operands: <V>
assembly: URSHR <Vd>.<T>, <Vn>.<T>, #<shift>
printf:   printf("URSHR V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_URSQRTE_VEC
instruction: URSQRTE
section: C7.3.336
page: C7-1372
destination operands: <Vd>
source operands: <T>,<Vn>
assembly: URSQRTE <Vd>.<T>, <Vn>.<T>
printf:   printf("URSQRTE V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_URSRA_SCALAR
instruction: URSRA
section: C7.3.337
page: C7-1373
destination operands: 
source operands: <V>
assembly: URSRA <V><d>, <V><n>, #<shift>
printf:   printf("URSRA %s%u, %s%u, #%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_URSRA_SCALAR_VEC
instruction: URSRA
section: C7.3.337
page: C7-1373
destination operands: 
source operands: <V>
assembly: URSRA <Vd>.<T>, <Vn>.<T>, #<shift>
printf:   printf("URSRA V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_USHL_SCALAR
instruction: USHL
section: C7.3.338
page: C7-1375
destination operands: 
source operands: <V>,<m>
assembly: USHL <V><d>, <V><n>, <V><m>
printf:   printf("USHL %s%u, %s%u, %s%s\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),simdScalarWidth(packet->size.Value()).c_str(),ZR(packet->Rm.Value()).c_str());

instance-name: SIMD_USHL_SCALAR_VEC
instruction: USHL
section: C7.3.338
page: C7-1375
destination operands: 
source operands: <V>,<m>
assembly: USHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("USHL V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_USHLL_VEC
instance-num: 1
instruction: USHLL
section: C7.3.339
page: C7-1377
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: USHLL{2} <Vd>.<Ta>, <Vn>.<Tb>, #<shift>
printf:   printf("USHLL2 V%d.%s, V%d.%s, #%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),simd_rshift2(packet->immh.Value(),packet->immb.Value()).c_str());

instance-name: SIMD_USHLL_VEC
instance-num: 2
instruction: USHLL2
section: C7.3.339
page: C7-1377
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: USHLL{2} <Vd>.<Ta>, <Vn>.<Tb>, #<shift>
printf:   printf("USHLL2 V%d.%s, V%d.%s, #%s\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),simd_rshift2(packet->immh.Value(),packet->immb.Value()).c_str());

instance-name: SIMD_USHR_SCALAR
instruction: USHR
section: C7.3.340
page: C7-1379
destination operands: 
source operands: <V>
assembly: USHR <V><d>, <V><n>, #<shift>
printf:   printf("USHR %s%u, %s%u, #%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_USHR_SCALAR_VEC
instruction: USHR
section: C7.3.340
page: C7-1379
destination operands: 
source operands: <V>
assembly: USHR <Vd>.<T>, <Vn>.<T>, #<shift>
printf:   printf("USHR V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_USQADD_SCALAR
instruction: USQADD
section: C7.3.341
page: C7-1381
destination operands: <Vd>
source operands: <V>
assembly: USQADD <V><d>, <V><n>
printf:   printf("USQADD %s%u, %s%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value());

instance-name: SIMD_USQADD_SCALAR_VEC
instruction: USQADD
section: C7.3.341
page: C7-1381
destination operands: <Vd>
source operands: <V>
assembly: USQADD <Vd>.<T>, <Vn>.<T>
printf:   printf("USQADD V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_USRA_SCALAR
instruction: USRA
section: C7.3.342
page: C7-1383
destination operands: 
source operands: <V>
assembly: USRA <V><d>, <V><n>, #<shift>
printf:   printf("USRA %s%u, %s%u, #%u\n",simdScalarWidth(packet->size.Value()).c_str(),packet->Rd.Value(),simdScalarWidth(packet->size.Value()).c_str(),packet->Rn.Value(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_USRA_SCALAR_VEC
instruction: USRA
section: C7.3.342
page: C7-1383
destination operands: 
source operands: <V>
assembly: USRA <Vd>.<T>, <Vn>.<T>, #<shift>
printf:   printf("USRA V%d.%s, V%d.%s, #%u\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),(2 * (8<<HighestSetBit(packet->immh.Value(),4))) - (packet->immh.Value()<<3|packet->immb.Value()));

instance-name: SIMD_USUBL_VEC
instance-num: 1
instruction: USUBL
section: C7.3.343
page: C7-1385
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: USUBL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==0)
printf:   printf("USUBL V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_USUBL_VEC
instance-num: 2
instruction: USUBL2
section: C7.3.343
page: C7-1385
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: USUBL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> (Q==1)
printf:   printf("USUBL2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_USUBW_VEC
instance-num: 1
instruction: USUBW
section: C7.3.344
page: C7-1387
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: USUBW <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb> (Q==0)
printf:   printf("USUBW V%d.%s, V%d.%s, V%d.%s (Q==0)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_USUBW_VEC
instance-num: 2
instruction: USUBW2
section: C7.3.344
page: C7-1387
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vm>,<Vn>
assembly: USUBW2 <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb> (Q==1)
printf:   printf("USUBW2 V%d.%s, V%d.%s, V%d.%s (Q==1)\n",packet->Rd.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str(),packet->Rm.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str());


'UXTL' (ALIAS IGNORED)

instance-name: SIMD_UZP1_SCALAR
instruction: UZP1
section: C7.3.346
page: C7-1390
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: UZP1 <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("UZP1 V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_UZP2_SCALAR
instruction: UZP2
section: C7.3.347
page: C7-1391
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: UZP2 <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("UZP2 V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: SIMD_XTN_VEC
instance-num: 1
instruction: XTN
section: C7.3.348
page: C7-1392
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: XTN{2} <Vd>.<Tb>, <Vn>.<Ta>
printf:   printf("XTN2 V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_XTN_VEC
instance-num: 2
instruction: XTN2
section: C7.3.348
page: C7-1392
destination operands: <Vd>
source operands: <Ta>,<Tb>,<Vn>
assembly: XTN{2} <Vd>.<Tb>, <Vn>.<Ta>
printf:   printf("XTN2 V%d.%s, V%d.%s\n",packet->Rd.Value(),simdArrangementB(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),simdArrangementA(packet->size.Value()).c_str());

instance-name: SIMD_ZIP1_SCALAR
instruction: ZIP1
section: C7.3.349
page: C7-1394
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: ZIP1 <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
printf:   printf("ZIP1 V%d.%s, V%d.%s, V%d.%s\n",packet->Rd.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rn.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str(),packet->Rm.Value(),Tparm(packet->size.Value(),packet->Q.Value()).c_str());

instance-name: ZIP2
instruction: ZIP2
section: C7.3.350
page: C7-1395
destination operands: <Vd>
source operands: <T>,<Vm>,<Vn>
assembly: Routing is described elsewhere in this chapter:
printf:   printf("Routing is described elsewhere in this chapter:\n");

